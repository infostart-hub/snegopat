#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Объект.ПоказыватьБезОписания Тогда
		Элементы.Функции.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОписание", Истина);
	КонецЕсли;
	
	Элементы.Файлы.ОтборСтрок = Новый ФиксированнаяСтруктура("Разные", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьБезОписанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Если Не Объект.ПоказыватьБезОписания Тогда
			Элементы.Функции.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОписание", Истина);
		Иначе
			Элементы.Функции.ОтборСтрок = Неопределено;
		КонецЕсли;
	Иначе
		Если Не Объект.ПоказыватьБезОписания Тогда
			Элементы.Функции.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОписание, Файл", Истина, ТекущиеДанные.Файл);
		Иначе
			Элементы.Функции.ОтборСтрок = Новый ФиксированнаяСтруктура("Файл", ТекущиеДанные.Файл);
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьРазницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКаталога(ВыбранныеФайлы, ИмяРеквизита) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ИмяРеквизита] = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ДампыРабочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталог("ДампыРабочие");
КонецПроцедуры

&НаКлиенте
Процедура ДампыКАнализуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталог("ДампыКАнализу");
КонецПроцедуры

&НаКлиенте
Процедура ПутьКСтартеруНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталог("ПутьКСтартеру");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДампыОтСнегопата(Команда)
	
	СтрокаЗапуска = Объект.ПутьКСтартеру + "\" + "starter.exe";
	
	Файл = Новый Файл(СтрокаЗапуска);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПослеПроверкиНаличияСтартера", ЭтаФорма, СтрокаЗапуска));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ПоказыватьБезОписания Тогда
		Элементы.Функции.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОписание,Файл", Истина, ТекущиеДанные.Файл);
	Иначе
		Элементы.Функции.ОтборСтрок = Новый ФиксированнаяСтруктура("Файл", ТекущиеДанные.Файл);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ФайлыТолькоСИзменениями(Команда)
	
	Элементы.ФайлыТолькоСИзменениями.Пометка = Не Элементы.ФайлыТолькоСИзменениями.Пометка;
	Если Элементы.ФайлыТолькоСИзменениями.Пометка Тогда
		Элементы.Файлы.ОтборСтрок = Новый ФиксированнаяСтруктура("Разные", Истина);
	Иначе
		Элементы.Файлы.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьДампы(Команда)
	
	Если ПустаяСтрока(Объект.ДампыРабочие) или ПустаяСтрока(Объект.ДампыКАнализу) Тогда
		Сообщить("Для чтения надо выбрать обе папки дампов");
		Возврат;
	Иначе
		Если СокрЛП(Объект.ДампыРабочие) = СокрЛП(Объект.ДампыКАнализу) Тогда
			Сообщить("Папки дампов должны различаться");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Файл = Новый Файл(Объект.ДампыРабочие);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаПапкиРабочихДампов", ЭтаФорма));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьКаталог(ИмяРеквизита)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог						= Объект[ИмяРеквизита];
	Диалог.МножественныйВыбор			= Ложь;
	Диалог.ПроверятьСуществованиеФайла	= Истина;
	Диалог.Показать(Новый ОписаниеОповещения("ПослеВыбораКаталога"
						, ЭтаФорма
						, ИмяРеквизита)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиНаличияСтартера(Существует, СтрокаЗапуска) Экспорт
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(, СтрШаблон("Файл <%1> не найден", СтрокаЗапуска));
		Возврат;
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапуска + " -sntrace";
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеСогласияЗапускТрейса"
								, ЭтаФорма
								, СтрокаЗапуска)
					, "Хотите запустить стартер с трейсом ?"
					, РежимДиалогаВопрос.ДаНет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСогласияЗапускТрейса(РезультатВопроса, СтрокаЗапуска) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗавершенияТрейса"
								, ЭтаФорма)
							, СтрокаЗапуска
							,
							, Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияТрейса(КодВозврата, ДополнительныеПараметры) Экспорт
	
	СравнитьДампы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПапкиРабочихДампов(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		Сообщить("Не найден каталог рабочих дампов");
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Объект.ДампыКАнализу);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаПапкиДамповКАнализу", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПапкиДамповКАнализу(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		Сообщить("Не найден каталог дампов к анализу");
		Возврат;
	КонецЕсли;
	
	НайтиФайлыНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыНачало()
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("ПослеПоискаРабочихФайлов", ЭтаФорма)
						, Объект.ДампыРабочие
						, "*.vtable"
						, Ложь
	);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеПоискаРабочихФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		Сообщить("Не найдены файлы в папке рабочих дампов");
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("ПослеПоискаФайловАнализа", ЭтаФорма, НайденныеФайлы)
						, Объект.ДампыКАнализу
						, "*.vtable"
						, Ложь
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоискаФайловАнализа(ФайлыДампаКАнализу, ФайлыРабочегоДампа) Экспорт
	
	Если ФайлыДампаКАнализу.Количество() = 0 Тогда
		Сообщить("Не найдены файлы в папке дампов к анализу");
		Возврат;
	КонецЕсли;
	
	//найдём общие файлы по именам
	ВсеФайлыРабочие	= Новый Соответствие;
	ОбщиеФайлы 		= Новый Соответствие;
	
	Для Каждого ФайлРабочегоДампа Из ФайлыРабочегоДампа Цикл
		ВсеФайлыРабочие.Вставить(ФайлРабочегоДампа.ИмяБезРасширения, 1);
	КонецЦикла;
	Для Каждого ФайлДампаКАнализу Из ФайлыДампаКАнализу Цикл
		Если ВсеФайлыРабочие.Получить(ФайлДампаКАнализу.ИмяБезРасширения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбщиеФайлы.Вставить(ФайлДампаКАнализу.ИмяБезРасширения, 1);
	КонецЦикла;
	
	СравнитьФайлы(ОбщиеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьФайлы(ФайлыДляАнализа)
	
	Объект.Файлы.Очистить();
	Объект.Функции.Очистить();
	
	КоличествоФайлов 	= ФайлыДляАнализа.Количество();
	НомерТекущегоФайла 	= 0;
	
	Для Каждого ФайлДляАнализа Из ФайлыДляАнализа Цикл
		
		СтрокаФайлов = Объект.Файлы.Добавить();
		СтрокаФайлов.Файл = ФайлДляАнализа.Ключ;
		
		НомерТекущегоФайла = НомерТекущегоФайла + 1;
		Состояние("Загрузка файла", НомерТекущегоФайла * 100 / КоличествоФайлов, СтрокаФайлов.Файл);
		
		ДанныеРабочегоДампа = ДанныеФайла(СтрШаблон("%1\%2.vtable", Объект.ДампыРабочие , СтрокаФайлов.Файл));
		ДанныеДампаКАнализу = ДанныеФайла(СтрШаблон("%1\%2.vtable", Объект.ДампыКАнализу, СтрокаФайлов.Файл));
		
		СтрокаФайлов.ЗаголовокРабочегоДампа 		= ДанныеРабочегоДампа.Заголовок;
		СтрокаФайлов.ЗаголовокАнализируемогоДампа 	= ДанныеДампаКАнализу.Заголовок;
		
		Для Каждого СтрокаФункции Из ДанныеРабочегоДампа.Функции Цикл
			НоваяСтрока = Объект.Функции.Добавить();
			НоваяСтрока.Файл				= СтрокаФайлов.Файл;
			НоваяСтрока.НомерФункцииРаб 	= СтрокаФункции.Номер;
			НоваяСтрока.ОписаниеФункцииРаб	= СтрокаФункции.Описание;
			НоваяСтрока.ТекстФункцииРаб		= СтрокаФункции.Текст;
			НоваяСтрока.ЕстьОписание 		= Не ПустаяСтрока(СтрокаФункции.Описание);
			НоваяСтрока.КоличествоСтрокРаб	= СтрокаФункции.КоличествоСтрок;
		КонецЦикла;
		
		Для Каждого СтрокаФункции Из ДанныеДампаКАнализу.Функции Цикл
			Отбор = Новый Структура("Файл, НомерФункцииРаб", ФайлДляАнализа.Ключ, СтрокаФункции.Номер);
			НайденныеСтроки = Объект.Функции.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.Функции.Добавить();
				НоваяСтрока.Файл				= СтрокаФайлов.Файл;
				НоваяСтрока.НомерФункцииРаб		= СтрокаФункции.Номер;
			Иначе
				НоваяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			НоваяСтрока.НомерФункцииАнализ 		= СтрокаФункции.Номер;
			НоваяСтрока.ОписаниеФункцииАнализ	= СтрокаФункции.Описание;
			НоваяСтрока.ТекстФункцииАнализ		= СтрокаФункции.Текст;
			НоваяСтрока.ЕстьОписание 			= НоваяСтрока.ЕстьОписание ИЛИ Не ПустаяСтрока(СтрокаФункции.Описание);
			НоваяСтрока.КоличествоСтрокАнализ	= СтрокаФункции.КоличествоСтрок;
		КонецЦикла;
		
	КонецЦикла;
	
	Состояние();
	
	ПересчитатьРазницы();
	
	Объект.Файлы.Сортировать("Файл");
	
	ПоказатьПредупреждение(,"Сравнение дампов закончено");
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеФайла(ИмяФайла)
	
	лЗаголовок		= "";
	МассивФункций	= Новый Массив;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	ВесьТекст 	= ЧтениеТекста.Прочитать();
	СтрокиФайла = СтрРазделить(ВесьТекст, Символы.ПС, Ложь);
	
	Для нн = 0 По СтрокиФайла.ВГраница() Цикл
		
		ТекущаяСтрокаФайла = СокрЛП(СтрокиФайла.Получить(нн));
		
		Если Лев(ТекущаяСтрокаФайла, 5) = "-----" Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ТекущаяСтрокаФайла, "Vtable address") или СтрНачинаетсяС(ТекущаяСтрокаФайла, "Offset in module:") Тогда
			Продолжить;
		КонецЕсли;
		 
		лЗаголовок = ?(ПустаяСтрока(лЗаголовок), ТекущаяСтрокаФайла, лЗаголовок + Символы.ПС + ТекущаяСтрокаФайла);
		
	КонецЦикла;
	
	//функции
	НомерФункции	= 0;
	ОписаниеФункции	= "";
	ТекстФункции	= "";
	КоличествоСтрок	= 0;
	
	Для кк = нн+1 По СтрокиФайла.ВГраница() Цикл
		
		ТекущаяСтрокаФайла = СтрокиФайла.Получить(кк);
		
		Если СтрНачинаетсяС(СокрЛП(ТекущаяСтрокаФайла), "Function ") Тогда
			ПозицияФункции 		= СтрНайти(ТекущаяСтрокаФайла, "Function ");
			СтрокаБезФункции 	= Сред(ТекущаяСтрокаФайла, ПозицияФункции + 9);
			ПозицияПробела 		= СтрНайти(СтрокаБезФункции, " ");
			НомерФункции 		= Число(Лев(СтрокаБезФункции, ПозицияПробела));
			ОписаниеФункции 	= СокрЛП(Сред(СтрокаБезФункции, ПозицияПробела));
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(СокрЛП(ТекущаяСтрокаФайла), "address is") Тогда
			Продолжить;
		КонецЕсли;
		
		//НЕХ убрать
		Если СтрНачинаетсяС(ТекущаяСтрокаФайла, "     ") Тогда
			ТекущаяСтрокаФайла 	= Сред(ТекущаяСтрокаФайла, 29);
			ТекстФункции 		= ?(ПустаяСтрока(ТекстФункции), ТекущаяСтрокаФайла, ТекстФункции + Символы.ПС + ТекущаяСтрокаФайла);
			КоличествоСтрок 	= КоличествоСтрок + 1;
		КонецЕсли;
		
		Если Лев(ТекущаяСтрокаФайла, 5) = "-----" Тогда
			МассивФункций.Добавить(Новый Структура("Номер, Описание, Текст, КоличествоСтрок"
												, НомерФункции
												, ОписаниеФункции
												, ТекстФункции
												, КоличествоСтрок
								)
			);
			ОписаниеФункции	= "";
			ТекстФункции	= "";
			КоличествоСтрок	= 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не КоличествоСтрок = 0 Тогда
		МассивФункций.Добавить(Новый Структура("Номер, Описание, Текст, КоличествоСтрок"
												, НомерФункции
												, ОписаниеФункции
												, ТекстФункции
												, КоличествоСтрок
								)
		);
	КонецЕсли;
	
	Возврат Новый Структура("Заголовок, Функции", лЗаголовок, МассивФункций);
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьРазницы()
	
	КоличествоФайлов 	= Объект.Файлы.Количество();
	НомерТекущегоФайла 	= 0;
	
	//тут надо бы с количествами красиво придумать, пока просто что-то
	Для Каждого СтрокаФайла Из Объект.Файлы Цикл
		
		НомерТекущегоФайла = НомерТекущегоФайла + 1;
		Состояние("Сравнение файлов", НомерТекущегоФайла * 100 / КоличествоФайлов, СтрокаФайла.Файл);
		
		Если Не Объект.ПоказыватьБезОписания Тогда
			НайденныеФункции = Объект.Функции.НайтиСтроки(Новый Структура("Файл, ЕстьОписание"
									, СтрокаФайла.Файл
									, Истина
									)
			);
		Иначе
			НайденныеФункции = Объект.Функции.НайтиСтроки(Новый Структура("Файл"
									, СтрокаФайла.Файл
									)
			);
		КонецЕсли;
		
		СтрокаФайла.Дельта = 0;
		
		Для Каждого СтрокаФункций Из НайденныеФункции Цикл
			Если Не Объект.ПоказыватьБезОписания
				И ПустаяСтрока(СтрокаФункций.ОписаниеФункцииРаб)
				И ПустаяСтрока(СтрокаФункций.ОписаниеФункцииАнализ) Тогда
				Продолжить;
			КонецЕсли;
			Если Не СтрокаФункций.ОписаниеФункцииРаб = СтрокаФункций.ОписаниеФункцииАнализ Тогда
				СтрокаФункций.Разные	= Истина;
				СтрокаФункций.Процент	= СтрокаФункций.Процент + 0.1;
				СтрокаФайла.Дельта		= СтрокаФайла.Дельта + 1;
			КонецЕсли;
			Если Не СтрокаФункций.КоличествоСтрокРаб = СтрокаФункций.КоличествоСтрокАнализ Тогда
				//TODO:Сделать сравнение текстов бы ещё
				//СтрокаФункций.Разные 	= Истина;
				//СтрокаФункций.Процент	= СтрокаФункций.Процент + 0.01;
				//СтрокаФайла.Дельта	= СтрокаФайла.Дельта + 1;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаФайла.Разные = Не (СтрокаФайла.Дельта = 0);
		
	КонецЦикла;
	
	Состояние();
	
КонецПроцедуры

#КонецОбласти
