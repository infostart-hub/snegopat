declare module "v8_1c" {
interface V8Global{ connectGlobals(obj);}
declare var global: V8Global;
interface EnumXBaseEncoding {
	ANSI;
	OEM;
}
declare type ПеречислениеКодировкаXBase = EnumXBaseEncoding;
interface EnumInternetMailTextType {
	HTML;
	PlainText;
	ПростойТекст;
	RichText;
	РазмеченныйТекст;
}
declare type ПеречислениеТипТекстаПочтовогоСообщения = EnumInternetMailTextType;
interface EnumInternetMailTextProcessing {
	Process;
	Обрабатывать;
	DontProcess;
	НеОбрабатывать;
}
declare type ПеречислениеОбработкаТекстаИнтернетПочтовогоСообщения = EnumInternetMailTextProcessing;
interface EnumInternetMailMessageImportance {
	Highest;
	Наивысшая;
	High;
	Высокая;
	Normal;
	Обычная;
	Low;
	Низкая;
	Lowest;
	Наименьшая;
}
declare type ПеречислениеВажностьИнтернетПочтовогоСообщения = EnumInternetMailMessageImportance;
interface EnumInternetMailAttachmentEncodingMode {
	MIME;
	UUEncode;
}
declare type ПеречислениеСпособКодированияИнтернетПочтовогоВложения = EnumInternetMailAttachmentEncodingMode;
interface EnumInternetMailMessageNonASCIISymbolsEncodingMode {
	None;
	БезКодирования;
	MIME;
	QuotedPrintable;
}
declare type ПеречислениеСпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения = EnumInternetMailMessageNonASCIISymbolsEncodingMode;
interface EnumSMTPAuthenticationMode {
	None;
	БезАутентификации;
	Default;
	ПоУмолчанию;
	Plain;
	Login;
	CramMD5;
}
declare type ПеречислениеСпособSMTPАутентификации = EnumSMTPAuthenticationMode;
interface EnumPOP3AuthenticationMode {
	General;
	Обычная;
	APOP;
	CramMD5;
}
declare type ПеречислениеСпособPOP3Аутентификации = EnumPOP3AuthenticationMode;
interface EnumInternetMailProtocol {
	POP3;
	IMAP;
	SMTP;
}
declare type ПеречислениеПротоколИнтернетПочты = EnumInternetMailProtocol;
interface EnumZIPCompressionMethod {
	Copy;
	Копирование;
	Deflate;
	Сжатие;
	BZIP2;
}
declare type ПеречислениеМетодСжатияZIP = EnumZIPCompressionMethod;
interface EnumZIPCompressionLevel {
	Minimum;
	Минимальный;
	Optimal;
	Оптимальный;
	Maximum;
	Максимальный;
}
declare type ПеречислениеУровеньСжатияZIP = EnumZIPCompressionLevel;
interface EnumZIPEncryptionMethod {
	Zip20;
	AES128;
	AES192;
	AES256;
}
declare type ПеречислениеМетодШифрованияZIP = EnumZIPEncryptionMethod;
interface EnumZIPStorePathMode {
	StoreFullPath;
	СохранятьПолныеПути;
	StoreRelativePath;
	СохранятьОтносительныеПути;
	DontStorePath;
	НеСохранятьПути;
}
declare type ПеречислениеРежимСохраненияПутейZIP = EnumZIPStorePathMode;
interface EnumZIPSubDirProcessingMode {
	ProcessRecursively;
	ОбрабатыватьРекурсивно;
	DontProcess;
	НеОбрабатывать;
}
declare type ПеречислениеРежимОбработкиПодкаталоговZIP = EnumZIPSubDirProcessingMode;
interface EnumZIPRestoreFilePathsMode {
	Restore;
	Восстанавливать;
	DontRestore;
	НеВосстанавливать;
}
declare type ПеречислениеРежимВосстановленияПутейФайловZIP = EnumZIPRestoreFilePathsMode;
interface FixedArray {
	Count(): number;
	Количество(): number;
	UBound(): number;
	ВГраница(): number;
	Get(... params);
	Получить(... params);
	Find(... params): number;
	Найти(... params): number;
}
declare type ФиксированныйМассив = FixedArray;
interface CryptoModuleInformation {
	Name: string;
	Имя: string;
	HashAlgorithms: FixedArray;
	АлгоритмыХеширования: FixedArray;
	SignAlgorithms: FixedArray;
	АлгоритмыПодписи: FixedArray;
	EncryptAlgorithms: FixedArray;
	АлгоритмыШифрования: FixedArray;
}
interface CryptoToolsManager {
	GetCryptoModuleInformation(... params): CryptoModuleInformation;
	ПолучитьИнформациюМодуляКриптографии(... params): CryptoModuleInformation;
	BeginGettingCryptoModuleInformation(... params): void;
	НачатьПолучениеИнформацииМодуляКриптографии(... params): void;
}
interface EnumInternetMailMessageParseStatus {
	ErrorsNotDetected;
	ОшибокНеОбнаружено;
	ErrorsDetected;
	ОбнаруженыОшибки;
}
declare type ПеречислениеСтатусРазбораИнтернетПочтовогоСообщения = EnumInternetMailMessageParseStatus;
interface ArrayV8 {
	Count(): number;
	Количество(): number;
	UBound(): number;
	ВГраница(): number;
	Insert(... params): void;
	Вставить(... params): void;
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Get(... params);
	Получить(... params);
	Set(... params): void;
	Установить(... params): void;
	Find(... params): number;
	Найти(... params): number;
}
declare type Массив = ArrayV8;
interface DeliverableNotificationSendManager {
	Send(... params): void;
	Отправить(... params): void;
	GetExcludedRecipients(... params): ArrayV8;
	ПолучитьИсключенныхПолучателей(... params): ArrayV8;
}
interface EnumDeliverableNotificationSubscriberType {
	APNS;
	GCM;
}
declare type ПеречислениеТипПодписчикаДоставляемыхУведомлений = EnumDeliverableNotificationSubscriberType;
interface EnumSoundAlert {
	None;
	Нет;
	Default;
	ПоУмолчанию;
}
declare type ПеречислениеЗвуковоеОповещение = EnumSoundAlert;
interface EnumInAppPurchaseService {
	GooglePlayInAppBilling;
	AppleInAppPurchase;
}
declare type ПеречислениеСервисВстроенныхПокупок = EnumInAppPurchaseService;
interface InAppPurchasesValidationManager {
	ValidateInAppPurchaseReceipt(... params): boolean;
	ПроверитьКвитанциюВстроеннойПокупки(... params): boolean;
}
interface EnumFileNamesEncodingInZipFile {
	Auto;
	Авто;
	OSEncodingWithUTF8;
	КодировкаОСДополнительноUTF8;
	UTF8;
}
declare type ПеречислениеКодировкаИменФайловВZipФайле = EnumFileNamesEncodingInZipFile;
declare var XBaseEncoding: EnumXBaseEncoding;
declare var КодировкаXBase: EnumXBaseEncoding;
declare var InternetMailTextType: EnumInternetMailTextType;
declare var ТипТекстаПочтовогоСообщения: EnumInternetMailTextType;
declare var InternetMailTextProcessing: EnumInternetMailTextProcessing;
declare var ОбработкаТекстаИнтернетПочтовогоСообщения: EnumInternetMailTextProcessing;
declare var InternetMailMessageImportance: EnumInternetMailMessageImportance;
declare var ВажностьИнтернетПочтовогоСообщения: EnumInternetMailMessageImportance;
declare var InternetMailAttachmentEncodingMode: EnumInternetMailAttachmentEncodingMode;
declare var СпособКодированияИнтернетПочтовогоВложения: EnumInternetMailAttachmentEncodingMode;
declare var InternetMailMessageNonASCIISymbolsEncodingMode: EnumInternetMailMessageNonASCIISymbolsEncodingMode;
declare var СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения: EnumInternetMailMessageNonASCIISymbolsEncodingMode;
declare var SMTPAuthenticationMode: EnumSMTPAuthenticationMode;
declare var СпособSMTPАутентификации: EnumSMTPAuthenticationMode;
declare var POP3AuthenticationMode: EnumPOP3AuthenticationMode;
declare var СпособPOP3Аутентификации: EnumPOP3AuthenticationMode;
declare var InternetMailProtocol: EnumInternetMailProtocol;
declare var ПротоколИнтернетПочты: EnumInternetMailProtocol;
declare var ZIPCompressionMethod: EnumZIPCompressionMethod;
declare var МетодСжатияZIP: EnumZIPCompressionMethod;
declare var ZIPCompressionLevel: EnumZIPCompressionLevel;
declare var УровеньСжатияZIP: EnumZIPCompressionLevel;
declare var ZIPEncryptionMethod: EnumZIPEncryptionMethod;
declare var МетодШифрованияZIP: EnumZIPEncryptionMethod;
declare var ZIPStorePathMode: EnumZIPStorePathMode;
declare var РежимСохраненияПутейZIP: EnumZIPStorePathMode;
declare var ZIPSubDirProcessingMode: EnumZIPSubDirProcessingMode;
declare var РежимОбработкиПодкаталоговZIP: EnumZIPSubDirProcessingMode;
declare var ZIPRestoreFilePathsMode: EnumZIPRestoreFilePathsMode;
declare var РежимВосстановленияПутейФайловZIP: EnumZIPRestoreFilePathsMode;
declare var CryptoTools: CryptoToolsManager;
declare var СредстваКриптографии: CryptoToolsManager;
declare var InternetMailMessageParseStatus: EnumInternetMailMessageParseStatus;
declare var СтатусРазбораИнтернетПочтовогоСообщения: EnumInternetMailMessageParseStatus;
declare var DeliverableNotificationSend: DeliverableNotificationSendManager;
declare var ОтправкаДоставляемыхУведомлений: DeliverableNotificationSendManager;
declare var DeliverableNotificationSubscriberType: EnumDeliverableNotificationSubscriberType;
declare var ТипПодписчикаДоставляемыхУведомлений: EnumDeliverableNotificationSubscriberType;
declare var SoundAlert: EnumSoundAlert;
declare var ЗвуковоеОповещение: EnumSoundAlert;
declare var InAppPurchaseService: EnumInAppPurchaseService;
declare var СервисВстроенныхПокупок: EnumInAppPurchaseService;
declare var InAppPurchasesValidation: InAppPurchasesValidationManager;
declare var ПроверкаВстроенныхПокупок: InAppPurchasesValidationManager;
declare var FileNamesEncodingInZipFile: EnumFileNamesEncodingInZipFile;
declare var КодировкаИменФайловВZipФайле: EnumFileNamesEncodingInZipFile;
declare function NumberInWords(... params): string;
declare function ЧислоПрописью(... params): string;
declare function PeriodPresentation(... params): string;
declare function ПредставлениеПериода(... params): string;
declare function FileCopy(... params): void;
declare function КопироватьФайл(... params): void;
declare function MoveFile(... params): void;
declare function ПереместитьФайл(... params): void;
declare function DeleteFiles(... params): void;
declare function УдалитьФайлы(... params): void;
declare function FindFiles(... params): ArrayV8;
declare function НайтиФайлы(... params): ArrayV8;
declare function CreateDirectory(... params): void;
declare function СоздатьКаталог(... params): void;
declare function GetCOMObject(... params);
declare function ПолучитьCOMОбъект(... params);
declare function SplitFile(... params): ArrayV8;
declare function РазделитьФайл(... params): ArrayV8;
declare function MergeFiles(... params): void;
declare function ОбъединитьФайлы(... params): void;
declare function RunApp(... params): void;
declare function ЗапуститьПриложение(... params): void;
declare function CurrentUniversalDateInMilliseconds();
declare function ТекущаяУниверсальнаяДатаВМиллисекундах();
declare function BeginCopyingFile(... params): void;
declare function НачатьКопированиеФайла(... params): void;
declare function BeginMovingFile(... params): void;
declare function НачатьПеремещениеФайла(... params): void;
declare function BeginDeletingFiles(... params): void;
declare function НачатьУдалениеФайлов(... params): void;
declare function BeginFindingFiles(... params): void;
declare function НачатьПоискФайлов(... params): void;
declare function BeginCreatingDirectory(... params): void;
declare function НачатьСозданиеКаталога(... params): void;
declare function BeginRunningApplication(... params): void;
declare function НачатьЗапускПриложения(... params): void;
declare function StringWithNumber(... params): string;
declare function СтрокаСЧислом(... params): string;
interface EnumFormItemTitleLocation {
	None;
	Нет;
	Auto;
	Авто;
	Left;
	Лево;
	Top;
	Верх;
	Right;
	Право;
	Bottom;
	Низ;
}
declare type ПеречислениеПоложениеЗаголовкаЭлементаФормы = EnumFormItemTitleLocation;
interface EnumFormItemCommandBarLabelLocation {
	None;
	Нет;
	Auto;
	Авто;
	Top;
	Верх;
	Bottom;
	Низ;
}
declare type ПеречислениеПоложениеКоманднойПанелиЭлементаФормы = EnumFormItemCommandBarLabelLocation;
interface EnumFormCommandBarLabelLocation {
	None;
	Нет;
	Auto;
	Авто;
	Top;
	Верх;
	Bottom;
	Низ;
}
declare type ПеречислениеПоложениеКоманднойПанелиФормы = EnumFormCommandBarLabelLocation;
interface EnumIncompleteChoiceMode {
	OnEnterPressed;
	ПриНажатииEnter;
	OnActivate;
	ПриАктивизации;
}
declare type ПеречислениеРежимВыбораНезаполненного = EnumIncompleteChoiceMode;
interface EnumSelectionShowMode {
	WhenActive;
	ПриАктивности;
	Always;
	Всегда;
	DontShow;
	НеОтображать;
	WhenMultipleCellsSelected;
	ПриВыделенииНесколькихЯчеек;
	WhenMultipleCellsSelectedWhenActive;
	ПриВыделенииНесколькихЯчеекПриАктивности;
}
declare type ПеречислениеРежимОтображенияВыделения = EnumSelectionShowMode;
interface EnumItemHorizontalLocation {
	Left;
	Лево;
	Center;
	Центр;
	Right;
	Право;
	Auto;
	Авто;
}
declare type ПеречислениеГоризонтальноеПоложениеЭлемента = EnumItemHorizontalLocation;
interface EnumItemVerticalAlign {
	Top;
	Верх;
	Center;
	Центр;
	Bottom;
	Низ;
	Auto;
	Авто;
}
declare type ПеречислениеВертикальноеПоложениеЭлемента = EnumItemVerticalAlign;
interface EnumColumnsGroup {
	Horizontal;
	Горизонтальная;
	Vertical;
	Вертикальная;
	InCell;
	ВЯчейке;
}
declare type ПеречислениеГруппировкаКолонок = EnumColumnsGroup;
interface EnumChildFormItemsGroup {
	Horizontal;
	Горизонтальная;
	Vertical;
	Вертикальная;
	HorizontalIfPossible;
	ГоризонтальнаяЕслиВозможно;
}
declare type ПеречислениеГруппировкаПодчиненныхЭлементовФормы = EnumChildFormItemsGroup;
interface EnumItemsAndTitlesAlignVariant {
	Auto;
	Авто;
	None;
	Нет;
	ItemsLeftTitlesLeft;
	ЭлементыЛевоЗаголовкиЛево;
	ItemsRightTitlesLeft;
	ЭлементыПравоЗаголовкиЛево;
	ItemsLeftTitlesRight;
	ЭлементыЛевоЗаголовкиПраво;
	ItemsRightTitlesRight;
	ЭлементыПравоЗаголовкиПраво;
	ItemsAutoTitlesLeft;
	ЭлементыАвтоЗаголовкиЛево;
}
declare type ПеречислениеВариантВыравниванияЭлементовИЗаголовков = EnumItemsAndTitlesAlignVariant;
interface EnumFormItemSpacing {
	Auto;
	Авто;
	None;
	Нет;
	Half;
	Половинный;
	Single;
	Одинарный;
	OneAndHalf;
	Полуторный;
	Double;
	Двойной;
}
declare type ПеречислениеИнтервалМеждуЭлементамиФормы = EnumFormItemSpacing;
interface EnumFixingInTable {
	None;
	Нет;
	Left;
	Лево;
	Right;
	Право;
}
declare type ПеречислениеФиксацияВТаблице = EnumFixingInTable;
interface EnumTableHeightControlVariant {
	Auto;
	Авто;
	UseHeightInFormRows;
	ВСтрокахФормы;
	UseHeightInTableRows;
	ВСтрокахТаблицы;
	UseContentHeight;
	ПоСодержимому;
}
declare type ПеречислениеВариантУправленияВысотойТаблицы = EnumTableHeightControlVariant;
interface EnumChildFormItemsWidth {
	Auto;
	Авто;
	Equal;
	Одинаковая;
	LeftWide;
	ЛевыйШирокий;
	LeftWidest;
	ЛевыйОченьШирокий;
	LeftNarrow;
	ЛевыйУзкий;
	LeftNarrowest;
	ЛевыйОченьУзкий;
}
declare type ПеречислениеШиринаПодчиненныхЭлементовФормы = EnumChildFormItemsWidth;
interface EnumUsualGroupRepresentation {
	None;
	Нет;
	StrongSeparation;
	СильноеВыделение;
	WeakSeparation;
	СлабоеВыделение;
	NormalSeparation;
	ОбычноеВыделение;
}
declare type ПеречислениеОтображениеОбычнойГруппы = EnumUsualGroupRepresentation;
interface EnumUsualGroupBehavior {
	Usual;
	Обычное;
	Collapsible;
	Свертываемая;
}
declare type ПеречислениеПоведениеОбычнойГруппы = EnumUsualGroupBehavior;
interface EnumUsualGroupControlRepresentation {
	TitleHyperlink;
	ГиперссылкаЗаголовка;
	Picture;
	Картинка;
}
declare type ПеречислениеОтображениеУправленияОбычнойГруппы = EnumUsualGroupControlRepresentation;
interface EnumThroughAlign {
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
	Auto;
	Авто;
}
declare type ПеречислениеСквозноеВыравнивание = EnumThroughAlign;
interface EnumFormButtonType {
	CommandBarButton;
	КнопкаКоманднойПанели;
	UsualButton;
	ОбычнаяКнопка;
	Hyperlink;
	Гиперссылка;
	CommandBarHyperlink;
	ГиперссылкаКоманднойПанели;
}
declare type ПеречислениеВидКнопкиФормы = EnumFormButtonType;
interface EnumCheckBoxType {
	Auto;
	Авто;
	CheckBox;
	Флажок;
	Tumbler;
	Тумблер;
}
declare type ПеречислениеВидФлажка = EnumCheckBoxType;
interface EnumRadioButtonType {
	Auto;
	Авто;
	RadioButton;
	Переключатель;
	Tumbler;
	Тумблер;
}
declare type ПеречислениеВидПереключателя = EnumRadioButtonType;
interface EnumFormFieldType {
	LabelField;
	ПолеНадписи;
	InputField;
	ПолеВвода;
	CheckBoxField;
	ПолеФлажка;
	PictureField;
	ПолеКартинки;
	RadioButtonField;
	ПолеПереключателя;
	SpreadsheetDocumentField;
	ПолеТабличногоДокумента;
	TextDocumentField;
	ПолеТекстовогоДокумента;
	FormattedDocumentField;
	ПолеФорматированногоДокумента;
	PlannerField;
	ПолеПланировщика;
	CalendarField;
	ПолеКалендаря;
	PeriodField;
	ПолеПериода;
	ProgressBarField;
	ПолеИндикатора;
	TrackBarField;
	ПолеПолосыРегулирования;
	ChartField;
	ПолеДиаграммы;
	GanttChartField;
	ПолеДиаграммыГанта;
	DendrogramField;
	ПолеДендрограммы;
	GraphicalSchemaField;
	ПолеГрафическойСхемы;
	HTMLDocumentField;
	ПолеHTMLДокумента;
	GeographicalSchemaField;
	ПолеГеографическойСхемы;
}
declare type ПеречислениеВидПоляФормы = EnumFormFieldType;
interface EnumFormDecorationType {
	Label;
	Надпись;
	Picture;
	Картинка;
}
declare type ПеречислениеВидДекорацииФормы = EnumFormDecorationType;
interface EnumFormGroupType {
	CommandBar;
	КоманднаяПанель;
	Popup;
	Подменю;
	ColumnGroup;
	ГруппаКолонок;
	Pages;
	Страницы;
	Page;
	Страница;
	UsualGroup;
	ОбычнаяГруппа;
	ButtonGroup;
	ГруппаКнопок;
	ContextMenu;
	КонтекстноеМеню;
}
declare type ПеречислениеВидГруппыФормы = EnumFormGroupType;
interface EnumTableRepresentation {
	List;
	Список;
	HierarchicalList;
	ИерархическийСписок;
	Tree;
	Дерево;
}
declare type ПеречислениеОтображениеТаблицы = EnumTableRepresentation;
interface EnumTableRowInputMode {
	EndOfList;
	ВКонецСписка;
	EndOfWindow;
	ВКонецОкна;
	AfterCurrentRow;
	ПослеТекущейСтроки;
	BeforeCurrentRow;
	ПередТекущейСтрокой;
}
declare type ПеречислениеРежимВводаСтрокТаблицы = EnumTableRowInputMode;
interface EnumTableSelectionMode {
	SingleRow;
	Одиночный;
	MultiRow;
	Множественный;
}
declare type ПеречислениеРежимВыделенияТаблицы = EnumTableSelectionMode;
interface EnumTableRowSelectionMode {
	Cell;
	Ячейка;
	Row;
	Строка;
}
declare type ПеречислениеРежимВыделенияСтрокиТаблицы = EnumTableRowSelectionMode;
interface EnumScrollBarUse {
	DontUse;
	НеИспользовать;
	UseAlways;
	ИспользоватьВсегда;
	AutoUse;
	ИспользоватьАвтоматически;
}
declare type ПеречислениеИспользованиеПолосыПрокрутки = EnumScrollBarUse;
interface EnumSearchInTableOnInput {
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
	Auto;
	Авто;
}
declare type ПеречислениеПоискВТаблицеПриВводе = EnumSearchInTableOnInput;
interface EnumToolTipRepresentation {
	Auto;
	Авто;
	None;
	Нет;
	Balloon;
	Всплывающая;
	Button;
	Кнопка;
	ShowAuto;
	ОтображатьАвто;
	ShowTop;
	ОтображатьСверху;
	ShowLeft;
	ОтображатьСлева;
	ShowBottom;
	ОтображатьСнизу;
	ShowRight;
	ОтображатьСправа;
}
declare type ПеречислениеОтображениеПодсказки = EnumToolTipRepresentation;
interface EnumInitialListView {
	Beginning;
	Начало;
	End;
	Конец;
	Auto;
	Авто;
}
declare type ПеречислениеНачальноеОтображениеСписка = EnumInitialListView;
interface EnumInitialTreeView {
	NoExpand;
	НеРаскрывать;
	ExpandTopLevel;
	РаскрыватьВерхнийУровень;
	ExpandAllLevels;
	РаскрыватьВсеУровни;
}
declare type ПеречислениеНачальноеОтображениеДерева = EnumInitialTreeView;
interface EnumFoldersAndItems {
	Items;
	Элементы;
	Folders;
	Группы;
	FoldersAndItems;
	ГруппыИЭлементы;
	Auto;
	Авто;
}
declare type ПеречислениеГруппыИЭлементы = EnumFoldersAndItems;
interface EnumEnterKeyBehaviorType {
	DefaultButton;
	КнопкаПоУмолчанию;
	ControlNavigation;
	ПереходПоЭлементамФормы;
}
declare type ПеречислениеТипПоведенияКлавишиEnter = EnumEnterKeyBehaviorType;
interface EnumColumnEditMode {
	Directly;
	Непосредственно;
	Enter;
	Вход;
	EnterOnInput;
	ВходПриВводе;
}
declare type ПеречислениеРежимРедактированияКолонки = EnumColumnEditMode;
interface UserWorkHistoryManager {
	Get(): ArrayV8;
	Получить(): ArrayV8;
	Add(... params): void;
	Добавить(... params): void;
	Clear(): void;
	Очистить(): void;
	ClearAll(): void;
	ОчиститьВсе(): void;
}
interface EnumReportFormType {
	Main;
	Основная;
	Settings;
	Настройка;
	Variant;
	Вариант;
}
declare type ПеречислениеТипФормыОтчета = EnumReportFormType;
interface EnumViewScalingMode {
	Auto;
	Авто;
	Normal;
	Обычный;
	Large;
	Крупный;
}
declare type ПеречислениеРежимМасштабированияПросмотра = EnumViewScalingMode;
interface EnumDateSelectionMode {
	Single;
	Одиночный;
	Multiple;
	Множественный;
	Interval;
	Интервал;
}
declare type ПеречислениеРежимВыделенияДаты = EnumDateSelectionMode;
interface EnumFormItemOrientation {
	Horizontal;
	Горизонтально;
	Vertical;
	Вертикально;
}
declare type ПеречислениеОриентацияЭлементаФормы = EnumFormItemOrientation;
interface EnumProgressBarSmoothingMode {
	Smooth;
	Плавный;
	Broken;
	Прерывистый;
	BrokenTilt;
	ПрерывистыйНаклонный;
}
declare type ПеречислениеРежимСглаживанияИндикатора = EnumProgressBarSmoothingMode;
interface EnumTrackBarMarkingAppearance {
	DontShow;
	НеОтображать;
	TopLeft;
	СверхуИлиСлева;
	BottomRight;
	СнизуИлиСправа;
	BothSides;
	СОбоихСторон;
}
declare type ПеречислениеОтображениеРазметкиПолосыРегулирования = EnumTrackBarMarkingAppearance;
interface EnumFormPagesRepresentation {
	None;
	Нет;
	TabsOnTop;
	ЗакладкиСверху;
	TabsOnBottom;
	ЗакладкиСнизу;
	TabsOnLeftHorizontal;
	ЗакладкиСлеваГоризонтально;
	TabsOnRightHorizontal;
	ЗакладкиСправаГоризонтально;
	Swipe;
	Пролистывание;
}
declare type ПеречислениеОтображениеСтраницФормы = EnumFormPagesRepresentation;
interface EnumWarningOnEditRepresentation {
	Show;
	Отображать;
	DontShow;
	НеОтображать;
	Auto;
	Авто;
}
declare type ПеречислениеОтображениеПредупрежденияПриРедактировании = EnumWarningOnEditRepresentation;
interface EnumVerticalFormScroll {
	Auto;
	Авто;
	Use;
	Использовать;
	UseIfNecessary;
	ИспользоватьПриНеобходимости;
	UseWithoutStretch;
	ИспользоватьБезРастягивания;
}
declare type ПеречислениеВертикальнаяПрокруткаФормы = EnumVerticalFormScroll;
interface EnumFormItemAdditionType {
	SearchStringRepresentation;
	ОтображениеСтрокиПоиска;
	ViewStatusRepresentation;
	ОтображениеСостоянияПросмотра;
	SearchControl;
	УправлениеПоиском;
}
declare type ПеречислениеВидДополненияЭлементаФормы = EnumFormItemAdditionType;
interface EnumDataChangeType {
	Create;
	Добавление;
	Update;
	Изменение;
	Delete;
	Удаление;
}
declare type ПеречислениеВидИзмененияДанных = EnumDataChangeType;
interface EnumSaveFormDataInSettings {
	DontUse;
	НеИспользовать;
	UseList;
	ИспользоватьСписок;
}
declare type ПеречислениеСохранениеДанныхФормыВНастройках = EnumSaveFormDataInSettings;
interface EnumAutoSaveFormDataInSettings {
	DontUse;
	НеИспользовать;
	Use;
	Использовать;
}
declare type ПеречислениеАвтоматическоеСохранениеДанныхФормыВНастройках = EnumAutoSaveFormDataInSettings;
interface EnumFormWindowOpeningMode {
	Independent;
	Независимый;
	LockOwnerWindow;
	БлокироватьОкноВладельца;
	LockWholeInterface;
	БлокироватьВесьИнтерфейс;
}
declare type ПеречислениеРежимОткрытияОкнаФормы = EnumFormWindowOpeningMode;
interface EnumClientRunMode {
	ManagedApplication;
	УправляемоеПриложение;
	OrdinaryApplication;
	ОбычноеПриложение;
	Auto;
	Авто;
}
declare type ПеречислениеРежимЗапускаКлиентскогоПриложения = EnumClientRunMode;
interface EnumCommandGroupCategory {
	NavigationPanel;
	ПанельНавигации;
	FormNavigationPanel;
	ПанельНавигацииФормы;
	ActionsPanel;
	ПанельДействий;
	FormCommandBar;
	КоманднаяПанельФормы;
}
declare type ПеречислениеКатегорияГруппыКоманд = EnumCommandGroupCategory;
interface EnumCommandParameterUseMode {
	Single;
	Одиночный;
	Multiple;
	Множественный;
}
declare type ПеречислениеРежимИспользованияПараметраКоманды = EnumCommandParameterUseMode;
interface EnumAdditionalShowMode {
	DontUse;
	НеИспользовать;
	Irrelevance;
	Неактуальность;
}
declare type ПеречислениеДополнительныйРежимОтображения = EnumAdditionalShowMode;
interface EnumEditTextUpdate {
	Auto;
	Авто;
	DontUse;
	НеИспользовать;
	OnValueChange;
	ПриИзмененииЗначения;
	Always;
	Всегда;
}
declare type ПеречислениеОбновлениеТекстаРедактирования = EnumEditTextUpdate;
interface EnumApplicationFormsOpenningMode {
	SingleWindows;
	ОтдельныеОкна;
	Tabs;
	Закладки;
}
declare type ПеречислениеРежимОткрытияФормПриложения = EnumApplicationFormsOpenningMode;
interface EnumSectionsPanelRepresentation {
	Picture;
	Картинка;
	PictureAndText;
	КартинкаИТекст;
	Text;
	Текст;
	PictureOnTopAndText;
	КартинкаСверхуИТекст;
	PictureOnLeftAndText;
	КартинкаСлеваИТекст;
}
declare type ПеречислениеОтображениеПанелиРазделов = EnumSectionsPanelRepresentation;
interface EnumChoiceHistoryOnInput {
	Auto;
	Авто;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеИсторияВыбораПриВводе = EnumChoiceHistoryOnInput;
interface EnumButtonGroupRepresentation {
	Auto;
	Авто;
	Usual;
	Обычное;
	Compact;
	Компактное;
}
declare type ПеречислениеОтображениеГруппыКнопок = EnumButtonGroupRepresentation;
interface EnumButtonShape {
	Auto;
	Авто;
	Usual;
	Обычная;
	Oval;
	Овал;
}
declare type ПеречислениеФигураКнопки = EnumButtonShape;
interface EnumButtonShapeRepresentation {
	Auto;
	Авто;
	Always;
	Всегда;
	WhenActive;
	ПриАктивности;
	None;
	Нет;
}
declare type ПеречислениеОтображениеФигурыКнопки = EnumButtonShapeRepresentation;
interface EnumButtonRepresentation {
	Text;
	Текст;
	Picture;
	Картинка;
	PictureAndText;
	КартинкаИТекст;
	Auto;
	Авто;
}
declare type ПеречислениеОтображениеКнопки = EnumButtonRepresentation;
interface EnumSearchStringModeOnInputByString {
	Begin;
	Начало;
	AnyPart;
	ЛюбаяЧасть;
}
declare type ПеречислениеСпособПоискаСтрокиПриВводеПоСтроке = EnumSearchStringModeOnInputByString;
interface EnumFullTextSearchOnInputByString {
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеПолнотекстовыйПоискПриВводеПоСтроке = EnumFullTextSearchOnInputByString;
interface EnumChoiceDataGetModeOnInputByString {
	Directly;
	Непосредственно;
	Background;
	Фоновый;
}
declare type ПеречислениеРежимПолученияДанныхВыбораПриВводеПоСтроке = EnumChoiceDataGetModeOnInputByString;
interface EnumChoiceButtonRepresentation {
	Auto;
	Авто;
	ShowInDropList;
	ОтображатьВВыпадающемСписке;
	ShowInDropListAndInInputField;
	ОтображатьВВыпадающемСпискеИВПолеВвода;
	ShowInInputField;
	ОтображатьВПолеВвода;
}
declare type ПеречислениеОтображениеКнопкиВыбора = EnumChoiceButtonRepresentation;
interface EnumSearchStringLocation {
	Auto;
	Авто;
	None;
	Нет;
	CommandBar;
	КоманднаяПанель;
	Top;
	Верх;
	Bottom;
	Низ;
	FormCaption;
	ЗаголовокФормы;
	PullFromTop;
	ПотянутьСверху;
}
declare type ПеречислениеПоложениеСтрокиПоиска = EnumSearchStringLocation;
interface EnumViewStatusLocation {
	Auto;
	Авто;
	None;
	Нет;
	Top;
	Верх;
	Bottom;
	Низ;
}
declare type ПеречислениеПоложениеСостоянияПросмотра = EnumViewStatusLocation;
interface EnumSearchControlLocation {
	Auto;
	Авто;
	None;
	Нет;
	CommandBar;
	КоманднаяПанель;
}
declare type ПеречислениеПоложениеУправленияПоиском = EnumSearchControlLocation;
interface EnumFormButtonPictureLocation {
	Auto;
	Авто;
	Left;
	Лево;
	Right;
	Право;
}
declare type ПеречислениеПоложениеКартинкиКнопкиФормы = EnumFormButtonPictureLocation;
interface EnumFormConversationsRepresentation {
	Auto;
	Авто;
	Show;
	Отображать;
	DontShow;
	НеОтображать;
}
declare type ПеречислениеОтображениеОбсужденийФормы = EnumFormConversationsRepresentation;
declare var FormItemTitleLocation: EnumFormItemTitleLocation;
declare var ПоложениеЗаголовкаЭлементаФормы: EnumFormItemTitleLocation;
declare var FormItemCommandBarLabelLocation: EnumFormItemCommandBarLabelLocation;
declare var ПоложениеКоманднойПанелиЭлементаФормы: EnumFormItemCommandBarLabelLocation;
declare var FormCommandBarLabelLocation: EnumFormCommandBarLabelLocation;
declare var ПоложениеКоманднойПанелиФормы: EnumFormCommandBarLabelLocation;
declare var IncompleteChoiceMode: EnumIncompleteChoiceMode;
declare var РежимВыбораНезаполненного: EnumIncompleteChoiceMode;
declare var SelectionShowMode: EnumSelectionShowMode;
declare var РежимОтображенияВыделения: EnumSelectionShowMode;
declare var ItemHorizontalLocation: EnumItemHorizontalLocation;
declare var ГоризонтальноеПоложениеЭлемента: EnumItemHorizontalLocation;
declare var ItemVerticalAlign: EnumItemVerticalAlign;
declare var ВертикальноеПоложениеЭлемента: EnumItemVerticalAlign;
declare var ColumnsGroup: EnumColumnsGroup;
declare var ГруппировкаКолонок: EnumColumnsGroup;
declare var ChildFormItemsGroup: EnumChildFormItemsGroup;
declare var ГруппировкаПодчиненныхЭлементовФормы: EnumChildFormItemsGroup;
declare var ItemsAndTitlesAlignVariant: EnumItemsAndTitlesAlignVariant;
declare var ВариантВыравниванияЭлементовИЗаголовков: EnumItemsAndTitlesAlignVariant;
declare var FormItemSpacing: EnumFormItemSpacing;
declare var ИнтервалМеждуЭлементамиФормы: EnumFormItemSpacing;
declare var FixingInTable: EnumFixingInTable;
declare var ФиксацияВТаблице: EnumFixingInTable;
declare var TableHeightControlVariant: EnumTableHeightControlVariant;
declare var ВариантУправленияВысотойТаблицы: EnumTableHeightControlVariant;
declare var ChildFormItemsWidth: EnumChildFormItemsWidth;
declare var ШиринаПодчиненныхЭлементовФормы: EnumChildFormItemsWidth;
declare var UsualGroupRepresentation: EnumUsualGroupRepresentation;
declare var ОтображениеОбычнойГруппы: EnumUsualGroupRepresentation;
declare var UsualGroupBehavior: EnumUsualGroupBehavior;
declare var ПоведениеОбычнойГруппы: EnumUsualGroupBehavior;
declare var UsualGroupControlRepresentation: EnumUsualGroupControlRepresentation;
declare var ОтображениеУправленияОбычнойГруппы: EnumUsualGroupControlRepresentation;
declare var ThroughAlign: EnumThroughAlign;
declare var СквозноеВыравнивание: EnumThroughAlign;
declare var FormButtonType: EnumFormButtonType;
declare var ВидКнопкиФормы: EnumFormButtonType;
declare var CheckBoxType: EnumCheckBoxType;
declare var ВидФлажка: EnumCheckBoxType;
declare var RadioButtonType: EnumRadioButtonType;
declare var ВидПереключателя: EnumRadioButtonType;
declare var FormFieldType: EnumFormFieldType;
declare var ВидПоляФормы: EnumFormFieldType;
declare var FormDecorationType: EnumFormDecorationType;
declare var ВидДекорацииФормы: EnumFormDecorationType;
declare var FormGroupType: EnumFormGroupType;
declare var ВидГруппыФормы: EnumFormGroupType;
declare var TableRepresentation: EnumTableRepresentation;
declare var ОтображениеТаблицы: EnumTableRepresentation;
declare var TableRowInputMode: EnumTableRowInputMode;
declare var РежимВводаСтрокТаблицы: EnumTableRowInputMode;
declare var TableSelectionMode: EnumTableSelectionMode;
declare var РежимВыделенияТаблицы: EnumTableSelectionMode;
declare var TableRowSelectionMode: EnumTableRowSelectionMode;
declare var РежимВыделенияСтрокиТаблицы: EnumTableRowSelectionMode;
declare var ScrollBarUse: EnumScrollBarUse;
declare var ИспользованиеПолосыПрокрутки: EnumScrollBarUse;
declare var SearchInTableOnInput: EnumSearchInTableOnInput;
declare var ПоискВТаблицеПриВводе: EnumSearchInTableOnInput;
declare var ToolTipRepresentation: EnumToolTipRepresentation;
declare var ОтображениеПодсказки: EnumToolTipRepresentation;
declare var InitialListView: EnumInitialListView;
declare var НачальноеОтображениеСписка: EnumInitialListView;
declare var InitialTreeView: EnumInitialTreeView;
declare var НачальноеОтображениеДерева: EnumInitialTreeView;
declare var FoldersAndItems: EnumFoldersAndItems;
declare var ГруппыИЭлементы: EnumFoldersAndItems;
declare var EnterKeyBehaviorType: EnumEnterKeyBehaviorType;
declare var ТипПоведенияКлавишиEnter: EnumEnterKeyBehaviorType;
declare var ColumnEditMode: EnumColumnEditMode;
declare var РежимРедактированияКолонки: EnumColumnEditMode;
declare var UserWorkHistory: UserWorkHistoryManager;
declare var ИсторияРаботыПользователя: UserWorkHistoryManager;
declare var ReportFormType: EnumReportFormType;
declare var ТипФормыОтчета: EnumReportFormType;
declare var ViewScalingMode: EnumViewScalingMode;
declare var РежимМасштабированияПросмотра: EnumViewScalingMode;
declare var DateSelectionMode: EnumDateSelectionMode;
declare var РежимВыделенияДаты: EnumDateSelectionMode;
declare var FormItemOrientation: EnumFormItemOrientation;
declare var ОриентацияЭлементаФормы: EnumFormItemOrientation;
declare var ProgressBarSmoothingMode: EnumProgressBarSmoothingMode;
declare var РежимСглаживанияИндикатора: EnumProgressBarSmoothingMode;
declare var TrackBarMarkingAppearance: EnumTrackBarMarkingAppearance;
declare var ОтображениеРазметкиПолосыРегулирования: EnumTrackBarMarkingAppearance;
declare var URLPresentation;
declare var ПредставлениеНавигационнойСсылки;
declare var FormPagesRepresentation: EnumFormPagesRepresentation;
declare var ОтображениеСтраницФормы: EnumFormPagesRepresentation;
declare var WarningOnEditRepresentation: EnumWarningOnEditRepresentation;
declare var ОтображениеПредупрежденияПриРедактировании: EnumWarningOnEditRepresentation;
declare var VerticalFormScroll: EnumVerticalFormScroll;
declare var ВертикальнаяПрокруткаФормы: EnumVerticalFormScroll;
declare var FormItemAdditionType: EnumFormItemAdditionType;
declare var ВидДополненияЭлементаФормы: EnumFormItemAdditionType;
declare var DataChangeType: EnumDataChangeType;
declare var ВидИзмененияДанных: EnumDataChangeType;
declare var SaveFormDataInSettings: EnumSaveFormDataInSettings;
declare var СохранениеДанныхФормыВНастройках: EnumSaveFormDataInSettings;
declare var AutoSaveFormDataInSettings: EnumAutoSaveFormDataInSettings;
declare var АвтоматическоеСохранениеДанныхФормыВНастройках: EnumAutoSaveFormDataInSettings;
declare var FormWindowOpeningMode: EnumFormWindowOpeningMode;
declare var РежимОткрытияОкнаФормы: EnumFormWindowOpeningMode;
declare var ClientRunMode: EnumClientRunMode;
declare var РежимЗапускаКлиентскогоПриложения: EnumClientRunMode;
declare var CommandGroupCategory: EnumCommandGroupCategory;
declare var КатегорияГруппыКоманд: EnumCommandGroupCategory;
declare var CommandParameterUseMode: EnumCommandParameterUseMode;
declare var РежимИспользованияПараметраКоманды: EnumCommandParameterUseMode;
declare var AdditionalShowMode: EnumAdditionalShowMode;
declare var ДополнительныйРежимОтображения: EnumAdditionalShowMode;
declare var EditTextUpdate: EnumEditTextUpdate;
declare var ОбновлениеТекстаРедактирования: EnumEditTextUpdate;
declare var ApplicationFormsOpenningMode: EnumApplicationFormsOpenningMode;
declare var РежимОткрытияФормПриложения: EnumApplicationFormsOpenningMode;
declare var SectionsPanelRepresentation: EnumSectionsPanelRepresentation;
declare var ОтображениеПанелиРазделов: EnumSectionsPanelRepresentation;
declare var ChoiceHistoryOnInput: EnumChoiceHistoryOnInput;
declare var ИсторияВыбораПриВводе: EnumChoiceHistoryOnInput;
declare var ButtonGroupRepresentation: EnumButtonGroupRepresentation;
declare var ОтображениеГруппыКнопок: EnumButtonGroupRepresentation;
declare var ButtonShape: EnumButtonShape;
declare var ФигураКнопки: EnumButtonShape;
declare var ButtonShapeRepresentation: EnumButtonShapeRepresentation;
declare var ОтображениеФигурыКнопки: EnumButtonShapeRepresentation;
declare var ButtonRepresentation: EnumButtonRepresentation;
declare var ОтображениеКнопки: EnumButtonRepresentation;
declare var SearchStringModeOnInputByString: EnumSearchStringModeOnInputByString;
declare var СпособПоискаСтрокиПриВводеПоСтроке: EnumSearchStringModeOnInputByString;
declare var FullTextSearchOnInputByString: EnumFullTextSearchOnInputByString;
declare var ПолнотекстовыйПоискПриВводеПоСтроке: EnumFullTextSearchOnInputByString;
declare var ChoiceDataGetModeOnInputByString: EnumChoiceDataGetModeOnInputByString;
declare var РежимПолученияДанныхВыбораПриВводеПоСтроке: EnumChoiceDataGetModeOnInputByString;
declare var ChoiceButtonRepresentation: EnumChoiceButtonRepresentation;
declare var ОтображениеКнопкиВыбора: EnumChoiceButtonRepresentation;
declare var SearchStringLocation: EnumSearchStringLocation;
declare var ПоложениеСтрокиПоиска: EnumSearchStringLocation;
declare var ViewStatusLocation: EnumViewStatusLocation;
declare var ПоложениеСостоянияПросмотра: EnumViewStatusLocation;
declare var SearchControlLocation: EnumSearchControlLocation;
declare var ПоложениеУправленияПоиском: EnumSearchControlLocation;
declare var FormButtonPictureLocation: EnumFormButtonPictureLocation;
declare var ПоложениеКартинкиКнопкиФормы: EnumFormButtonPictureLocation;
declare var FormConversationsRepresentation: EnumFormConversationsRepresentation;
declare var ОтображениеОбсужденийФормы: EnumFormConversationsRepresentation;
declare function CopyFormData(... params): boolean;
declare function КопироватьДанныеФормы(... params): boolean;
declare function IsTempStorageURL(... params): boolean;
declare function ЭтоАдресВременногоХранилища(... params): boolean;
declare function GetInfoBaseURL(): string;
declare function ПолучитьНавигационнуюСсылкуИнформационнойБазы(): string;
declare function GetClientDisplaysInformation(): FixedArray;
declare function ПолучитьИнформациюЭкрановКлиента(): FixedArray;
declare function GetAllFilesMask();
declare function ПолучитьМаскуВсеФайлы();
declare function GetPathSeparator();
declare function ПолучитьРазделительПути();
interface EnumWindowOpenVariant {
	SingleWindow;
	ОтдельноеОкно;
}
declare type ПеречислениеВариантОткрытияОкна = EnumWindowOpenVariant;
interface MainClientApplicationWindowMode {
}
interface ClientApplicationBaseFontVariant {
}
interface ClientApplicationInterfaceVariant {
}
interface ClientApplication {
	SetMainWindowMode(... params): void;
	УстановитьРежимОсновногоОкна(... params): void;
	GetMainWindowMode(): MainClientApplicationWindowMode;
	ПолучитьРежимОсновногоОкна(): MainClientApplicationWindowMode;
	SetShortCaption(... params): void;
	УстановитьКраткийЗаголовок(... params): void;
	GetShortCaption(): string;
	ПолучитьКраткийЗаголовок(): string;
	SetCaption(... params): void;
	УстановитьЗаголовок(... params): void;
	GetCaption(): string;
	ПолучитьЗаголовок(): string;
	CurrentBaseFontVariant(): ClientApplicationBaseFontVariant;
	ТекущийВариантОсновногоШрифта(): ClientApplicationBaseFontVariant;
	CurrentInterfaceVariant(): ClientApplicationInterfaceVariant;
	ТекущийВариантИнтерфейса(): ClientApplicationInterfaceVariant;
}
interface ClientApplicationWindow {
	Caption: string;
	Заголовок: string;
	IsMain: boolean;
	Основное: boolean;
	HomePage: boolean;
	НачальнаяСтраница: boolean;
	Content: FixedArray;
	Содержимое: FixedArray;
	GetContent();
	ПолучитьСодержимое();
	GetURL(): string;
	ПолучитьНавигационнуюСсылку(): string;
	Activate(): void;
	Активизировать(): void;
}
declare type ОкноКлиентскогоПриложения = ClientApplicationWindow;
interface ClientApplicationWindows {
	Count(): number;
	Количество(): number;
	Get(... params): ClientApplicationWindow;
	Получить(... params): ClientApplicationWindow;
}
declare type ОкнаКлиентскогоПриложения = ClientApplicationWindows;
declare var WindowOpenVariant: EnumWindowOpenVariant;
declare var ВариантОткрытияОкна: EnumWindowOpenVariant;
declare var ClientApplication: ClientApplication;
declare var КлиентскоеПриложение: ClientApplication;
declare function GetApplicationCaption();
declare function ПолучитьЗаголовокПриложения();
declare function SetApplicationCaption(... params): void;
declare function УстановитьЗаголовокПриложения(... params): void;
declare function ShowUserNotification(... params): void;
declare function ПоказатьОповещениеПользователя(... params): void;
declare function GetFile(... params);
declare function ПолучитьФайл(... params);
declare function PutFile(... params);
declare function ПоместитьФайл(... params);
declare function BeginPutFile(... params): void;
declare function НачатьПомещениеФайла(... params): void;
declare function GetInterfaceFunctionalOption(... params);
declare function ПолучитьФункциональнуюОпциюИнтерфейса(... params);
declare function SetInterfaceFunctionalOptionParameters(... params): void;
declare function УстановитьПараметрыФункциональныхОпцийИнтерфейса(... params): void;
declare function GetInterfaceFunctionalOptionParameters();
declare function ПолучитьПараметрыФункциональныхОпцийИнтерфейса();
declare function RefreshInterface(): void;
declare function ОбновитьИнтерфейс(): void;
declare function GetWindows(): ClientApplicationWindows;
declare function ПолучитьОкна(): ClientApplicationWindows;
declare function SetShortApplicationCaption(... params): void;
declare function УстановитьКраткийЗаголовокПриложения(... params): void;
declare function GetShortApplicationCaption();
declare function ПолучитьКраткийЗаголовокПриложения();
declare function ActiveWindow(): ClientApplicationWindow;
declare function АктивноеОкно(): ClientApplicationWindow;
declare function GotoURL(... params): void;
declare function ПерейтиПоНавигационнойСсылке(... params): void;
declare function FindWindowByURL(... params): ClientApplicationWindow;
declare function НайтиОкноПоНавигационнойСсылке(... params): ClientApplicationWindow;
declare function ExecuteNotifyProcessing(... params): void;
declare function ВыполнитьОбработкуОповещения(... params): void;
declare function System(... params): void;
declare function КомандаСистемы(... params): void;
declare function NotifyChanged(... params): void;
declare function ОповеститьОбИзменении(... params): void;
declare function AttachFileSystemExtension();
declare function ПодключитьРасширениеРаботыСФайлами();
declare function BeginAttachingFileSystemExtension(... params): void;
declare function НачатьПодключениеРасширенияРаботыСФайлами(... params): void;
declare function InstallFileSystemExtension(): void;
declare function УстановитьРасширениеРаботыСФайлами(): void;
declare function BeginInstallFileSystemExtension(... params): void;
declare function НачатьУстановкуРасширенияРаботыСФайлами(... params): void;
declare function GetFiles(... params);
declare function ПолучитьФайлы(... params);
declare function PutFiles(... params);
declare function ПоместитьФайлы(... params);
declare function BeginGettingFiles(... params): void;
declare function НачатьПолучениеФайлов(... params): void;
declare function BeginPuttingFiles(... params): void;
declare function НачатьПомещениеФайлов(... params): void;
declare function InstallAddIn(... params): void;
declare function УстановитьВнешнююКомпоненту(... params): void;
declare function BeginInstallAddIn(... params): void;
declare function НачатьУстановкуВнешнейКомпоненты(... params): void;
declare function RequestUserPermission(... params);
declare function ЗапроситьРазрешениеПользователя(... params);
declare function BeginRequestingUserPermission(... params): void;
declare function НачатьЗапросРазрешенияПользователя(... params): void;
declare function GetClientApplicationCaption();
declare function ПолучитьЗаголовокКлиентскогоПриложения();
declare function SetClientApplicationCaption(... params): void;
declare function УстановитьЗаголовокКлиентскогоПриложения(... params): void;
declare var ClientApplication: ClientApplication;
declare var КлиентскоеПриложение: ClientApplication;
declare function ValueToFormData(... params): void;
declare function ЗначениеВДанныеФормы(... params): void;
declare function FormDataToValue(... params);
declare function ДанныеФормыВЗначение(... params);
declare function GetFunctionalOption(... params);
declare function ПолучитьФункциональнуюОпцию(... params);
declare function PutToTempStorage(... params);
declare function ПоместитьВоВременноеХранилище(... params);
declare function GetFromTempStorage(... params);
declare function ПолучитьИзВременногоХранилища(... params);
declare function DeleteFromTempStorage(... params): void;
declare function УдалитьИзВременногоХранилища(... params): void;
declare function PredefinedValue(... params);
declare function ПредопределенноеЗначение(... params);
declare function GetPredefinedValueFullName(... params);
declare function ПолучитьПолноеИмяПредопределенногоЗначения(... params);
declare function GetURL(... params);
declare function ПолучитьНавигационнуюСсылку(... params);
declare function GetChoiceData(... params);
declare function ПолучитьДанныеВыбора(... params);
declare function GetClientConnectionSpeed();
declare function ПолучитьСкоростьКлиентскогоСоединения();
declare function GetClientAllFilesMask();
declare function ПолучитьМаскуВсеФайлыКлиента();
declare function GetClientPathSeparator();
declare function ПолучитьРазделительПутиКлиента();
declare function SetObjectAndFormAttributeConformity(... params): void;
declare function УстановитьСоответствиеОбъектаИРеквизитаФормы(... params): void;
declare function GetObjectAndFormAttributeConformity(... params): string;
declare function ПолучитьСоответствиеОбъектаИРеквизитаФормы(... params): string;
declare function SetObjectAndFormConformity(... params): void;
declare function УстановитьСоответствиеОбъектаИФормы(... params): void;
declare function GetObjectAndFormConformity(... params);
declare function ПолучитьСоответствиеОбъектаИФормы(... params);
declare function GetURLsPresentations(... params);
declare function ПолучитьПредставленияНавигационныхСсылок(... params);
declare function ConnectExternalDataSource(... params): void;
declare function УстановитьСоединениеСВнешнимИсточникомДанных(... params): void;
declare function DisconnectExternalDataSource(... params): void;
declare function РазорватьСоединениеСВнешнимИсточникомДанных(... params): void;
interface PictureLib {
}
interface EnumEventLogLevel {
	Note;
	Примечание;
	Information;
	Информация;
	Warning;
	Предупреждение;
	Error;
	Ошибка;
}
declare type ПеречислениеУровеньЖурналаРегистрации = EnumEventLogLevel;
interface EnumEventLogEntryTransactionMode {
	Transactional;
	Транзакционная;
	Independent;
	Независимая;
}
declare type ПеречислениеРежимТранзакцииЗаписиЖурналаРегистрации = EnumEventLogEntryTransactionMode;
interface EnumEventLogEntryTransactionStatus {
	Unfinished;
	НеЗавершена;
	Committed;
	Зафиксирована;
	RolledBack;
	Отменена;
	NotApplicable;
	НетТранзакции;
}
declare type ПеречислениеСтатусТранзакцииЗаписиЖурналаРегистрации = EnumEventLogEntryTransactionStatus;
interface EnumAutoChangeRecord {
	Deny;
	Запретить;
	Allow;
	Разрешить;
}
declare type ПеречислениеАвтоРегистрацияИзменений = EnumAutoChangeRecord;
interface EnumAllowedMessageNo {
	Any;
	Любой;
	Next;
	Очередной;
	Greater;
	Больший;
}
declare type ПеречислениеДопустимыйНомерСообщения = EnumAllowedMessageNo;
interface UUID {
}
declare type УникальныйИдентификатор = UUID;
interface UserRoles {
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Contains(... params): boolean;
	Содержит(... params): boolean;
}
interface MetadataObject {
	Parent();
	Родитель();
	Presentation();
	Представление();
	FullName();
	ПолноеИмя();
	ConfigurationExtension();
	РасширениеКонфигурации();
	ChangedByConfigurationExtensions();
	ЕстьИзмененияРасширениямиКонфигурации();
	GetPredefinedNames();
	ПолучитьИменаПредопределенных();
}
interface ClientRunMode {
}
interface UnsafeOperationProtectionDescription {
	UnsafeOperationWarnings: boolean;
	ПредупреждатьОбОпасныхДействиях: boolean;
}
declare type ОписаниеЗащитыОтОпасныхДействий = UnsafeOperationProtectionDescription;
interface InfoBaseUser {
	UUID: UUID;
	УникальныйИдентификатор: UUID;
	Name: string;
	Имя: string;
	FullName: string;
	ПолноеИмя: string;
	StandardAuthentication: boolean;
	АутентификацияСтандартная: boolean;
	Password: string;
	Пароль: string;
	ShowInList: boolean;
	ПоказыватьВСпискеВыбора: boolean;
	OSAuthentication: boolean;
	АутентификацияОС: boolean;
	OSUser: string;
	ПользовательОС: string;
	Roles: UserRoles;
	Роли: UserRoles;
	DefaultInterface: MetadataObject;
	ОсновнойИнтерфейс: MetadataObject;
	Language: MetadataObject;
	Язык: MetadataObject;
	PasswordIsSet: boolean;
	ПарольУстановлен: boolean;
	CannotChangePassword;
	ЗапрещеноИзменятьПароль;
	RunMode: ClientRunMode;
	РежимЗапуска: ClientRunMode;
	StoredPasswordValue: string;
	СохраняемоеЗначениеПароля: string;
	DataSeparation;
	РазделениеДанных;
	OpenIDAuthentication: boolean;
	АутентификацияOpenID: boolean;
	UnsafeOperationProtection: UnsafeOperationProtectionDescription;
	ЗащитаОтОпасныхДействий: UnsafeOperationProtectionDescription;
	Write(): void;
	Записать(): void;
	Delete(): void;
	Удалить(): void;
}
interface InfoBaseUsersManager {
	CreateUser(): InfoBaseUser;
	СоздатьПользователя(): InfoBaseUser;
	GetUsers(): ArrayV8;
	ПолучитьПользователей(): ArrayV8;
	FindByName(... params): InfoBaseUser;
	НайтиПоИмени(... params): InfoBaseUser;
	FindByUUID(... params): InfoBaseUser;
	НайтиПоУникальномуИдентификатору(... params): InfoBaseUser;
	CurrentUser(): InfoBaseUser;
	ТекущийПользователь(): InfoBaseUser;
}
interface EnumDataItemSend {
	Auto;
	Авто;
	Delete;
	Удалить;
	Ignore;
	Игнорировать;
}
declare type ПеречислениеОтправкаЭлементаДанных = EnumDataItemSend;
interface EnumDataItemReceive {
	Auto;
	Авто;
	Accept;
	Принять;
	Ignore;
	Игнорировать;
}
declare type ПеречислениеПолучениеЭлементаДанных = EnumDataItemReceive;
interface StyleColors {
}
interface StyleFonts {
}
interface StyleBorders {
}
interface EnumFullTextSearchMode {
	Disable;
	Запретить;
	Enable;
	Разрешить;
}
declare type ПеречислениеРежимПолнотекстовогоПоиска = EnumFullTextSearchMode;
interface FullTextSearchMode {
}
interface FullTextSearchMetadataUse {
}
interface FullTextSearchList {
	SearchString: string;
	СтрокаПоиска: string;
	GetDescription: boolean;
	ПолучатьОписание: boolean;
	PortionSize: number;
	РазмерПорции: number;
	SearchArea;
	ОбластьПоиска;
	FuzzinessThreshold: number;
	ПорогНечеткости: number;
	MetadataUse: FullTextSearchMetadataUse;
	ИспользованиеМетаданных: FullTextSearchMetadataUse;
	StartPosition();
	НачальнаяПозиция();
	TooManyResults();
	СлишкомМногоРезультатов();
	FirstPart(): void;
	ПерваяЧасть(): void;
	NextPart(... params): void;
	СледующаяЧасть(... params): void;
	PreviousPart(... params): void;
	ПредыдущаяЧасть(... params): void;
	TotalCount();
	ПолноеКоличество();
	Count();
	Количество();
	Get(... params);
	Получить(... params);
	GetRepresentation(... params);
	ПолучитьОтображение(... params);
}
interface FullTextSearchManager {
	GetFullTextSearchMode(): FullTextSearchMode;
	ПолучитьРежимПолнотекстовогоПоиска(): FullTextSearchMode;
	SetFullTextSearchMode(... params): void;
	УстановитьРежимПолнотекстовогоПоиска(... params): void;
	UpdateIndex(... params): void;
	ОбновитьИндекс(... params): void;
	ClearIndex(): void;
	ОчиститьИндекс(): void;
	CheckIndex();
	ПроверитьИндекс();
	CreateList(... params): FullTextSearchList;
	СоздатьСписок(... params): FullTextSearchList;
	IndexUpdateComplete(): boolean;
	ОбновлениеИндексаЗавершено(): boolean;
	UpdateDate(): Date;
	ДатаАктуальности(): Date;
	IndexTrue(): boolean;
	ИндексАктуален(): boolean;
	GetMaxIndexedDataSize(): number;
	ПолучитьМаксимальныйРазмерИндексируемыхДанных(): number;
	SetMaxIndexedDataSize(... params): void;
	УстановитьМаксимальныйРазмерИндексируемыхДанных(... params): void;
}
interface EnumFullTextSearchRepresentationType {
	HTMLText;
	HTMLТекст;
	XML;
}
declare type ПеречислениеВидОтображенияПолнотекстовогоПоиска = EnumFullTextSearchRepresentationType;
interface EnumFullTextSearchMetadataUse {
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеИспользованиеМетаданныхПолнотекстовогоПоиска = EnumFullTextSearchMetadataUse;
interface EnumBackgroundJobState {
	Active;
	Активно;
	Completed;
	Завершено;
	Failed;
	ЗавершеноАварийно;
	Canceled;
	Отменено;
}
declare type ПеречислениеСостояниеФоновогоЗадания = EnumBackgroundJobState;
interface JobSchedule {
	BeginDate: Date;
	ДатаНачала: Date;
	EndDate: Date;
	ДатаКонца: Date;
	BeginTime: Date;
	ВремяНачала: Date;
	EndTime: Date;
	ВремяКонца: Date;
	CompletionTime: Date;
	ВремяЗавершения: Date;
	CompletionInterval: number;
	ИнтервалЗавершения: number;
	RepeatPeriodInDay: number;
	ПериодПовтораВТечениеДня: number;
	RepeatPause: number;
	ПаузаПовтора: number;
	WeekDays: ArrayV8;
	ДниНедели: ArrayV8;
	WeekDayInMonth: number;
	ДеньНеделиВМесяце: number;
	DayInMonth: number;
	ДеньВМесяце: number;
	Months: ArrayV8;
	Месяцы: ArrayV8;
	WeeksPeriod: number;
	ПериодНедель: number;
	DaysRepeatPeriod: number;
	ПериодПовтораДней: number;
	DetailedDailySchedules: ArrayV8;
	ДетальныеРасписанияДня: ArrayV8;
	ExecutionRequired(... params): boolean;
	ТребуетсяВыполнение(... params): boolean;
}
declare type РасписаниеРегламентногоЗадания = JobSchedule;
interface Structure {
	Count(): number;
	Количество(): number;
	Insert(... params): void;
	Вставить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Property(... params): boolean;
	Свойство(... params): boolean;
}
declare type Структура = Structure;
interface ScheduledJob {
	UUID: UUID;
	УникальныйИдентификатор: UUID;
	Description: string;
	Наименование: string;
	Key: string;
	Ключ: string;
	Metadata: MetadataObject;
	Метаданные: MetadataObject;
	Predefined: boolean;
	Предопределенное: boolean;
	Parameters: ArrayV8;
	Параметры: ArrayV8;
	UserName: string;
	ИмяПользователя: string;
	Schedule: JobSchedule;
	Расписание: JobSchedule;
	Use: boolean;
	Использование: boolean;
	RestartCountOnFailure: number;
	КоличествоПовторовПриАварийномЗавершении: number;
	RestartIntervalOnFailure: number;
	ИнтервалПовтораПриАварийномЗавершении: number;
	LastJob: BackgroundJob;
	ПоследнееЗадание: BackgroundJob;
	DataSeparation: Structure;
	РазделениеДанных: Structure;
	Write(): void;
	Записать(): void;
	Delete(): void;
	Удалить(): void;
}
interface BackgroundJobState {
}
interface ErrorInfo {
	Description;
	Описание;
	ModuleName;
	ИмяМодуля;
	LineNumber;
	НомерСтроки;
	SourceLine;
	ИсходнаяСтрока;
	Cause;
	Причина;
}
interface BackgroundJob {
	UUID: UUID;
	УникальныйИдентификатор: UUID;
	Description: string;
	Наименование: string;
	Key: string;
	Ключ: string;
	ScheduledJob: ScheduledJob;
	РегламентноеЗадание: ScheduledJob;
	MethodName: string;
	ИмяМетода: string;
	State: BackgroundJobState;
	Состояние: BackgroundJobState;
	Location: string;
	Расположение: string;
	Begin: Date;
	Начало: Date;
	End: Date;
	Конец: Date;
	ErrorInfo: ErrorInfo;
	ИнформацияОбОшибке: ErrorInfo;
	DataSeparation: Structure;
	РазделениеДанных: Structure;
	Cancel(): void;
	Отменить(): void;
	WaitForCompletion(... params): void;
	ОжидатьЗавершения(... params): void;
	GetUserMessages(... params): FixedArray;
	ПолучитьСообщенияПользователю(... params): FixedArray;
}
interface BackgroundJobsManager {
	FindByUUID(... params): BackgroundJob;
	НайтиПоУникальномуИдентификатору(... params): BackgroundJob;
	GetBackgroundJobs(... params): ArrayV8;
	ПолучитьФоновыеЗадания(... params): ArrayV8;
	Execute(... params): BackgroundJob;
	Выполнить(... params): BackgroundJob;
	WaitForCompletion(... params): void;
	ОжидатьЗавершения(... params): void;
}
interface ScheduledJobsManager {
	FindByUUID(... params): ScheduledJob;
	НайтиПоУникальномуИдентификатору(... params): ScheduledJob;
	FindPredefined(... params): ScheduledJob;
	НайтиПредопределенное(... params): ScheduledJob;
	GetScheduledJobs(... params): ArrayV8;
	ПолучитьРегламентныеЗадания(... params): ArrayV8;
	CreateScheduledJob(... params): ScheduledJob;
	СоздатьРегламентноеЗадание(... params): ScheduledJob;
}
interface EnumAutonumerationInForm {
	Auto;
	Авто;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеАвтонумерацияВФорме = EnumAutonumerationInForm;
interface AllowedSign {
}
interface NumberQualifiers {
	Digits: number;
	Разрядность: number;
	FractionDigits: number;
	РазрядностьДробнойЧасти: number;
	AllowedSign: AllowedSign;
	ДопустимыйЗнак: AllowedSign;
}
declare type КвалификаторыЧисла = NumberQualifiers;
interface AllowedLength {
}
interface StringQualifiers {
	Length: number;
	Длина: number;
	AllowedLength: AllowedLength;
	ДопустимаяДлина: AllowedLength;
}
declare type КвалификаторыСтроки = StringQualifiers;
interface DateFractions {
}
interface DateQualifiers {
	DateFractions: DateFractions;
	ЧастиДаты: DateFractions;
}
declare type КвалификаторыДаты = DateQualifiers;
interface BinaryDataQualifiers {
	Length: number;
	Длина: number;
	AllowedLength: AllowedLength;
	ДопустимаяДлина: AllowedLength;
}
declare type КвалификаторыДвоичныхДанных = BinaryDataQualifiers;
interface TypeDescription {
	NumberQualifiers: NumberQualifiers;
	КвалификаторыЧисла: NumberQualifiers;
	StringQualifiers: StringQualifiers;
	КвалификаторыСтроки: StringQualifiers;
	DateQualifiers: DateQualifiers;
	КвалификаторыДаты: DateQualifiers;
	BinaryDataQualifiers: BinaryDataQualifiers;
	КвалификаторыДвоичныхДанных: BinaryDataQualifiers;
	Types(): ArrayV8;
	Типы(): ArrayV8;
	ContainsType(... params): boolean;
	СодержитТип(... params): boolean;
	AdjustValue(... params);
	ПривестиЗначение(... params);
}
declare type ОписаниеТипов = TypeDescription;
interface FormattedString {
}
declare type ФорматированнаяСтрока = FormattedString;
interface PictureType {
}
interface Picture {
	Type: PictureType;
	Вид: PictureType;
	VariantSet;
	НаборВариантов;
	Write(... params): void;
	Записать(... params): void;
	FileNameFilter(... params): string;
	ФильтрИменФайлов(... params): string;
	Convert(... params): Picture;
	Преобразовать(... params): Picture;
	Format();
	Формат();
	GetBinaryData(... params);
	ПолучитьДвоичныеДанные(... params);
}
declare type Картинка = Picture;
interface ValueListItem {
	Value;
	Значение;
	Presentation: FormattedString | string;
	Представление: FormattedString | string;
	Check: boolean;
	Пометка: boolean;
	Picture: Picture;
	Картинка: Picture;
	GetID(): number;
	ПолучитьИдентификатор(): number;
}
interface ValueList {
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	AvailableValues: ValueList;
	ДоступныеЗначения: ValueList;
	FindByValue(... params): ValueListItem;
	НайтиПоЗначению(... params): ValueListItem;
	FindByID(... params): ValueListItem;
	НайтиПоИдентификатору(... params): ValueListItem;
	SortByValue(... params): void;
	СортироватьПоЗначению(... params): void;
	SortByPresentation(... params): void;
	СортироватьПоПредставлению(... params): void;
	ChooseItem(... params): ValueListItem;
	ВыбратьЭлемент(... params): ValueListItem;
	ShowChooseItem(... params): void;
	ПоказатьВыборЭлемента(... params): void;
	CheckItems(... params): boolean;
	ОтметитьЭлементы(... params): boolean;
	ShowCheckItems(... params): void;
	ПоказатьОтметкуЭлементов(... params): void;
	UnloadValues(): ArrayV8;
	ВыгрузитьЗначения(): ArrayV8;
	LoadValues(... params): void;
	ЗагрузитьЗначения(... params): void;
	Copy(): ValueList;
	Скопировать(): ValueList;
	Count(): number;
	Количество(): number;
	Add(... params): ValueListItem;
	Добавить(... params): ValueListItem;
	Insert(... params): ValueListItem;
	Вставить(... params): ValueListItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): ValueListItem;
	Получить(... params): ValueListItem;
	FillChecks(... params): void;
	ЗаполнитьПометки(... params): void;
}
declare type СписокЗначений = ValueList;
interface SettingsDescription {
	ObjectKey;
	КлючОбъекта;
	SettingsKey;
	КлючНастроек;
	User: string;
	Пользователь: string;
	Presentation: string;
	Представление: string;
	AdditionalProperties: Structure;
	ДополнительныеСвойства: Structure;
}
declare type ОписаниеНастроек = SettingsDescription;
interface StandardSettingsStorageSelection {
	ObjectKey;
	КлючОбъекта;
	SettingsKey;
	КлючНастроек;
	User;
	Пользователь;
	Presentation;
	Представление;
	Settings;
	Настройки;
	Next();
	Следующий();
}
interface StandardSettingsStorageManager {
	Load(... params);
	Загрузить(... params);
	Save(... params): void;
	Сохранить(... params): void;
	GetList(... params): ValueList;
	ПолучитьСписок(... params): ValueList;
	Delete(... params): void;
	Удалить(... params): void;
	GetDescription(... params): SettingsDescription;
	ПолучитьОписание(... params): SettingsDescription;
	SetDescription(... params): string;
	УстановитьОписание(... params): string;
	Select(... params): StandardSettingsStorageSelection;
	Выбрать(... params): StandardSettingsStorageSelection;
}
interface EnumStandardCommandsGroup {
	NavigationPanelImportant;
	ПанельНавигацииВажное;
	NavigationPanelOrdinary;
	ПанельНавигацииОбычное;
	NavigationPanelSeeAlso;
	ПанельНавигацииСмТакже;
	ActionsPanelCreate;
	ПанельДействийСоздать;
	ActionsPanelReports;
	ПанельДействийОтчеты;
	ActionsPanelTools;
	ПанельДействийСервис;
	FormNavigationPanelImportant;
	ПанельНавигацииФормыВажное;
	FormNavigationPanelGoTo;
	ПанельНавигацииФормыПерейти;
	FormNavigationPanelSeeAlso;
	ПанельНавигацииФормыСмТакже;
	FormCommandBarImportant;
	КоманднаяПанельФормыВажное;
	FormCommandBarCreateBasedOn;
	КоманднаяПанельФормыСоздатьНаОсновании;
}
declare type ПеречислениеСтандартнаяГруппаКоманд = EnumStandardCommandsGroup;
interface EnumDataBaseConfigurationUpdateExecutionInformationItemType {
	Information;
	Информация;
	Warning;
	Предупреждение;
	Error;
	Ошибка;
}
declare type ПеречислениеТипЭлементаИнформацииОВыполненииОбновленияКонфигурацииБазыДанных = EnumDataBaseConfigurationUpdateExecutionInformationItemType;
interface EnumDataBaseConfigurationUpdateState {
	NotActive;
	Неактивно;
	ProcessingInProgress;
	ВыполняетсяОбработка;
	RefreshInProgress;
	ВыполняетсяАктуализация;
}
declare type ПеречислениеСостояниеОбновленияКонфигурацииБазыДанных = EnumDataBaseConfigurationUpdateState;
interface Stream {
	CanRead: boolean;
	ДоступноЧтение: boolean;
	CanWrite: boolean;
	ДоступнаЗапись: boolean;
	CanSeek: boolean;
	ДоступноИзменениеПозиции: boolean;
	Close(): void;
	Закрыть(): void;
	Size(): number;
	Размер(): number;
	GetReadOnlyStream(): Stream;
	ПолучитьПотокТолькоДляЧтения(): Stream;
	CurrentPosition(): number;
	ТекущаяПозиция(): number;
	CopyTo(... params): void;
	КопироватьВ(... params): void;
	Flush(): void;
	СброситьБуферы(): void;
	Seek(... params): number;
	Перейти(... params): number;
	SetSize(... params): void;
	УстановитьРазмер(... params): void;
	Read(... params): number;
	Прочитать(... params): number;
	Write(... params): void;
	Записать(... params): void;
	BeginGetSize(... params): void;
	НачатьПолучениеРазмера(... params): void;
	BeginCopyTo(... params): void;
	НачатьКопированиеВ(... params): void;
	BeginSeek(... params): void;
	НачатьПереход(... params): void;
	BeginSetSize(... params): void;
	НачатьУстановкуРазмера(... params): void;
	BeginRead(... params): void;
	НачатьЧтение(... params): void;
	BeginWrite(... params): void;
	НачатьЗапись(... params): void;
	BeginFlush(... params): void;
	НачатьСбросБуферов(... params): void;
	BeginClose(... params): void;
	НачатьЗакрытие(... params): void;
}
interface BinaryData {
	Write(... params): void;
	Записать(... params): void;
	Size();
	Размер();
	OpenStreamForRead(): Stream;
	ОткрытьПотокДляЧтения(): Stream;
	BeginWrite(... params): void;
	НачатьЗапись(... params): void;
}
declare type ДвоичныеДанные = BinaryData;
interface ConfigurationExtension {
	UUID: UUID;
	УникальныйИдентификатор: UUID;
	Name: string;
	Имя: string;
	HashSum: string;
	ХешСумма: string;
	Version;
	Версия;
	SafeMode: boolean | string;
	БезопасныйРежим: boolean | string;
	Synonym;
	Синоним;
	UnsafeOperationProtection;
	ЗащитаОтОпасныхДействий;
	Purpose;
	Назначение;
	Write(... params): void;
	Записать(... params): void;
	Delete(): void;
	Удалить(): void;
	GetData(): BinaryData;
	ПолучитьДанные(): BinaryData;
	CheckCanApply(... params): ArrayV8;
	ПроверитьВозможностьПрименения(... params): ArrayV8;
}
interface ConfigurationExtensionsManager {
	Create(): ConfigurationExtension;
	Создать(): ConfigurationExtension;
	Get(... params): ArrayV8;
	Получить(... params): ArrayV8;
	ExecuteBackgroundJobWithDatabaseExtensions(... params): BackgroundJob;
	ВыполнитьФоновоеЗаданиеСРасширениямиБазыДанных(... params): BackgroundJob;
	CheckCanApplyAll(): ArrayV8;
	ПроверитьВозможностьПримененияВсех(): ArrayV8;
	GetSessionApplicationIssuesInformation(): ArrayV8;
	ПолучитьИнформациюОПроблемахПримененияВСеансе(): ArrayV8;
	ExecuteBackgroundJobWithoutExtensions(... params): BackgroundJob;
	ВыполнитьФоновоеЗаданиеБезРасширений(... params): BackgroundJob;
}
interface EnumConfigurationExtensionsSource {
	Database;
	БазаДанных;
	SessionApplied;
	СеансАктивные;
	SessionDisabled;
	СеансОтключенные;
}
declare type ПеречислениеИсточникРасширенийКонфигурации = EnumConfigurationExtensionsSource;
interface EnumConfigurationExtensionApplicationIssueSeverity {
	Critical;
	Критичная;
	Moderate;
	Обычная;
}
declare type ПеречислениеВажностьПроблемыПримененияРасширенияКонфигурации = EnumConfigurationExtensionApplicationIssueSeverity;
interface ValueTableColumn {
	Name: string;
	Имя: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Title: string;
	Заголовок: string;
	Width: number;
	Ширина: number;
}
interface ValueTableColumnCollection {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Insert(... params): ValueTableColumn;
	Вставить(... params): ValueTableColumn;
	Add(... params): ValueTableColumn;
	Добавить(... params): ValueTableColumn;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): ValueTableColumn;
	Найти(... params): ValueTableColumn;
	Get(... params): ValueTableColumn;
	Получить(... params): ValueTableColumn;
}
interface CollectionIndex {
}
interface CollectionIndexes {
	Count(): number;
	Количество(): number;
	Add(... params): CollectionIndex;
	Добавить(... params): CollectionIndex;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
}
interface ValueTableRow {
	Get(... params);
	Получить(... params);
	Set(... params): void;
	Установить(... params): void;
	Owner();
	Владелец();
}
interface ValueTable {
	Columns: ValueTableColumnCollection;
	Колонки: ValueTableColumnCollection;
	Indexes: CollectionIndexes;
	Индексы: CollectionIndexes;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(): ValueTableRow;
	Добавить(): ValueTableRow;
	Insert(... params): ValueTableRow;
	Вставить(... params): ValueTableRow;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Find(... params): ValueTableRow;
	Найти(... params): ValueTableRow;
	FindRows(... params): ArrayV8;
	НайтиСтроки(... params): ArrayV8;
	Total(... params): number;
	Итог(... params): number;
	Sort(... params): void;
	Сортировать(... params): void;
	LoadColumn(... params): void;
	ЗагрузитьКолонку(... params): void;
	UnloadColumn(... params): ArrayV8;
	ВыгрузитьКолонку(... params): ArrayV8;
	Get(... params): ValueTableRow;
	Получить(... params): ValueTableRow;
	Copy(... params): ValueTable;
	Скопировать(... params): ValueTable;
	CopyColumns(... params): ValueTable;
	СкопироватьКолонки(... params): ValueTable;
	GroupBy(... params): void;
	Свернуть(... params): void;
	FillValues(... params): void;
	ЗаполнитьЗначения(... params): void;
	ChooseRow(... params): ValueTableRow;
	ВыбратьСтроку(... params): ValueTableRow;
}
declare type ТаблицаЗначений = ValueTable;
interface AccessParameters {
	Accessibility: boolean;
	Доступность: boolean;
	RestrictionByCondition: boolean;
	ОграничениеУсловием: boolean;
}
interface InfoBaseSession {
	User: InfoBaseUser;
	Пользователь: InfoBaseUser;
	ApplicationName: string;
	ИмяПриложения: string;
	ComputerName: string;
	ИмяКомпьютера: string;
	SessionStarted: Date;
	НачалоСеанса: Date;
	ConnectionNumber: number;
	НомерСоединения: number;
	SessionNumber: number;
	НомерСеанса: number;
	GetBackgroundJob(): BackgroundJob;
	ПолучитьФоновоеЗадание(): BackgroundJob;
}
interface ConnectionsLock {
	Use: boolean;
	Установлена: boolean;
	Begin: Date;
	Начало: Date;
	End: Date;
	Конец: Date;
	Message: string;
	Сообщение: string;
	KeyCode: string;
	КодРазрешения: string;
	Parameter: string;
	Параметр: string;
}
declare type БлокировкаУстановкиСоединений = ConnectionsLock;
interface SessionsLock {
	Use: boolean;
	Установлена: boolean;
	Begin: Date;
	Начало: Date;
	End: Date;
	Конец: Date;
	Message: string;
	Сообщение: string;
	KeyCode: string;
	КодРазрешения: string;
	Parameter: string;
	Параметр: string;
}
declare type БлокировкаСеансов = SessionsLock;
interface ActiveDocumentShell {
	Write(... params): void;
	Записать(... params): void;
	Get();
	Получить();
}
interface PageOrientation {
}
interface GeographicalSchemaRectangle {
	WestBorderLongitude: number;
	ДолготаЗападнойГраницы: number;
	EastBorderLongitude: number;
	ДолготаВосточнойГраницы: number;
	SouthBorderLatitude: number;
	ШиротаЮжнойГраницы: number;
	NorthBorderLatitude: number;
	ШиротаСевернойГраницы: number;
}
interface GeographicalSchemaObject {
	Details;
	Расшифровка;
	ToolTip: string;
	Подсказка: string;
	ShowData: boolean;
	ОтображатьДанные: boolean;
	Visible: boolean;
	Видимость: boolean;
	Value;
	Значение;
	Layer: GeographicalSchemaLayer;
	Слой: GeographicalSchemaLayer;
	BoundaryBox: GeographicalSchemaRectangle;
	ОграничивающийПрямоугольник: GeographicalSchemaRectangle;
}
interface GeographicalSchemaLayerObjects {
	Count(): number;
	Количество(): number;
	Get(... params): GeographicalSchemaObject;
	Получить(... params): GeographicalSchemaObject;
	Add(): GeographicalSchemaObject;
	Добавить(): GeographicalSchemaObject;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
}
interface GeographicalSchemaLayerSeriesShowMode {
}
interface ColorType {
}
interface Color {
	R: number;
	Красный: number;
	G: number;
	Зеленый: number;
	B: number;
	Синий: number;
	Type: ColorType;
	Вид: ColorType;
}
declare type Цвет = Color;
interface FontType {
}
interface Font {
	Name: string;
	Имя: string;
	Size: number;
	Размер: number;
	Bold: boolean;
	Жирный: boolean;
	Italic: boolean;
	Наклонный: boolean;
	Underline: boolean;
	Подчеркивание: boolean;
	Strikeout: boolean;
	Зачеркивание: boolean;
	Type: FontType;
	Вид: FontType;
	Scale: number;
	Масштаб: number;
}
declare type Шрифт = Font;
interface SeriesValuesDrawingMode {
}
interface GeographicalSchemaLayerDataSeries {
	Name: string;
	Имя: string;
	Text: string;
	Текст: string;
	Format: string;
	Формат: string;
	ShowMode: GeographicalSchemaLayerSeriesShowMode;
	ТипОтображения: GeographicalSchemaLayerSeriesShowMode;
	ShapeBaseColor: Color;
	БазовыйЦветФигуры: Color;
	TextColor: Color;
	ЦветТекста: Color;
	TextFont: Font;
	ШрифтТекста: Font;
	TextOrientation: number;
	ОриентацияТекста: number;
	Value;
	Значение;
	SeriesGroupName: string;
	ИмяГруппыСерий: string;
	ValuesShowMode: SeriesValuesDrawingMode;
	РежимОтображенияЗначений: SeriesValuesDrawingMode;
}
interface GeographicalSchemaLayerSeries {
	Count(): number;
	Количество(): number;
	Get(... params): GeographicalSchemaLayerDataSeries;
	Получить(... params): GeographicalSchemaLayerDataSeries;
	Add(... params): GeographicalSchemaLayerDataSeries;
	Добавить(... params): GeographicalSchemaLayerDataSeries;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): GeographicalSchemaLayerDataSeries;
	Найти(... params): GeographicalSchemaLayerDataSeries;
}
interface GeographicalSchemaDataSourceOrganizationType {
}
interface GeographicalSchemaLayerSeriesValue {
	ToolTip: string;
	Подсказка: string;
	Value;
	Значение;
	Details;
	Расшифровка;
	Object: GeographicalSchemaObject;
	Объект: GeographicalSchemaObject;
	Series: GeographicalSchemaLayerDataSeries;
	Серия: GeographicalSchemaLayerDataSeries;
}
interface GeographicalSchemaLayer {
	Name: string;
	Имя: string;
	Text: string;
	Текст: string;
	Visible: boolean;
	Видимость: boolean;
	EnableChoice;
	РазрешитьВыбор;
	Objects: GeographicalSchemaLayerObjects;
	Объекты: GeographicalSchemaLayerObjects;
	Series: GeographicalSchemaLayerSeries;
	Серии: GeographicalSchemaLayerSeries;
	ScaleRangeBegin: number;
	НачалоМасштабногоДиапазона: number;
	ScaleRangeEnd: number;
	КонецМасштабногоДиапазона: number;
	ObjectsType;
	ТипОбъектов;
	DataSource;
	ИсточникДанных;
	DataSourceOrganizationType: GeographicalSchemaDataSourceOrganizationType;
	ТипОрганизацииИсточникаДанных: GeographicalSchemaDataSourceOrganizationType;
	BoundaryBox: GeographicalSchemaRectangle;
	ОграничивающийПрямоугольник: GeographicalSchemaRectangle;
	SetValue(... params): void;
	УстановитьЗначение(... params): void;
	GetValue(... params): GeographicalSchemaLayerSeriesValue;
	ПолучитьЗначение(... params): GeographicalSchemaLayerSeriesValue;
	FindObject(... params): GeographicalSchemaObject;
	НайтиОбъект(... params): GeographicalSchemaObject;
	FindByValue(... params): GeographicalSchemaObject;
	НайтиПоЗначению(... params): GeographicalSchemaObject;
	SelectObjects(... params): ArrayV8;
	ВыбратьОбъекты(... params): ArrayV8;
}
interface GeographicalSchemaLayers {
	Count(): number;
	Количество(): number;
	Get(... params): GeographicalSchemaLayer;
	Получить(... params): GeographicalSchemaLayer;
	Add(... params): GeographicalSchemaLayer;
	Добавить(... params): GeographicalSchemaLayer;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): GeographicalSchemaLayer;
	Найти(... params): GeographicalSchemaLayer;
	Move(... params): void;
	Сдвинуть(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
}
interface HorizontalAlign {
}
interface ControlBorderType {
}
interface BorderType {
}
interface Border {
	BorderType: ControlBorderType;
	ТипРамки: ControlBorderType;
	Width: number;
	Толщина: number;
	Type: BorderType;
	Вид: BorderType;
}
declare type Рамка = Border;
interface GeographicalSchemaTitleArea {
	Text: string;
	Текст: string;
	Font: Font;
	Шрифт: Font;
	TextColor: Color;
	ЦветТекста: Color;
	Align: HorizontalAlign;
	Выравнивание: HorizontalAlign;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Прозрачность: boolean;
	BackColor: Color;
	ЦветФона: Color;
}
interface GeographicalSchemaLegendItemShowScaleType {
}
interface GeographicalSchemaLegendItem {
	Series: GeographicalSchemaLayerDataSeries;
	Серия: GeographicalSchemaLayerDataSeries;
	SampleText: string;
	ТекстОбразца: string;
	SampleFont: Font;
	ШрифтОбразца: Font;
	SampleColor: Color;
	ЦветОбразца: Color;
	LabelText: string;
	ТекстПодписи: string;
	Picture: Picture;
	Картинка: Picture;
	ShowScale: GeographicalSchemaLegendItemShowScaleType;
	ОтображатьШкалу: GeographicalSchemaLegendItemShowScaleType;
}
interface GeographicalSchemaLegendItems {
	Count(): number;
	Количество(): number;
	Get(... params): GeographicalSchemaLegendItem;
	Получить(... params): GeographicalSchemaLegendItem;
	Add(): GeographicalSchemaLegendItem;
	Добавить(): GeographicalSchemaLegendItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
}
interface GeographicalSchemaLegendArea {
	Font: Font;
	Шрифт: Font;
	Color: Color;
	Цвет: Color;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Прозрачность: boolean;
	BackColor: Color;
	ЦветФона: Color;
	DrawingScale: boolean;
	МасштабнаяЛинейка: boolean;
	Items: GeographicalSchemaLegendItems;
	Элементы: GeographicalSchemaLegendItems;
}
interface GeographicalSchemaPlotArea {
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Прозрачность: boolean;
	BackColor: Color;
	ЦветФона: Color;
}
interface GeographicalSchemaProjection {
}
interface UseOutput {
}
interface GeographicalSchema {
	PrinterName: string;
	ИмяПринтера: string;
	Copies: number;
	КоличествоЭкземпляров: number;
	PageOrientation: PageOrientation;
	ОриентацияСтраницы: PageOrientation;
	Collate: boolean;
	РазборПоКопиям: boolean;
	BlackAndWhite: boolean;
	ЧерноБелаяПечать: boolean;
	LeftMargin: number;
	ПолеСлева: number;
	RightMargin: number;
	ПолеСправа: number;
	TopMargin: number;
	ПолеСверху: number;
	BottomMargin: number;
	ПолеСнизу: number;
	Layers: GeographicalSchemaLayers;
	Слои: GeographicalSchemaLayers;
	RefreshEnabled: boolean;
	Обновление: boolean;
	BoundaryBox: GeographicalSchemaRectangle;
	ОграничивающийПрямоугольник: GeographicalSchemaRectangle;
	TitleArea: GeographicalSchemaTitleArea;
	ОбластьЗаголовка: GeographicalSchemaTitleArea;
	LegendArea: GeographicalSchemaLegendArea;
	ОбластьЛегенды: GeographicalSchemaLegendArea;
	PlotArea: GeographicalSchemaPlotArea;
	ОбластьПостроения: GeographicalSchemaPlotArea;
	LatitudeShift: number;
	СмещениеШироты: number;
	LongitudeShift: number;
	СмещениеДолготы: number;
	Projection: GeographicalSchemaProjection;
	Проекция: GeographicalSchemaProjection;
	ShowLegend: boolean;
	ОтображатьЛегенду: boolean;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	Output: UseOutput;
	Вывод: UseOutput;
	UsedFileName: string;
	ИспользуемоеИмяФайла: string;
	Print(... params): void;
	Напечатать(... params): void;
	Write(... params): void;
	Записать(... params): void;
	Read(... params): void;
	Прочитать(... params): void;
	Clear(): void;
	Очистить(): void;
	Show(... params): void;
	Показать(... params): void;
	FindByLocation(... params): ArrayV8;
	НайтиПоРасположению(... params): ArrayV8;
	CheckByLocation(... params): boolean;
	ПроверитьПоРасположению(... params): boolean;
	SetPropertyForObjects(... params): void;
	УстановитьСвойствоОбъектов(... params): void;
	ClipOffByObject(... params): void;
	ОтсечьПоОбъекту(... params): void;
	GetPicture(... params): Picture;
	ПолучитьКартинку(... params): Picture;
	Put(... params): void;
	Вывести(... params): void;
}
declare type ГеографическаяСхема = GeographicalSchema;
interface DataCompositionParameter {
}
declare type ПараметрКомпоновкиДанных = DataCompositionParameter;
interface DataCompositionAvailableParameters {
	Items: DataCompositionAvailableParameters;
	Элементы: DataCompositionAvailableParameters;
	FindParameter(... params): DataCompositionParameter;
	НайтиПараметр(... params): DataCompositionParameter;
}
interface DataCompositionParameterValue {
	Use: boolean;
	Использование: boolean;
	Parameter: DataCompositionParameter;
	Параметр: DataCompositionParameter;
	Value;
	Значение;
	NestedParameterValues: DataCompositionParameterValueCollection;
	ЗначенияВложенныхПараметров: DataCompositionParameterValueCollection;
	Parent: DataCompositionParameter;
	Родитель: DataCompositionParameter;
}
interface DataCompositionSettingsItemViewMode {
}
interface DataCompositionSettingsParameterValue {
	Use: boolean;
	Использование: boolean;
	Parameter: DataCompositionParameter;
	Параметр: DataCompositionParameter;
	Value;
	Значение;
	NestedParameterValues: DataCompositionParameterValueCollection;
	ЗначенияВложенныхПараметров: DataCompositionParameterValueCollection;
	Parent: DataCompositionParameter;
	Родитель: DataCompositionParameter;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionParameterValueCollection {
	Add(): DataCompositionParameterValue | DataCompositionSettingsParameterValue;
	Добавить(): DataCompositionParameterValue | DataCompositionSettingsParameterValue;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionParameterValue | DataCompositionSettingsParameterValue;
	Найти(... params): DataCompositionParameterValue | DataCompositionSettingsParameterValue;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionParameterValue | DataCompositionSettingsParameterValue;
	Вставить(... params): DataCompositionParameterValue | DataCompositionSettingsParameterValue;
	Get(... params): DataCompositionParameterValue | DataCompositionSettingsParameterValue;
	Получить(... params): DataCompositionParameterValue | DataCompositionSettingsParameterValue;
}
interface DataCompositionAppearanceTemplate {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
}
declare type МакетОформленияКомпоновкиДанных = DataCompositionAppearanceTemplate;
interface DataCompositionSchemaDataSource {
	Name: string;
	Имя: string;
	DataSourceType: string;
	ТипИсточникаДанных: string;
	ConnectionString: string;
	СтрокаСоединения: string;
}
interface DataCompositionSchemaDataSources {
	Add(): DataCompositionSchemaDataSource;
	Добавить(): DataCompositionSchemaDataSource;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionSchemaDataSource;
	Найти(... params): DataCompositionSchemaDataSource;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaDataSource;
	Вставить(... params): DataCompositionSchemaDataSource;
	Get(... params): DataCompositionSchemaDataSource;
	Получить(... params): DataCompositionSchemaDataSource;
}
interface DataCompositionSchemaFieldUseRestriction {
	Field: boolean;
	Поле: boolean;
	Condition: boolean;
	Условие: boolean;
	Group: boolean;
	Группировка: boolean;
	Order: boolean;
	Порядок: boolean;
}
interface DataCompositionSchemaDataSetFieldFolder {
	DataPath: string;
	ПутьКДанным: string;
	Title: string;
	Заголовок: string;
	UseRestriction: DataCompositionSchemaFieldUseRestriction;
	ОграничениеИспользования: DataCompositionSchemaFieldUseRestriction;
}
interface DataCompositionBalanceType {
}
interface DataCompositionAccountingBalanceType {
}
interface DataCompositionDataSetFieldRole {
	PeriodNumber: number;
	НомерПериода: number;
	PeriodType: boolean;
	ТипПериода: boolean;
	Dimension: boolean;
	Измерение: boolean;
	ParentDimension: string;
	РодительскоеИзмерение: string;
	Account: boolean;
	Счет: boolean;
	AccountTypeExpression: string;
	ВыражениеВидаСчета: string;
	Balance: boolean;
	Остаток: boolean;
	BalanceGroup: string;
	ГруппаОстатка: string;
	BalanceType: DataCompositionBalanceType;
	ТипОстатка: DataCompositionBalanceType;
	AccountingBalanceType: DataCompositionAccountingBalanceType;
	ТипБухгалтерскогоОстатка: DataCompositionAccountingBalanceType;
	AccountField: string;
	ПолеСчета: string;
	IgnoreNULLValues: boolean;
	ИгнорироватьЗначенияNULL: boolean;
	Required: boolean;
	Обязательное: boolean;
	DimensionAttribute: boolean;
	РеквизитИзмерения: boolean;
}
interface DataCompositionSortDirection {
}
interface DataCompositionOrderExpression {
	Expression: string;
	Выражение: string;
	OrderType: DataCompositionSortDirection;
	ТипУпорядочивания: DataCompositionSortDirection;
	AutoOrder: boolean;
	Автоупорядочивание: boolean;
}
interface DataCompositionOrderExpressions {
	Add(): DataCompositionOrderExpression;
	Добавить(): DataCompositionOrderExpression;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionOrderExpression;
	Вставить(... params): DataCompositionOrderExpression;
	Get(... params): DataCompositionOrderExpression;
	Получить(... params): DataCompositionOrderExpression;
}
interface DataCompositionField {
}
declare type ПолеКомпоновкиДанных = DataCompositionField;
interface DataCompositionAvailableField {
	Title: string;
	Заголовок: string;
	Field: DataCompositionField;
	Поле: DataCompositionField;
	Resource: boolean;
	Ресурс: boolean;
	Folder: boolean;
	Папка: boolean;
	Table: boolean;
	Таблица: boolean;
	Items: DataCompositionAvailableFieldCollection;
	Элементы: DataCompositionAvailableFieldCollection;
	Parent: DataCompositionAvailableField;
	Родитель: DataCompositionAvailableField;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Type: TypeDescription;
	Тип: TypeDescription;
}
interface DataCompositionTypeLink {
	Field: DataCompositionField;
	Поле: DataCompositionField;
	LinkItem: number;
	ЭлементСвязи: number;
}
declare type СвязьПоТипуКомпоновкиДанных = DataCompositionTypeLink;
interface FoldersAndItemsUse {
}
interface DataCompositionChoiceParameterLink {
	Name: string;
	Имя: string;
	Field: DataCompositionField;
	Поле: DataCompositionField;
	ValueChange;
	ИзменениеЗначения;
}
interface DataCompositionChoiceParameterLinks {
	Add(): DataCompositionChoiceParameterLink;
	Добавить(): DataCompositionChoiceParameterLink;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionChoiceParameterLink;
	Найти(... params): DataCompositionChoiceParameterLink;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionChoiceParameterLink;
	Вставить(... params): DataCompositionChoiceParameterLink;
	Get(... params): DataCompositionChoiceParameterLink;
	Получить(... params): DataCompositionChoiceParameterLink;
}
interface DataCompositionChoiceParameter {
	Name: string;
	Имя: string;
	Value: DataCompositionField;
	Значение: DataCompositionField;
}
interface DataCompositionFilterAvailableField {
	Title: string;
	Заголовок: string;
	Field: DataCompositionField;
	Поле: DataCompositionField;
	Resource: boolean;
	Ресурс: boolean;
	Folder: boolean;
	Папка: boolean;
	Table: boolean;
	Таблица: boolean;
	AvailableValues: ValueList;
	ДоступныеЗначения: ValueList;
	AvailableCompareTypes: ValueList;
	ДоступныеВидыСравнения: ValueList;
	Items: DataCompositionAvailableFieldCollection;
	Элементы: DataCompositionAvailableFieldCollection;
	Parent: DataCompositionFilterAvailableField;
	Родитель: DataCompositionFilterAvailableField;
	Mask: string;
	Маска: string;
	EditFormat: string;
	ФорматРедактирования: string;
	ChoiceForm: string;
	ФормаВыбора: string;
	TypeLink: DataCompositionTypeLink;
	СвязьПоТипу: DataCompositionTypeLink;
	QuickChoice: boolean;
	БыстрыйВыбор: boolean;
	ChoiceFoldersAndItems: FoldersAndItemsUse;
	ВыборГруппИЭлементов: FoldersAndItemsUse;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Type: TypeDescription;
	Тип: TypeDescription;
	GetChoiceParameterLinks(): DataCompositionChoiceParameterLinks;
	ПолучитьСвязиПараметровВыбора(): DataCompositionChoiceParameterLinks;
	GetChoiceParameters(): DataCompositionChoiceParameter;
	ПолучитьПараметрыВыбора(): DataCompositionChoiceParameter;
}
interface DataCompositionAvailableFieldCollection {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionAvailableField | DataCompositionFilterAvailableField;
	Найти(... params): DataCompositionAvailableField | DataCompositionFilterAvailableField;
	Get(... params): DataCompositionAvailableField | DataCompositionFilterAvailableField;
	Получить(... params): DataCompositionAvailableField | DataCompositionFilterAvailableField;
}
interface DataCompositionID {
}
interface DataCompositionAvailableFields {
	Items: DataCompositionAvailableFieldCollection;
	Элементы: DataCompositionAvailableFieldCollection;
	FindField(... params): DataCompositionAvailableField | DataCompositionFilterAvailableField;
	НайтиПоле(... params): DataCompositionAvailableField | DataCompositionFilterAvailableField;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionAvailableField | DataCompositionFilterAvailableField;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionAvailableField | DataCompositionFilterAvailableField;
}
interface DataCompositionAppearance {
	ParameterAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляПараметров: DataCompositionAvailableFields;
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionParameterValue;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionParameterValue;
}
interface DataCompositionEditParameters {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
}
interface DataCompositionSchemaDataSetField {
	DataPath: string;
	ПутьКДанным: string;
	Field: string;
	Поле: string;
	Title: string;
	Заголовок: string;
	UseRestriction: DataCompositionSchemaFieldUseRestriction;
	ОграничениеИспользования: DataCompositionSchemaFieldUseRestriction;
	AttributeUseRestriction: DataCompositionSchemaFieldUseRestriction;
	ОграничениеИспользованияРеквизитов: DataCompositionSchemaFieldUseRestriction;
	Role: DataCompositionDataSetFieldRole;
	Роль: DataCompositionDataSetFieldRole;
	PresentationExpression: string;
	ВыражениеПредставления: string;
	OrderExpressions: DataCompositionOrderExpressions;
	ВыраженияУпорядочивания: DataCompositionOrderExpressions;
	HierarchyCheckDataSet: string;
	НаборДанныхПроверкиИерархии: string;
	HierarchyCheckDataSetParameter: string;
	ПараметрНабораДанныхПроверкиИерархии: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Appearance: DataCompositionAppearance;
	Оформление: DataCompositionAppearance;
	EditParameters: DataCompositionEditParameters;
	ПараметрыРедактирования: DataCompositionEditParameters;
	GetAvailableValues(): ValueList;
	ПолучитьДоступныеЗначения(): ValueList;
	SetAvailableValues(... params): void;
	УстановитьДоступныеЗначения(... params): void;
}
interface DataCompositionSchemaNestedDataSet {
	DataPath: string;
	ПутьКДанным: string;
	Field: string;
	Поле: string;
	Title: string;
	Заголовок: string;
}
interface DataCompositionSchemaDataSetFields {
	Add(... params): DataCompositionSchemaDataSetFieldFolder | DataCompositionSchemaDataSetField | DataCompositionSchemaNestedDataSet;
	Добавить(... params): DataCompositionSchemaDataSetFieldFolder | DataCompositionSchemaDataSetField | DataCompositionSchemaNestedDataSet;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionSchemaDataSetFieldFolder | DataCompositionSchemaDataSetField | DataCompositionSchemaNestedDataSet;
	Найти(... params): DataCompositionSchemaDataSetFieldFolder | DataCompositionSchemaDataSetField | DataCompositionSchemaNestedDataSet;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaDataSetFieldFolder | DataCompositionSchemaDataSetField | DataCompositionSchemaNestedDataSet;
	Вставить(... params): DataCompositionSchemaDataSetFieldFolder | DataCompositionSchemaDataSetField | DataCompositionSchemaNestedDataSet;
	Get(... params): DataCompositionSchemaDataSetFieldFolder | DataCompositionSchemaDataSetField | DataCompositionSchemaNestedDataSet;
	Получить(... params): DataCompositionSchemaDataSetFieldFolder | DataCompositionSchemaDataSetField | DataCompositionSchemaNestedDataSet;
}
interface DataCompositionSchemaDataSetUnion {
	Name: string;
	Имя: string;
	Fields: DataCompositionSchemaDataSetFields;
	Поля: DataCompositionSchemaDataSetFields;
	Items: DataCompositionSchemaDataSets;
	Элементы: DataCompositionSchemaDataSets;
}
interface DataCompositionSchemaDataSetQuery {
	Name: string;
	Имя: string;
	Fields: DataCompositionSchemaDataSetFields;
	Поля: DataCompositionSchemaDataSetFields;
	DataSource: string;
	ИсточникДанных: string;
	Query: string;
	Запрос: string;
	AutoFillAvailableFields: boolean;
	АвтоЗаполнениеДоступныхПолей: boolean;
}
interface DataCompositionSchemaDataSetObject {
	Name: string;
	Имя: string;
	Fields: DataCompositionSchemaDataSetFields;
	Поля: DataCompositionSchemaDataSetFields;
	DataSource: string;
	ИсточникДанных: string;
	ObjectName: string;
	ИмяОбъекта: string;
}
interface DataCompositionSchemaDataSets {
	Add(... params): DataCompositionSchemaDataSetUnion | DataCompositionSchemaDataSetQuery | DataCompositionSchemaDataSetObject;
	Добавить(... params): DataCompositionSchemaDataSetUnion | DataCompositionSchemaDataSetQuery | DataCompositionSchemaDataSetObject;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionSchemaDataSetUnion | DataCompositionSchemaDataSetQuery | DataCompositionSchemaDataSetObject;
	Найти(... params): DataCompositionSchemaDataSetUnion | DataCompositionSchemaDataSetQuery | DataCompositionSchemaDataSetObject;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaDataSetUnion | DataCompositionSchemaDataSetQuery | DataCompositionSchemaDataSetObject;
	Вставить(... params): DataCompositionSchemaDataSetUnion | DataCompositionSchemaDataSetQuery | DataCompositionSchemaDataSetObject;
	Get(... params): DataCompositionSchemaDataSetUnion | DataCompositionSchemaDataSetQuery | DataCompositionSchemaDataSetObject;
	Получить(... params): DataCompositionSchemaDataSetUnion | DataCompositionSchemaDataSetQuery | DataCompositionSchemaDataSetObject;
}
interface DataCompositionSchemaCalculatedField {
	DataPath: string;
	ПутьКДанным: string;
	Expression: string;
	Выражение: string;
	Title: string;
	Заголовок: string;
	UseRestriction: DataCompositionSchemaFieldUseRestriction;
	ОграничениеИспользования: DataCompositionSchemaFieldUseRestriction;
	PresentationExpression: string;
	ВыражениеПредставления: string;
	OrderExpressions: DataCompositionOrderExpressions;
	ВыраженияУпорядочивания: DataCompositionOrderExpressions;
	Appearance: DataCompositionAppearance;
	Оформление: DataCompositionAppearance;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	EditParameters: DataCompositionEditParameters;
	ПараметрыРедактирования: DataCompositionEditParameters;
	GetAvailableValues(): ValueList;
	ПолучитьДоступныеЗначения(): ValueList;
	SetAvailableValues(... params): void;
	УстановитьДоступныеЗначения(... params): void;
}
interface DataCompositionSchemaCalculatedFields {
	Add(): DataCompositionSchemaCalculatedField;
	Добавить(): DataCompositionSchemaCalculatedField;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionSchemaCalculatedField;
	Найти(... params): DataCompositionSchemaCalculatedField;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaCalculatedField;
	Вставить(... params): DataCompositionSchemaCalculatedField;
	Get(... params): DataCompositionSchemaCalculatedField;
	Получить(... params): DataCompositionSchemaCalculatedField;
}
interface DataCompositionSchemaTotalField {
	DataPath: string;
	ПутьКДанным: string;
	Expression: string;
	Выражение: string;
	Groups: ArrayV8;
	Группировки: ArrayV8;
}
interface DataCompositionSchemaTotalFields {
	Add(): DataCompositionSchemaTotalField;
	Добавить(): DataCompositionSchemaTotalField;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionSchemaTotalField;
	Найти(... params): DataCompositionSchemaTotalField;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaTotalField;
	Вставить(... params): DataCompositionSchemaTotalField;
	Get(... params): DataCompositionSchemaTotalField;
	Получить(... params): DataCompositionSchemaTotalField;
}
interface DataCompositionSchemaDataSetLink {
	SourceDataSet: string;
	НаборДанныхИсточник: string;
	DestinationDataSet: string;
	НаборДанныхПриемник: string;
	SourceExpression: string;
	ВыражениеИсточник: string;
	DestinationExpression: string;
	ВыражениеПриемник: string;
	Parameter: string;
	Параметр: string;
	ParameterListAllowed: boolean;
	РазрешенСписокПараметров: boolean;
	LinkConditionExpression: string;
	УсловиеСвязи: string;
	StartExpression: string;
	НачальноеВыражение: string;
	Required: boolean;
	Обязательная: boolean;
}
interface DataCompositionSchemaDataSetLinks {
	Add(): DataCompositionSchemaDataSetLink;
	Добавить(): DataCompositionSchemaDataSetLink;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaDataSetLink;
	Вставить(... params): DataCompositionSchemaDataSetLink;
	Get(... params): DataCompositionSchemaDataSetLink;
	Получить(... params): DataCompositionSchemaDataSetLink;
}
interface DataCompositionParameterUse {
}
interface DataCompositionSchemaParameter {
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Value;
	Значение;
	UseRestriction: boolean;
	ОграничениеИспользования: boolean;
	Expression: string;
	Выражение: string;
	ValueListAllowed: boolean;
	ДоступенСписокЗначений: boolean;
	IncludeInAvailableFields: boolean;
	ВключатьВДоступныеПоля: boolean;
	EditParameters: DataCompositionEditParameters;
	ПараметрыРедактирования: DataCompositionEditParameters;
	DenyIncompleteValues: boolean;
	ЗапрещатьНезаполненныеЗначения: boolean;
	Use: DataCompositionParameterUse;
	Использование: DataCompositionParameterUse;
	FunctionalOptionsParameter: string;
	ПараметрФункциональныхОпций: string;
	GetAvailableValues(): ValueList;
	ПолучитьДоступныеЗначения(): ValueList;
	SetAvailableValues(... params): void;
	УстановитьДоступныеЗначения(... params): void;
}
interface DataCompositionSchemaParameters {
	Add(): DataCompositionSchemaParameter;
	Добавить(): DataCompositionSchemaParameter;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionSchemaParameter;
	Найти(... params): DataCompositionSchemaParameter;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaParameter;
	Вставить(... params): DataCompositionSchemaParameter;
	Get(... params): DataCompositionSchemaParameter;
	Получить(... params): DataCompositionSchemaParameter;
}
interface DataCompositionAvailableSettingsObject {
	Title: string;
	Заголовок: string;
	ObjectID: string;
	ИдентификаторОбъекта: string;
}
interface DataCompositionAvailableSettingsObjectCollection {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionAvailableSettingsObject;
	Найти(... params): DataCompositionAvailableSettingsObject;
	Get(... params): DataCompositionAvailableSettingsObject;
	Получить(... params): DataCompositionAvailableSettingsObject;
}
interface DataCompositionAvailableSettingsObjects {
	Items: DataCompositionAvailableSettingsObjectCollection;
	Элементы: DataCompositionAvailableSettingsObjectCollection;
}
interface DataCompositionDataParameterValues {
	ParameterAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляПараметров: DataCompositionAvailableFields;
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionParameterValue;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionParameterValue;
}
interface DataCompositionFilterItemsGroupType {
}
interface DataCompositionFilterApplicationType {
}
interface DataCompositionFilterItemGroup {
	Use: boolean;
	Использование: boolean;
	GroupType: DataCompositionFilterItemsGroupType;
	ТипГруппы: DataCompositionFilterItemsGroupType;
	Items: DataCompositionFilterItemCollection;
	Элементы: DataCompositionFilterItemCollection;
	Parent: DataCompositionFilterItemGroup;
	Родитель: DataCompositionFilterItemGroup;
	Presentation: string;
	Представление: string;
	Application: DataCompositionFilterApplicationType;
	Применение: DataCompositionFilterApplicationType;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionComparisonType {
}
interface DataCompositionFilterItem {
	Use: boolean;
	Использование: boolean;
	LeftValue;
	ЛевоеЗначение;
	ComparisonType: DataCompositionComparisonType;
	ВидСравнения: DataCompositionComparisonType;
	RightValue;
	ПравоеЗначение;
	Parent: DataCompositionFilterItemGroup;
	Родитель: DataCompositionFilterItemGroup;
	Presentation: string;
	Представление: string;
	Application: DataCompositionFilterApplicationType;
	Применение: DataCompositionFilterApplicationType;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionFilterItemCollection {
	Add(... params): DataCompositionFilterItemGroup | DataCompositionFilterItem;
	Добавить(... params): DataCompositionFilterItemGroup | DataCompositionFilterItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionFilterItemGroup | DataCompositionFilterItem;
	Вставить(... params): DataCompositionFilterItemGroup | DataCompositionFilterItem;
	Get(... params): DataCompositionFilterItemGroup | DataCompositionFilterItem;
	Получить(... params): DataCompositionFilterItemGroup | DataCompositionFilterItem;
}
interface DataCompositionFilter {
	FilterAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляОтбора: DataCompositionAvailableFields;
	Items: DataCompositionFilterItemCollection;
	Элементы: DataCompositionFilterItemCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionFilterItemGroup | DataCompositionFilterItem;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionFilterItemGroup | DataCompositionFilterItem;
}
declare type ОтборКомпоновкиДанных = DataCompositionFilter;
interface DataCompositionFieldPlacement {
}
interface DataCompositionSelectedFieldGroup {
	Use: boolean;
	Использование: boolean;
	Field: DataCompositionField;
	Поле: DataCompositionField;
	Title: string;
	Заголовок: string;
	Placement: DataCompositionFieldPlacement;
	Расположение: DataCompositionFieldPlacement;
	Items: DataCompositionSelectedFieldCollection;
	Элементы: DataCompositionSelectedFieldCollection;
	Parent: DataCompositionSelectedFieldGroup;
	Родитель: DataCompositionSelectedFieldGroup;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionSelectedField {
	Use: boolean;
	Использование: boolean;
	Field: DataCompositionField;
	Поле: DataCompositionField;
	Title: string;
	Заголовок: string;
	Parent: DataCompositionSelectedFieldGroup;
	Родитель: DataCompositionSelectedFieldGroup;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionAutoSelectedField {
	Use: boolean;
	Использование: boolean;
	Parent: DataCompositionSelectedFieldGroup;
	Родитель: DataCompositionSelectedFieldGroup;
}
interface DataCompositionSelectedFieldCollection {
	Add(... params): DataCompositionSelectedField | DataCompositionAutoSelectedField | DataCompositionSelectedFieldGroup;
	Добавить(... params): DataCompositionSelectedField | DataCompositionAutoSelectedField | DataCompositionSelectedFieldGroup;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSelectedField | DataCompositionAutoSelectedField | DataCompositionSelectedFieldGroup;
	Вставить(... params): DataCompositionSelectedField | DataCompositionAutoSelectedField | DataCompositionSelectedFieldGroup;
	Get(... params): DataCompositionSelectedField | DataCompositionAutoSelectedField | DataCompositionSelectedFieldGroup;
	Получить(... params): DataCompositionSelectedField | DataCompositionAutoSelectedField | DataCompositionSelectedFieldGroup;
}
interface DataCompositionSelectedFields {
	SelectionAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляВыбора: DataCompositionAvailableFields;
	Items: DataCompositionSelectedFieldCollection;
	Элементы: DataCompositionSelectedFieldCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionSelectedField | DataCompositionAutoSelectedField | DataCompositionSelectedFieldGroup;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionSelectedField | DataCompositionAutoSelectedField | DataCompositionSelectedFieldGroup;
}
interface DataCompositionAutoOrderItem {
	Use: boolean;
	Использование: boolean;
}
interface DataCompositionOrderItem {
	Use: boolean;
	Использование: boolean;
	Field: DataCompositionField;
	Поле: DataCompositionField;
	OrderType: DataCompositionSortDirection;
	ТипУпорядочивания: DataCompositionSortDirection;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionOrderItemCollection {
	Add(... params): DataCompositionAutoOrderItem | DataCompositionOrderItem;
	Добавить(... params): DataCompositionAutoOrderItem | DataCompositionOrderItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAutoOrderItem | DataCompositionOrderItem;
	Вставить(... params): DataCompositionAutoOrderItem | DataCompositionOrderItem;
	Get(... params): DataCompositionAutoOrderItem | DataCompositionOrderItem;
	Получить(... params): DataCompositionAutoOrderItem | DataCompositionOrderItem;
}
interface DataCompositionOrder {
	OrderAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляПорядка: DataCompositionAvailableFields;
	Items: DataCompositionOrderItemCollection;
	Элементы: DataCompositionOrderItemCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionAutoOrderItem | DataCompositionOrderItem;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionAutoOrderItem | DataCompositionOrderItem;
}
interface DataCompositionAppearanceField {
	Use: boolean;
	Использование: boolean;
	Field: DataCompositionField;
	Поле: DataCompositionField;
}
interface DataCompositionAppearanceFieldCollection {
	Add(): DataCompositionAppearanceField;
	Добавить(): DataCompositionAppearanceField;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAppearanceField;
	Вставить(... params): DataCompositionAppearanceField;
	Get(... params): DataCompositionAppearanceField;
	Получить(... params): DataCompositionAppearanceField;
}
interface DataCompositionAppearanceFields {
	AppearanceFieldsAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляОформляемыхПолей: DataCompositionAvailableFields;
	Items: DataCompositionAppearanceFieldCollection;
	Элементы: DataCompositionAppearanceFieldCollection;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionAppearanceField;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionAppearanceField;
}
interface DataCompositionConditionalAppearanceUse {
}
interface DataCompositionConditionalAppearanceItem {
	Use: boolean;
	Использование: boolean;
	Fields: DataCompositionAppearanceFields;
	Поля: DataCompositionAppearanceFields;
	Filter: DataCompositionFilter;
	Отбор: DataCompositionFilter;
	Appearance: DataCompositionAppearance;
	Оформление: DataCompositionAppearance;
	Presentation: string;
	Представление: string;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
	UseInGroup: DataCompositionConditionalAppearanceUse;
	ИспользоватьВГруппировке: DataCompositionConditionalAppearanceUse;
	UseInHierarchicalGroup: DataCompositionConditionalAppearanceUse;
	ИспользоватьВИерархическойГруппировке: DataCompositionConditionalAppearanceUse;
	UseInOverall: DataCompositionConditionalAppearanceUse;
	ИспользоватьВОбщемИтоге: DataCompositionConditionalAppearanceUse;
	UseInFieldsHeader: DataCompositionConditionalAppearanceUse;
	ИспользоватьВЗаголовкеПолей: DataCompositionConditionalAppearanceUse;
	UseInHeader: DataCompositionConditionalAppearanceUse;
	ИспользоватьВЗаголовке: DataCompositionConditionalAppearanceUse;
	UseInParameters: DataCompositionConditionalAppearanceUse;
	ИспользоватьВПараметрах: DataCompositionConditionalAppearanceUse;
	UseInFilter: DataCompositionConditionalAppearanceUse;
	ИспользоватьВОтборе: DataCompositionConditionalAppearanceUse;
}
interface DataCompositionConditionalAppearanceItemCollection {
	Add(): DataCompositionConditionalAppearanceItem;
	Добавить(): DataCompositionConditionalAppearanceItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionConditionalAppearanceItem;
	Вставить(... params): DataCompositionConditionalAppearanceItem;
	Get(... params): DataCompositionConditionalAppearanceItem;
	Получить(... params): DataCompositionConditionalAppearanceItem;
}
interface DataCompositionConditionalAppearance {
	FilterAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляОтбора: DataCompositionAvailableFields;
	FieldsAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляПолей: DataCompositionAvailableFields;
	Items: DataCompositionConditionalAppearanceItemCollection;
	Элементы: DataCompositionConditionalAppearanceItemCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionConditionalAppearanceItem;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionConditionalAppearanceItem;
}
interface DataCompositionOutputParameterValues {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionParameterValue;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionParameterValue;
}
interface DataCompositionUserFieldExpression {
	Use: boolean;
	Использование: boolean;
	DataPath: string;
	ПутьКДанным: string;
	Title: string;
	Заголовок: string;
	GetDetailRecordExpression(): string;
	ПолучитьВыражениеДетальныхЗаписей(): string;
	SetDetailRecordExpression(... params): void;
	УстановитьВыражениеДетальныхЗаписей(... params): void;
	GetTotalRecordExpression(): string;
	ПолучитьВыражениеИтоговыхЗаписей(): string;
	SetTotalRecordExpression(... params): void;
	УстановитьВыражениеИтоговыхЗаписей(... params): void;
	GetDetailRecordExpressionPresentation(): string;
	ПолучитьПредставлениеВыраженияДетальныхЗаписей(): string;
	SetDetailRecordExpressionPresentation(... params): void;
	УстановитьПредставлениеВыраженияДетальныхЗаписей(... params): void;
	GetTotalRecordExpressionPresentation(): string;
	ПолучитьПредставлениеВыраженияИтоговыхЗаписей(): string;
	SetTotalRecordExpressionPresentation(... params): void;
	УстановитьПредставлениеВыраженияИтоговыхЗаписей(... params): void;
	SetExpressions(... params): void;
	УстановитьВыражения(... params): void;
	SetExpressionsPresentation(... params): void;
	УстановитьПредставлениеВыражений(... params): void;
}
interface DataCompositionUserFieldsVariant {
	Use: boolean;
	Использование: boolean;
	Filter: DataCompositionFilter;
	Отбор: DataCompositionFilter;
	Value;
	Значение;
	Presentation: string;
	Представление: string;
}
interface DataCompositionUserFieldCaseVariantCollection {
	Add(): DataCompositionUserFieldsVariant;
	Добавить(): DataCompositionUserFieldsVariant;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionUserFieldsVariant;
	Вставить(... params): DataCompositionUserFieldsVariant;
	Get(... params): DataCompositionUserFieldsVariant;
	Получить(... params): DataCompositionUserFieldsVariant;
}
interface DataCompositionUserFieldsCaseVariants {
	FilterAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляОтбора: DataCompositionAvailableFields;
	ValuesAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляЗначений: DataCompositionAvailableFields;
	Items: DataCompositionUserFieldCaseVariantCollection;
	Элементы: DataCompositionUserFieldCaseVariantCollection;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionUserFieldsVariant;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionUserFieldsVariant;
}
interface DataCompositionUserFieldCase {
	Use: boolean;
	Использование: boolean;
	DataPath: string;
	ПутьКДанным: string;
	Title: string;
	Заголовок: string;
	Variants: DataCompositionUserFieldsCaseVariants;
	Варианты: DataCompositionUserFieldsCaseVariants;
}
interface DataCompositionUserFieldCollection {
	Add(... params): DataCompositionUserFieldExpression | DataCompositionUserFieldCase;
	Добавить(... params): DataCompositionUserFieldExpression | DataCompositionUserFieldCase;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionUserFieldExpression | DataCompositionUserFieldCase;
	Вставить(... params): DataCompositionUserFieldExpression | DataCompositionUserFieldCase;
	Get(... params): DataCompositionUserFieldExpression | DataCompositionUserFieldCase;
	Получить(... params): DataCompositionUserFieldExpression | DataCompositionUserFieldCase;
}
interface DataCompositionUserFields {
	FilterAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляОтбора: DataCompositionAvailableFields;
	ValuesAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляЗначений: DataCompositionAvailableFields;
	Items: DataCompositionUserFieldCollection;
	Элементы: DataCompositionUserFieldCollection;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionUserFieldExpression | DataCompositionUserFieldCase;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionUserFieldExpression | DataCompositionUserFieldCase;
}
interface DataCompositionSettingsItemState {
}
interface DataCompositionAutoGroupField {
	Use: boolean;
	Использование: boolean;
}
interface DataCompositionGroupType {
}
interface DataCompositionPeriodAdditionType {
}
interface DataCompositionGroupField {
	Use: boolean;
	Использование: boolean;
	Field: DataCompositionField;
	Поле: DataCompositionField;
	GroupType: DataCompositionGroupType;
	ТипГруппировки: DataCompositionGroupType;
	AdditionType: DataCompositionPeriodAdditionType;
	ТипДополнения: DataCompositionPeriodAdditionType;
	BeginOfPeriod;
	НачалоПериода;
	EndOfPeriod;
	КонецПериода;
}
interface DataCompositionGroupFieldCollection {
	Add(... params): DataCompositionAutoGroupField | DataCompositionGroupField;
	Добавить(... params): DataCompositionAutoGroupField | DataCompositionGroupField;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAutoGroupField | DataCompositionGroupField;
	Вставить(... params): DataCompositionAutoGroupField | DataCompositionGroupField;
	Get(... params): DataCompositionAutoGroupField | DataCompositionGroupField;
	Получить(... params): DataCompositionAutoGroupField | DataCompositionGroupField;
}
interface DataCompositionGroupFields {
	GroupFieldsAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляПолейГруппировок: DataCompositionAvailableFields;
	PeriodAdditionAvailableFields;
	ДоступныеПоляДополненияПериода;
	Items: DataCompositionGroupFieldCollection;
	Элементы: DataCompositionGroupFieldCollection;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionAutoGroupField | DataCompositionGroupField;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionAutoGroupField | DataCompositionGroupField;
}
interface DataCompositionTableGroupOutputParameterValues {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionParameterValue;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionParameterValue;
}
interface DataCompositionTableGroup {
	Use: boolean;
	Использование: boolean;
	State: DataCompositionSettingsItemState;
	Состояние: DataCompositionSettingsItemState;
	Name: string;
	Имя: string;
	ID: string;
	Идентификатор: string;
	Filter: DataCompositionFilter;
	Отбор: DataCompositionFilter;
	GroupFields: DataCompositionGroupFields;
	ПоляГруппировки: DataCompositionGroupFields;
	Selection: DataCompositionSelectedFields;
	Выбор: DataCompositionSelectedFields;
	Order: DataCompositionOrder;
	Порядок: DataCompositionOrder;
	ConditionalAppearance: DataCompositionConditionalAppearance;
	УсловноеОформление: DataCompositionConditionalAppearance;
	OutputParameters: DataCompositionTableGroupOutputParameterValues;
	ПараметрыВывода: DataCompositionTableGroupOutputParameterValues;
	Parent;
	Родитель;
	Structure: DataCompositionSettingStructureItemCollection;
	Структура: DataCompositionSettingStructureItemCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionTableStructureItemCollection {
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
	Add(): DataCompositionTableGroup;
	Добавить(): DataCompositionTableGroup;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTableGroup;
	Вставить(... params): DataCompositionTableGroup;
	Get(... params): DataCompositionTableGroup;
	Получить(... params): DataCompositionTableGroup;
}
interface DataCompositionTable {
	Use: boolean;
	Использование: boolean;
	Name: string;
	Имя: string;
	ID: string;
	Идентификатор: string;
	Selection: DataCompositionSelectedFields;
	Выбор: DataCompositionSelectedFields;
	ConditionalAppearance: DataCompositionConditionalAppearance;
	УсловноеОформление: DataCompositionConditionalAppearance;
	OutputParameters;
	ПараметрыВывода;
	Parent;
	Родитель;
	Rows: DataCompositionTableStructureItemCollection;
	Строки: DataCompositionTableStructureItemCollection;
	Columns: DataCompositionTableStructureItemCollection;
	Колонки: DataCompositionTableStructureItemCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionChartOutputParameterValues {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionParameterValue;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionParameterValue;
}
interface DataCompositionChartGroupOutputParameterValues {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionParameterValue;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionParameterValue;
}
interface DataCompositionChartGroup {
	Use: boolean;
	Использование: boolean;
	State: DataCompositionSettingsItemState;
	Состояние: DataCompositionSettingsItemState;
	Name: string;
	Имя: string;
	ID: string;
	Идентификатор: string;
	Filter: DataCompositionFilter;
	Отбор: DataCompositionFilter;
	GroupFields: DataCompositionGroupFields;
	ПоляГруппировки: DataCompositionGroupFields;
	Selection: DataCompositionSelectedFields;
	Выбор: DataCompositionSelectedFields;
	Order: DataCompositionOrder;
	Порядок: DataCompositionOrder;
	ConditionalAppearance: DataCompositionConditionalAppearance;
	УсловноеОформление: DataCompositionConditionalAppearance;
	OutputParameters: DataCompositionChartGroupOutputParameterValues;
	ПараметрыВывода: DataCompositionChartGroupOutputParameterValues;
	Parent;
	Родитель;
	Structure: DataCompositionSettingStructureItemCollection;
	Структура: DataCompositionSettingStructureItemCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionChartStructureItemCollection {
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
	Add(): DataCompositionChartGroup;
	Добавить(): DataCompositionChartGroup;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionChartGroup;
	Вставить(... params): DataCompositionChartGroup;
	Get(... params): DataCompositionChartGroup;
	Получить(... params): DataCompositionChartGroup;
}
interface DataCompositionChart {
	Use: boolean;
	Использование: boolean;
	Name: string;
	Имя: string;
	ID: string;
	Идентификатор: string;
	Selection: DataCompositionSelectedFields;
	Выбор: DataCompositionSelectedFields;
	ConditionalAppearance: DataCompositionConditionalAppearance;
	УсловноеОформление: DataCompositionConditionalAppearance;
	OutputParameters: DataCompositionChartOutputParameterValues;
	ПараметрыВывода: DataCompositionChartOutputParameterValues;
	Parent;
	Родитель;
	Points: DataCompositionChartStructureItemCollection;
	Точки: DataCompositionChartStructureItemCollection;
	Series: DataCompositionChartStructureItemCollection;
	Серии: DataCompositionChartStructureItemCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionNestedObjectSettings {
	Use: boolean;
	Использование: boolean;
	ObjectID: string;
	ИдентификаторОбъекта: string;
	Name;
	Имя;
	ID: string;
	Идентификатор: string;
	Parent;
	Родитель;
	Settings: DataCompositionSettings;
	Настройки: DataCompositionSettings;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
	SetIdentifier(... params): void;
	УстановитьИдентификатор(... params): void;
}
interface DataCompositionGroupOutputParameterValues {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionParameterValue;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionParameterValue;
}
interface DataCompositionGroup {
	Use: boolean;
	Использование: boolean;
	State: DataCompositionSettingsItemState;
	Состояние: DataCompositionSettingsItemState;
	Name: string;
	Имя: string;
	ID: string;
	Идентификатор: string;
	Filter: DataCompositionFilter;
	Отбор: DataCompositionFilter;
	GroupFields: DataCompositionGroupFields;
	ПоляГруппировки: DataCompositionGroupFields;
	Selection: DataCompositionSelectedFields;
	Выбор: DataCompositionSelectedFields;
	Order: DataCompositionOrder;
	Порядок: DataCompositionOrder;
	ConditionalAppearance: DataCompositionConditionalAppearance;
	УсловноеОформление: DataCompositionConditionalAppearance;
	OutputParameters: DataCompositionGroupOutputParameterValues;
	ПараметрыВывода: DataCompositionGroupOutputParameterValues;
	Parent;
	Родитель;
	Structure: DataCompositionSettingStructureItemCollection;
	Структура: DataCompositionSettingStructureItemCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DataCompositionSettingStructureItemCollection {
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	UserSettingPresentation: string;
	ПредставлениеПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
	Add(... params): DataCompositionTable | DataCompositionChart | DataCompositionNestedObjectSettings | DataCompositionGroup;
	Добавить(... params): DataCompositionTable | DataCompositionChart | DataCompositionNestedObjectSettings | DataCompositionGroup;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTable | DataCompositionChart | DataCompositionNestedObjectSettings | DataCompositionGroup;
	Вставить(... params): DataCompositionTable | DataCompositionChart | DataCompositionNestedObjectSettings | DataCompositionGroup;
	Get(... params): DataCompositionTable | DataCompositionChart | DataCompositionNestedObjectSettings | DataCompositionGroup;
	Получить(... params): DataCompositionTable | DataCompositionChart | DataCompositionNestedObjectSettings | DataCompositionGroup;
}
interface DataCompositionSettings {
	SelectionAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляВыбора: DataCompositionAvailableFields;
	GroupAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляГруппировок: DataCompositionAvailableFields;
	OrderAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляПорядка: DataCompositionAvailableFields;
	DataParametersAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляПараметровДанных: DataCompositionAvailableFields;
	FilterAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляОтбора: DataCompositionAvailableFields;
	StructureItemsFilterAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляОтбораЭлементовСтруктуры: DataCompositionAvailableFields;
	AdditionalFilterAvailableFields: DataCompositionAvailableFields;
	ДоступныеПоляДополнительныхОтборов: DataCompositionAvailableFields;
	AvailableObjects: DataCompositionAvailableSettingsObjects;
	ДоступныеОбъекты: DataCompositionAvailableSettingsObjects;
	DataParameters: DataCompositionDataParameterValues;
	ПараметрыДанных: DataCompositionDataParameterValues;
	Filter: DataCompositionFilter;
	Отбор: DataCompositionFilter;
	Selection: DataCompositionSelectedFields;
	Выбор: DataCompositionSelectedFields;
	Order: DataCompositionOrder;
	Порядок: DataCompositionOrder;
	ConditionalAppearance: DataCompositionConditionalAppearance;
	УсловноеОформление: DataCompositionConditionalAppearance;
	OutputParameters: DataCompositionOutputParameterValues;
	ПараметрыВывода: DataCompositionOutputParameterValues;
	UserFields: DataCompositionUserFields;
	ПользовательскиеПоля: DataCompositionUserFields;
	Parent;
	Родитель;
	Structure: DataCompositionSettingStructureItemCollection;
	Структура: DataCompositionSettingStructureItemCollection;
	AdditionalProperties: Structure;
	ДополнительныеСвойства: Structure;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionTable | DataCompositionChart | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionChartGroup | DataCompositionTableGroup;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionTable | DataCompositionChart | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionChartGroup | DataCompositionTableGroup;
	ItemSettings(... params): DataCompositionSettings;
	НастройкиЭлемента(... params): DataCompositionSettings;
	HasItemSelection(... params): boolean;
	НаличиеВыбораУЭлемента(... params): boolean;
	HasItemFilter(... params): boolean;
	НаличиеОтбораУЭлемента(... params): boolean;
	HasItemOrder(... params): boolean;
	НаличиеПорядкаУЭлемента(... params): boolean;
	HasItemConditionalAppearance(... params): boolean;
	НаличиеУсловногоОформленияУЭлемента(... params): boolean;
	HasItemOutputParameters(... params): boolean;
	НаличиеПараметровВыводаУЭлемента(... params): boolean;
	ClearItemSelection(... params): void;
	ОчиститьВыборЭлемента(... params): void;
	ClearItemFilter(... params): void;
	ОчиститьОтборЭлемента(... params): void;
	ClearItemOrder(... params): void;
	ОчиститьПорядокЭлемента(... params): void;
	ClearItemConditionalAppearance(... params): void;
	ОчиститьУсловноеОформлениеЭлемента(... params): void;
	ClearItemOutputParameters(... params): void;
	ОчиститьПараметрыВыводаЭлемента(... params): void;
}
declare type НастройкиКомпоновкиДанных = DataCompositionSettings;
interface NestedDataCompositionSchema {
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	Schema: DataCompositionSchema;
	Схема: DataCompositionSchema;
	Settings: DataCompositionSettings;
	Настройки: DataCompositionSettings;
}
interface NestedDataCompositionSchemas {
	Add(): NestedDataCompositionSchema;
	Добавить(): NestedDataCompositionSchema;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): NestedDataCompositionSchema;
	Найти(... params): NestedDataCompositionSchema;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): NestedDataCompositionSchema;
	Вставить(... params): NestedDataCompositionSchema;
	Get(... params): NestedDataCompositionSchema;
	Получить(... params): NestedDataCompositionSchema;
}
interface DataCompositionExpressionAreaParameter {
	Name: string;
	Имя: string;
	Expression: string;
	Выражение: string;
}
interface DataCompositionDetailsAreaParameterFieldExpressions {
	Add(): DataCompositionExpressionAreaParameter;
	Добавить(): DataCompositionExpressionAreaParameter;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionExpressionAreaParameter;
	Найти(... params): DataCompositionExpressionAreaParameter;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionExpressionAreaParameter;
	Вставить(... params): DataCompositionExpressionAreaParameter;
	Get(... params): DataCompositionExpressionAreaParameter;
	Получить(... params): DataCompositionExpressionAreaParameter;
}
interface DataCompositionDetailsProcessingAction {
}
interface DataCompositionDetailsAreaParameter {
	Name: string;
	Имя: string;
	FieldExpressions: DataCompositionDetailsAreaParameterFieldExpressions;
	ВыраженияПолей: DataCompositionDetailsAreaParameterFieldExpressions;
	MainAction: DataCompositionDetailsProcessingAction;
	ОсновноеДействие: DataCompositionDetailsProcessingAction;
}
interface DataCompositionAreaParameters {
	Add(... params): DataCompositionExpressionAreaParameter | DataCompositionDetailsAreaParameter;
	Добавить(... params): DataCompositionExpressionAreaParameter | DataCompositionDetailsAreaParameter;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionExpressionAreaParameter | DataCompositionDetailsAreaParameter;
	Найти(... params): DataCompositionExpressionAreaParameter | DataCompositionDetailsAreaParameter;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionExpressionAreaParameter | DataCompositionDetailsAreaParameter;
	Вставить(... params): DataCompositionExpressionAreaParameter | DataCompositionDetailsAreaParameter;
	Get(... params): DataCompositionExpressionAreaParameter | DataCompositionDetailsAreaParameter;
	Получить(... params): DataCompositionExpressionAreaParameter | DataCompositionDetailsAreaParameter;
}
interface DataCompositionSchemaTemplateDescription {
	Name: string;
	Имя: string;
	Template;
	Макет;
	Parameters: DataCompositionAreaParameters;
	Параметры: DataCompositionAreaParameters;
}
interface DataCompositionSchemaTemplateDescriptions {
	Add(): DataCompositionSchemaTemplateDescription;
	Добавить(): DataCompositionSchemaTemplateDescription;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionSchemaTemplateDescription;
	Найти(... params): DataCompositionSchemaTemplateDescription;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaTemplateDescription;
	Вставить(... params): DataCompositionSchemaTemplateDescription;
	Get(... params): DataCompositionSchemaTemplateDescription;
	Получить(... params): DataCompositionSchemaTemplateDescription;
}
interface DataCompositionSchemaFieldTemplate {
	Field: string;
	Поле: string;
	Template: string;
	Макет: string;
}
interface DataCompositionSchemaFieldTemplates {
	Add(): DataCompositionSchemaFieldTemplate;
	Добавить(): DataCompositionSchemaFieldTemplate;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionSchemaFieldTemplate;
	Найти(... params): DataCompositionSchemaFieldTemplate;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaFieldTemplate;
	Вставить(... params): DataCompositionSchemaFieldTemplate;
	Get(... params): DataCompositionSchemaFieldTemplate;
	Получить(... params): DataCompositionSchemaFieldTemplate;
}
interface DataCompositionAreaTemplateType {
}
interface DataCompositionSchemaGroupTemplate {
	GroupFields: ArrayV8;
	ПоляГруппировки: ArrayV8;
	GroupName: string;
	ИмяГруппировки: string;
	TemplateType: DataCompositionAreaTemplateType;
	ТипМакета: DataCompositionAreaTemplateType;
	Template: string;
	Макет: string;
}
interface DataCompositionSchemaGroupTemplates {
	Add(): DataCompositionSchemaGroupTemplate;
	Добавить(): DataCompositionSchemaGroupTemplate;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaGroupTemplate;
	Вставить(... params): DataCompositionSchemaGroupTemplate;
	Get(... params): DataCompositionSchemaGroupTemplate;
	Получить(... params): DataCompositionSchemaGroupTemplate;
}
interface DataCompositionSettingsVariant {
	Name: string;
	Имя: string;
	Presentation: string;
	Представление: string;
	Settings: DataCompositionSettings;
	Настройки: DataCompositionSettings;
}
interface DataCompositionSettingsVariants {
	Add(): DataCompositionSettingsVariant;
	Добавить(): DataCompositionSettingsVariant;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionSettingsVariant;
	Найти(... params): DataCompositionSettingsVariant;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSettingsVariant;
	Вставить(... params): DataCompositionSettingsVariant;
	Get(... params): DataCompositionSettingsVariant;
	Получить(... params): DataCompositionSettingsVariant;
}
interface DataCompositionSchema {
	DataSources: DataCompositionSchemaDataSources;
	ИсточникиДанных: DataCompositionSchemaDataSources;
	DataSets: DataCompositionSchemaDataSets;
	НаборыДанных: DataCompositionSchemaDataSets;
	CalculatedFields: DataCompositionSchemaCalculatedFields;
	ВычисляемыеПоля: DataCompositionSchemaCalculatedFields;
	TotalFields: DataCompositionSchemaTotalFields;
	ПоляИтога: DataCompositionSchemaTotalFields;
	DataSetLinks: DataCompositionSchemaDataSetLinks;
	СвязиНаборовДанных: DataCompositionSchemaDataSetLinks;
	Parameters: DataCompositionSchemaParameters;
	Параметры: DataCompositionSchemaParameters;
	NestedDataCompositionSchema: NestedDataCompositionSchemas;
	ВложенныеСхемыКомпоновкиДанных: NestedDataCompositionSchemas;
	Templates: DataCompositionSchemaTemplateDescriptions;
	Макеты: DataCompositionSchemaTemplateDescriptions;
	FieldTemplates: DataCompositionSchemaFieldTemplates;
	МакетыПолей: DataCompositionSchemaFieldTemplates;
	GroupTemplates: DataCompositionSchemaGroupTemplates;
	МакетыГруппировок: DataCompositionSchemaGroupTemplates;
	GroupHeaderTemplates: DataCompositionSchemaGroupTemplates;
	МакетыЗаголовковГруппировок: DataCompositionSchemaGroupTemplates;
	TotalFieldsTemplates;
	МакетыПолейИтога;
	DefaultSettings: DataCompositionSettings;
	НастройкиПоУмолчанию: DataCompositionSettings;
	SettingVariants: DataCompositionSettingsVariants;
	ВариантыНастроек: DataCompositionSettingsVariants;
}
declare type СхемаКомпоновкиДанных = DataCompositionSchema;
interface SpreadsheetDocumentDetailUse {
}
interface VerticalAlign {
}
interface SpreadsheetDocumentTextPlacementType {
}
interface SpreadsheetDocumentPatternType {
}
interface Line {
	LineType;
	ТипЛинии;
	Width: number;
	Толщина: number;
	Gap: boolean;
	Отступ: boolean;
}
declare type Линия = Line;
interface SpreadsheetDocumentDrawingType {
}
interface PictureSize {
}
interface SpreadsheetDocumentAreaFillType {
}
interface SpreadsheetDocumentDrawing {
	Text: string;
	Текст: string;
	Details;
	Расшифровка;
	VerticalAlign: VerticalAlign;
	ВертикальноеПоложение: VerticalAlign;
	HorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложение: HorizontalAlign;
	Print: boolean;
	ВыводитьНаПечать: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	Pattern: SpreadsheetDocumentPatternType;
	Узор: SpreadsheetDocumentPatternType;
	PatternColor: Color;
	ЦветУзора: Color;
	Line: Line;
	Линия: Line;
	LineColor: Color;
	ЦветЛинии: Color;
	Font: Font;
	Шрифт: Font;
	DrawingType: SpreadsheetDocumentDrawingType;
	ТипРисунка: SpreadsheetDocumentDrawingType;
	TextPlacement: SpreadsheetDocumentTextPlacementType;
	РазмещениеТекста: SpreadsheetDocumentTextPlacementType;
	MarkNegatives: boolean;
	ВыделятьОтрицательные: boolean;
	TextOrientation: number;
	ОриентацияТекста: number;
	AutoSize: boolean;
	АвтоРазмер: boolean;
	Protection: boolean;
	Защита: boolean;
	Object;
	Объект;
	HyperLink: boolean;
	ГиперСсылка: boolean;
	Picture: Picture;
	Картинка: Picture;
	PictureSize: PictureSize;
	РазмерКартинки: PictureSize;
	Name: string;
	Имя: string;
	LeftBorder: boolean;
	ГраницаСлева: boolean;
	TopBorder: boolean;
	ГраницаСверху: boolean;
	RightBorder: boolean;
	ГраницаСправа: boolean;
	BottomBorder: boolean;
	ГраницаСнизу: boolean;
	Value;
	Значение;
	ContainsValue: boolean;
	СодержитЗначение: boolean;
	Control;
	ЭлементУправления;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Format: string;
	Формат: string;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	AutoMarkIncomplete: boolean;
	АвтоОтметкаНезаполненного: boolean;
	MarkIncomplete: boolean;
	ОтметкаНезаполненного: boolean;
	Indent: number;
	Отступ: number;
	FillType: SpreadsheetDocumentAreaFillType;
	Заполнение: SpreadsheetDocumentAreaFillType;
	Parameter: string;
	Параметр: string;
	DetailsParameter: string;
	ПараметрРасшифровки: string;
	EditFormat: string;
	ФорматРедактирования: string;
	Mask: string;
	Маска: string;
	Place(... params): void;
	Расположить(... params): void;
	SetControl(... params): void;
	УстановитьЭлементУправления(... params): void;
}
interface SpreadsheetDocumentCellAreaType {
}
interface TextPositionRelativeToPicture {
}
interface SpreadsheetDocumentRange {
	Text: string;
	Текст: string;
	Details;
	Расшифровка;
	DetailsUse: SpreadsheetDocumentDetailUse;
	ИспользованиеРасшифровки: SpreadsheetDocumentDetailUse;
	Font: Font;
	Шрифт: Font;
	VerticalAlign: VerticalAlign;
	ВертикальноеПоложение: VerticalAlign;
	HorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложение: HorizontalAlign;
	BySelectedColumns: boolean;
	ПоВыделеннымКолонкам: boolean;
	TextPlacement: SpreadsheetDocumentTextPlacementType;
	РазмещениеТекста: SpreadsheetDocumentTextPlacementType;
	MarkNegatives: boolean;
	ВыделятьОтрицательные: boolean;
	BackColor: Color;
	ЦветФона: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	TextColor: Color;
	ЦветТекста: Color;
	RowHeight: number;
	ВысотаСтроки: number;
	AutoRowHeight: boolean;
	АвтоВысотаСтроки: boolean;
	ColumnWidth: number;
	ШиринаКолонки: number;
	Protection: boolean;
	Защита: boolean;
	TextOrientation: number;
	ОриентацияТекста: number;
	Pattern: SpreadsheetDocumentPatternType;
	Узор: SpreadsheetDocumentPatternType;
	PatternColor: Color;
	ЦветУзора: Color;
	Visible: boolean;
	Видимость: boolean;
	Comment: SpreadsheetDocumentDrawing;
	Примечание: SpreadsheetDocumentDrawing;
	Name: string;
	Имя: string;
	Value;
	Значение;
	ContainsValue: boolean;
	СодержитЗначение: boolean;
	Control;
	ЭлементУправления;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	StayWithNext: boolean;
	ВместеСоСледующим: boolean;
	PageTop: boolean;
	НачалоСтраницы: boolean;
	PageBottom: boolean;
	КонецСтраницы: boolean;
	Format: string;
	Формат: string;
	LeftBorder: Line;
	ГраницаСлева: Line;
	TopBorder: Line;
	ГраницаСверху: Line;
	RightBorder: Line;
	ГраницаСправа: Line;
	BottomBorder: Line;
	ГраницаСнизу: Line;
	Hyperlink: boolean;
	Гиперссылка: boolean;
	AreaType: SpreadsheetDocumentCellAreaType;
	ТипОбласти: SpreadsheetDocumentCellAreaType;
	Left: number;
	Лево: number;
	Right: number;
	Право: number;
	Top: number;
	Верх: number;
	Bottom: number;
	Низ: number;
	AutoMarkIncomplete: boolean;
	АвтоОтметкаНезаполненного: boolean;
	MarkIncomplete: boolean;
	ОтметкаНезаполненного: boolean;
	Indent: number;
	Отступ: number;
	AutoIndent: number;
	АвтоОтступ: number;
	FillType: SpreadsheetDocumentAreaFillType;
	Заполнение: SpreadsheetDocumentAreaFillType;
	Parameter: string;
	Параметр: string;
	DetailsParameter: string;
	ПараметрРасшифровки: string;
	PictureParameter: string;
	ПараметрКартинки: string;
	EditFormat: string;
	ФорматРедактирования: string;
	ColumnSizeChangeMode: boolean;
	РежимИзмененияРазмераКолонки: boolean;
	Mask: string;
	Маска: string;
	Picture: Picture;
	Картинка: Picture;
	PictureSize: PictureSize;
	РазмерКартинки: PictureSize;
	PictureHorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложениеКартинки: HorizontalAlign;
	PictureVerticalAlign: VerticalAlign;
	ВертикальноеПоложениеКартинки: VerticalAlign;
	TextPositionRelativeToPicture: TextPositionRelativeToPicture;
	ПоложениеТекстаОтносительноКартинки: TextPositionRelativeToPicture;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	WidthWeightFactor: number;
	ВесовойКоэффициентШирины: number;
	Merge(): void;
	Объединить(): void;
	UndoMerge(): void;
	Разъединить(): void;
	Clear(... params): void;
	Очистить(... params): void;
	Group(... params): void;
	Сгруппировать(... params): void;
	Ungroup(): void;
	Разгруппировать(): void;
	Outline(... params): void;
	Обвести(... params): void;
	SetControl(... params): void;
	УстановитьЭлементУправления(... params): void;
	CreateFormatOfRows(): void;
	СоздатьФорматСтрок(): void;
}
interface SpreadsheetDocumentStepDirectionType {
}
interface SpreadsheetDocumentDrawingCollection {
	Add(... params): SpreadsheetDocumentDrawing;
	Добавить(... params): SpreadsheetDocumentDrawing;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): SpreadsheetDocumentDrawing;
	Получить(... params): SpreadsheetDocumentDrawing;
}
interface SpreadsheetDocumentTemplateParameters {
	Count(): number;
	Количество(): number;
	Fill(... params): void;
	Заполнить(... params): void;
	Get(... params);
	Получить(... params);
	Set(... params): void;
	Установить(... params): void;
}
interface SpreadsheetDocumentAreaCollection {
	Count();
	Количество();
	IndexOf(... params);
	Индекс(... params);
	Find(... params): SpreadsheetDocumentDrawing | SpreadsheetDocumentRange;
	Найти(... params): SpreadsheetDocumentDrawing | SpreadsheetDocumentRange;
	Get(... params): SpreadsheetDocumentDrawing | SpreadsheetDocumentRange;
	Получить(... params): SpreadsheetDocumentDrawing | SpreadsheetDocumentRange;
}
interface SpreadsheetDocumentHeaderFooter {
	LeftText: string;
	ТекстСлева: string;
	RightText: string;
	ТекстСправа: string;
	CenterText: string;
	ТекстВЦентре: string;
	Font: Font;
	Шрифт: Font;
	VerticalAlign: VerticalAlign;
	ВертикальноеПоложение: VerticalAlign;
	StartPage: number;
	НачальнаяСтраница: number;
	Enabled: number;
	Выводить: number;
}
interface ComparisonType {
}
interface FilterItem {
	Use: boolean;
	Использование: boolean;
	Value;
	Значение;
	ComparisonType: ComparisonType;
	ВидСравнения: ComparisonType;
	ValueFrom;
	ЗначениеС;
	ValueTo;
	ЗначениеПо;
	Name: string;
	Имя: string;
	Presentation: string;
	Представление: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	DataPath;
	ПутьКДанным;
	Set(... params): void;
	Установить(... params): void;
}
interface CustomField {
	Name: string;
	Имя: string;
	Presentation: string;
	Представление: string;
	ValueList: ValueList;
	СписокЗначений: ValueList;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Dimension: boolean;
	Измерение: boolean;
	Field: boolean;
	Поле: boolean;
	Filter: boolean;
	Отбор: boolean;
	Order: boolean;
	Порядок: boolean;
	DataPath: string;
	ПутьКДанным: string;
	Fields: CustomFields;
	Поля: CustomFields;
	Parent: CustomField;
	Родитель: CustomField;
}
interface CustomFields {
	Add(... params): CustomField;
	Добавить(... params): CustomField;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): CustomField;
	Найти(... params): CustomField;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): CustomField;
	Вставить(... params): CustomField;
	Get(... params): CustomField;
	Получить(... params): CustomField;
}
interface Filter {
	Reset(): void;
	Сбросить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): FilterItem;
	Найти(... params): FilterItem;
	Add(... params): FilterItem;
	Добавить(... params): FilterItem;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	SetAvailableFields(... params): void;
	УстановитьДоступныеПоля(... params): void;
	GetAvailableFields(): CustomFields;
	ПолучитьДоступныеПоля(): CustomFields;
	Get(... params): FilterItem;
	Получить(... params): FilterItem;
}
interface ReportBuilderDimension {
	Template: SpreadsheetDocument;
	Макет: SpreadsheetDocument;
	HierarchyTemplate: SpreadsheetDocument;
	МакетИерархии: SpreadsheetDocument;
	LevelTemplates: ArrayV8;
	МакетыУровней: ArrayV8;
	LevelFooterTemplates;
	МакетыПодваловУровней;
	FooterTemplate;
	МакетПодвала;
	HierarchyFooterTemplate;
	МакетПодвалаИерархии;
	Name;
	Имя;
	DimensionType;
	ТипИзмерения;
	DataPath;
	ПутьКДанным;
	Presentation;
	Представление;
}
interface ReportBuilderDimensions {
	Add(... params): ReportBuilderDimension;
	Добавить(... params): ReportBuilderDimension;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): ReportBuilderDimension;
	Найти(... params): ReportBuilderDimension;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): ReportBuilderDimension;
	Вставить(... params): ReportBuilderDimension;
	Get(... params): ReportBuilderDimension;
	Получить(... params): ReportBuilderDimension;
}
interface SortDirection {
}
interface OrderingItem {
	Data: string;
	Данные: string;
	Presentation: string;
	Представление: string;
	Direction: SortDirection;
	Направление: SortDirection;
	DataPath;
	ПутьКДанным;
	Name: string;
	Имя: string;
}
interface Order {
	Clear(): void;
	Очистить(): void;
	Set(... params): void;
	Установить(... params): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): OrderingItem;
	Получить(... params): OrderingItem;
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	SetAvailableFields(... params): void;
	УстановитьДоступныеПоля(... params): void;
	GetAvailableFields(): CustomFields;
	ПолучитьДоступныеПоля(): CustomFields;
	Find(... params): OrderingItem;
	Найти(... params): OrderingItem;
}
interface ReportBuilderDetailsFillType {
}
interface QueryResultColumn {
	Name: string;
	Имя: string;
	Width: number;
	Ширина: number;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
}
interface QueryResultColumnsCollection {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): QueryResultColumn;
	Найти(... params): QueryResultColumn;
	Get(... params): QueryResultColumn;
	Получить(... params): QueryResultColumn;
}
interface QueryRecordType {
}
interface QueryResultSelection {
	Next();
	Следующий();
	Select(... params): QueryResultSelection;
	Выбрать(... params): QueryResultSelection;
	Group(): string;
	Группировка(): string;
	RecordType(): QueryRecordType;
	ТипЗаписи(): QueryRecordType;
	Level(): number;
	Уровень(): number;
	NextByFieldValue(... params): boolean;
	СледующийПоЗначениюПоля(... params): boolean;
	FindNext(... params): boolean;
	НайтиСледующий(... params): boolean;
	Count(): number;
	Количество(): number;
	Reset();
	Сбросить();
	Get(... params);
	Получить(... params);
	Owner(): QueryResult;
	Владелец(): QueryResult;
}
interface ValueTreeColumn {
	Name: string;
	Имя: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Title: string;
	Заголовок: string;
	Width: number;
	Ширина: number;
}
interface ValueTreeColumnCollection {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Insert(... params): ValueTreeColumn;
	Вставить(... params): ValueTreeColumn;
	Add(... params): ValueTreeColumn;
	Добавить(... params): ValueTreeColumn;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): ValueTreeColumn;
	Найти(... params): ValueTreeColumn;
	Get(... params): ValueTreeColumn;
	Получить(... params): ValueTreeColumn;
}
interface ValueTreeRow {
	Parent: ValueTreeRow;
	Родитель: ValueTreeRow;
	Rows: ValueTreeRowCollection;
	Строки: ValueTreeRowCollection;
	Get(... params);
	Получить(... params);
	Set(... params): void;
	Установить(... params): void;
	Level(): number;
	Уровень(): number;
	Owner();
	Владелец();
}
interface ValueTreeRowCollection {
	Parent: ValueTreeRow;
	Родитель: ValueTreeRow;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(): ValueTreeRow;
	Добавить(): ValueTreeRow;
	Insert(... params): ValueTreeRow;
	Вставить(... params): ValueTreeRow;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Find(... params): ValueTreeRow;
	Найти(... params): ValueTreeRow;
	FindRows(... params): ArrayV8;
	НайтиСтроки(... params): ArrayV8;
	Total(... params): number;
	Итог(... params): number;
	Sort(... params): void;
	Сортировать(... params): void;
	LoadColumn(... params): void;
	ЗагрузитьКолонку(... params): void;
	UnloadColumn(... params): ArrayV8;
	ВыгрузитьКолонку(... params): ArrayV8;
	Get(... params): ValueTreeRow;
	Получить(... params): ValueTreeRow;
}
interface ValueTree {
	Columns: ValueTreeColumnCollection;
	Колонки: ValueTreeColumnCollection;
	Rows: ValueTreeRowCollection;
	Строки: ValueTreeRowCollection;
	Copy(): ValueTree;
	Скопировать(): ValueTree;
	ChooseRow(... params): ValueTreeRow;
	ВыбратьСтроку(... params): ValueTreeRow;
}
declare type ДеревоЗначений = ValueTree;
interface QueryResult {
	Columns: QueryResultColumnsCollection;
	Колонки: QueryResultColumnsCollection;
	Select(... params): QueryResultSelection;
	Выбрать(... params): QueryResultSelection;
	Unload(... params): ValueTable | ValueTree;
	Выгрузить(... params): ValueTable | ValueTree;
	IsEmpty(): boolean;
	Пустой(): boolean;
}
interface ReportBuilderField {
	Name: string;
	Имя: string;
	DataPath: string;
	ПутьКДанным: string;
	Presentation: string;
	Представление: string;
}
interface ReportBuilderFields {
	Add(... params): ReportBuilderField;
	Добавить(... params): ReportBuilderField;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): ReportBuilderField;
	Найти(... params): ReportBuilderField;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): ReportBuilderField;
	Вставить(... params): ReportBuilderField;
	Get(... params): ReportBuilderField;
	Получить(... params): ReportBuilderField;
}
interface DimensionPlacementType {
}
interface DimensionAttributePlacementType {
}
interface TotalPlacementType {
}
interface AppearanceAreaType {
}
interface AppearanceAreaItem {
	DataPath: string;
	ПутьКДанным: string;
	Title: string;
	Заголовок: string;
	AreaType: AppearanceAreaType;
	ТипОбласти: AppearanceAreaType;
}
interface AppearanceArea {
	Count(): number;
	Количество(): number;
	Add(... params): AppearanceAreaItem;
	Добавить(... params): AppearanceAreaItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	GetAvailableFields(): CustomFields;
	ПолучитьДоступныеПоля(): CustomFields;
	SetAvailableFields(... params): void;
	УстановитьДоступныеПоля(... params): void;
}
declare type ОбластьОформления = AppearanceArea;
interface AppearanceSetting {
}
declare type НастройкаОформления = AppearanceSetting;
interface ConditionalAppearanceItem {
	Use: boolean;
	Использование: boolean;
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	Area: AppearanceArea;
	Область: AppearanceArea;
	Filter: Filter;
	Отбор: Filter;
	Appearance: AppearanceSetting;
	Оформление: AppearanceSetting;
}
interface ConditionalAppearance {
	Count(): number;
	Количество(): number;
	Get(... params): ConditionalAppearanceItem;
	Получить(... params): ConditionalAppearanceItem;
	Add(... params): ConditionalAppearanceItem;
	Добавить(... params): ConditionalAppearanceItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Insert(... params): ConditionalAppearanceItem;
	Вставить(... params): ConditionalAppearanceItem;
	Move(... params): void;
	Сдвинуть(... params): void;
	SetAvailableFields(... params): void;
	УстановитьДоступныеПоля(... params): void;
	GetAvailableFields(): AppearanceArea;
	ПолучитьДоступныеПоля(): AppearanceArea;
}
declare type УсловноеОформление = ConditionalAppearance;
interface DataSourceDescriptionColumn {
	Dimension: boolean;
	Измерение: boolean;
	Field: boolean;
	Поле: boolean;
	Order: boolean;
	Порядок: boolean;
	Filter: boolean;
	Отбор: boolean;
	Total: string;
	Итог: string;
	Name: string;
	Имя: string;
	DataPath: string;
	ПутьКДанным: string;
}
interface DataSourceDescriptionColumns {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): DataSourceDescriptionColumn;
	Получить(... params): DataSourceDescriptionColumn;
}
interface DataSourceDescription {
	DataSource;
	ИсточникДанных;
	Columns: DataSourceDescriptionColumns;
	Колонки: DataSourceDescriptionColumns;
}
declare type ОписаниеИсточникаДанных = DataSourceDescription;
interface PresentationAdditionType {
}
interface QueryTempTableColumn {
	Name: string;
	Имя: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
}
interface QueryTempTableColumns {
	Count(): number;
	Количество(): number;
	Find(... params): QueryTempTableColumn;
	Найти(... params): QueryTempTableColumn;
	Get(... params): QueryTempTableColumn;
	Получить(... params): QueryTempTableColumn;
	IndexOf(... params): number;
	Индекс(... params): number;
}
interface QueryTempTable {
	FullName: string;
	ПолноеИмя: string;
	Columns: QueryTempTableColumns;
	Колонки: QueryTempTableColumns;
	GetData(): QueryResult;
	ПолучитьДанные(): QueryResult;
}
interface QueryTempTables {
	Count(): number;
	Количество(): number;
	Find(... params): QueryTempTable;
	Найти(... params): QueryTempTable;
	Get(... params): QueryTempTable;
	Получить(... params): QueryTempTable;
	IndexOf(... params): number;
	Индекс(... params): number;
}
interface TempTablesManager {
	Tables: QueryTempTables;
	Таблицы: QueryTempTables;
	Close(): void;
	Закрыть(): void;
}
declare type МенеджерВременныхТаблиц = TempTablesManager;
interface QueryParameterDescription {
	Name: string;
	Имя: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
}
interface QueryParametersDescription {
	Count(): number;
	Количество(): number;
	Find(... params): QueryParameterDescription;
	Найти(... params): QueryParameterDescription;
}
interface Query {
	Text: string;
	Текст: string;
	Parameters: Structure;
	Параметры: Structure;
	TempTablesManager: TempTablesManager;
	МенеджерВременныхТаблиц: TempTablesManager;
	Execute(): QueryResult;
	Выполнить(): QueryResult;
	SetParameter(... params): void;
	УстановитьПараметр(... params): void;
	FindParameters(): QueryParametersDescription;
	НайтиПараметры(): QueryParametersDescription;
	ExecuteBatch(): ArrayV8;
	ВыполнитьПакет(): ArrayV8;
	ExecuteBatchWithIntermediateData(): ArrayV8;
	ВыполнитьПакетСПромежуточнымиДанными(): ArrayV8;
}
declare type Запрос = Query;
interface ReportBuilderSettings {
}
interface ReportBuilder {
	Text: string;
	Текст: string;
	Filter: Filter;
	Отбор: Filter;
	AvailableFields: CustomFields;
	ДоступныеПоля: CustomFields;
	RowDimensions: ReportBuilderDimensions;
	ИзмеренияСтроки: ReportBuilderDimensions;
	ColumnDimensions: ReportBuilderDimensions;
	ИзмеренияКолонки: ReportBuilderDimensions;
	PutDetailRecords: boolean;
	ВыводитьДетальныеЗаписи: boolean;
	AutoDetailRecords: boolean;
	АвтоДетальныеЗаписи: boolean;
	DetailRecordsTemplate: string | SpreadsheetDocument;
	МакетДетальныхЗаписей: string | SpreadsheetDocument;
	PutReportHeader: boolean;
	ВыводитьЗаголовокОтчета: boolean;
	ReportHeaderTemplate: string | SpreadsheetDocument;
	МакетЗаголовкаОтчета: string | SpreadsheetDocument;
	PutReportFooter: boolean;
	ВыводитьПодвалОтчета: boolean;
	ReportFooterTemplate: string | SpreadsheetDocument;
	МакетПодвалаОтчета: string | SpreadsheetDocument;
	PutTableHeader: boolean;
	ВыводитьШапкуТаблицы: boolean;
	TableHeaderTemplate: string | SpreadsheetDocument;
	МакетШапкиТаблицы: string | SpreadsheetDocument;
	PutTableFooter: boolean;
	ВыводитьПодвалТаблицы: boolean;
	TableFooterTemplate: string | SpreadsheetDocument;
	МакетПодвалаТаблицы: string | SpreadsheetDocument;
	Order: Order;
	Порядок: Order;
	DetailFillType: ReportBuilderDetailsFillType;
	ЗаполнениеРасшифровки: ReportBuilderDetailsFillType;
	PutOveralls: boolean;
	ВыводитьОбщиеИтоги: boolean;
	OverallsTemplate: string | SpreadsheetDocument;
	МакетОбщихИтогов: string | SpreadsheetDocument;
	Parameters: Structure;
	Параметры: Structure;
	Template: SpreadsheetDocument;
	Макет: SpreadsheetDocument;
	Result: QueryResult;
	Результат: QueryResult;
	SelectedFields: ReportBuilderFields;
	ВыбранныеПоля: ReportBuilderFields;
	DimensionsPlacementOnRows: DimensionPlacementType;
	РазмещениеИзмеренийВСтроках: DimensionPlacementType;
	DimensionAttributePlacementInRows: DimensionAttributePlacementType;
	РазмещениеРеквизитовИзмеренийВСтроках: DimensionAttributePlacementType;
	DimensionsPlacementOnColumns: DimensionPlacementType;
	РазмещениеИзмеренийВКолонках: DimensionPlacementType;
	DimensionAttributePlacementInColumns: DimensionAttributePlacementType;
	РазмещениеРеквизитовИзмеренийВКолонках: DimensionAttributePlacementType;
	AppearanceTemplate: SpreadsheetDocument;
	МакетОформления: SpreadsheetDocument;
	TotalsPlacementOnRows: TotalPlacementType;
	РазмещениеИтоговВСтроках: TotalPlacementType;
	TotalsPlacementOnColumns: TotalPlacementType;
	РазмещениеИтоговВКолонках: TotalPlacementType;
	HeaderText: string;
	ТекстЗаголовка: string;
	ShowStatus: boolean;
	ОтображатьСостояние: boolean;
	ProcessUserInterruption: boolean;
	ОбрабатыватьПрерываниеПользователя: boolean;
	ConditionalAppearance: ConditionalAppearance;
	УсловноеОформление: ConditionalAppearance;
	DataSource: DataSourceDescription;
	ИсточникДанных: DataSourceDescription;
	PresentationAdding: PresentationAdditionType;
	ДобавлениеПредставлений: PresentationAdditionType;
	GetQuery(): Query;
	ПолучитьЗапрос(): Query;
	Put(... params): void;
	Вывести(... params): void;
	Execute(): void;
	Выполнить(): void;
	InitDetails(... params): void;
	НастроитьРасшифровку(... params): void;
	GetSettings(... params): ReportBuilderSettings;
	ПолучитьНастройки(... params): ReportBuilderSettings;
	SetSettings(... params): void;
	УстановитьНастройки(... params): void;
	FillSettings(): void;
	ЗаполнитьНастройки(): void;
	ApplyAppearanceTemplate(): void;
	ОформитьМакет(): void;
}
declare type ПостроительОтчета = ReportBuilder;
interface PivotTableField {
	Name: string;
	Имя: string;
	OpenLevelCount: number;
	КоличествоОткрытыхУровней: number;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Dimension: boolean;
	Измерение: boolean;
	Resource: boolean;
	Ресурс: boolean;
	Attribute: boolean;
	Реквизит: boolean;
	Attributes: FixedArray;
	Реквизиты: FixedArray;
	LevelCount(): number;
	КоличествоУровней(): number;
}
interface PivotTableFieldCollection {
	Count(): number;
	Количество(): number;
	Add(... params): PivotTableField | PivotTableFieldCollection;
	Добавить(... params): PivotTableField | PivotTableFieldCollection;
	Insert(... params): PivotTableField | PivotTableFieldCollection;
	Вставить(... params): PivotTableField | PivotTableFieldCollection;
	Delete(... params): void;
	Удалить(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): PivotTableField | PivotTableFieldCollection;
	Найти(... params): PivotTableField | PivotTableFieldCollection;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Get(... params): PivotTableField | PivotTableFieldCollection;
	Получить(... params): PivotTableField | PivotTableFieldCollection;
}
interface PivotTableRowTotalPosition {
}
interface PivotTableColumnTotalPosition {
}
interface PivotTableLinesShowType {
}
interface PivotTable {
	DataSource: ReportBuilder | QueryResult;
	ИсточникДанных: ReportBuilder | QueryResult;
	RowHeaderArea: SpreadsheetDocumentRange;
	ОбластьЗаголовковСтрок: SpreadsheetDocumentRange;
	ColumnsHeadersArea: SpreadsheetDocumentRange;
	ОбластьЗаголовковКолонок: SpreadsheetDocumentRange;
	DataArea: SpreadsheetDocumentRange;
	ОбластьДанных: SpreadsheetDocumentRange;
	Columns: PivotTableFieldCollection;
	Колонки: PivotTableFieldCollection;
	Rows: PivotTableFieldCollection;
	Строки: PivotTableFieldCollection;
	Data: PivotTableFieldCollection;
	Данные: PivotTableFieldCollection;
	ShowFields: boolean;
	ОтображатьПоля: boolean;
	AutoFixation: boolean;
	АвтоФиксация: boolean;
	Fields: PivotTableFieldCollection;
	Поля: PivotTableFieldCollection;
	Attributes: PivotTableFieldCollection;
	Реквизиты: PivotTableFieldCollection;
	RefreshEnabled: boolean;
	Обновление: boolean;
	RowTotalPosition: PivotTableRowTotalPosition;
	ПоложениеИтоговСтрок: PivotTableRowTotalPosition;
	ColumnsTotalsPosition: PivotTableColumnTotalPosition;
	ПоложениеИтоговКолонок: PivotTableColumnTotalPosition;
	ShowTotalLabels: boolean;
	ОтображатьПодписиИтогов: boolean;
	AppearanceTemplate: SpreadsheetDocument;
	МакетОформления: SpreadsheetDocument;
	DimensionAttributePlacementInRows: DimensionAttributePlacementType;
	РазмещениеРеквизитовИзмеренийВСтроках: DimensionAttributePlacementType;
	DimensionAttributePlacementInColumns: DimensionAttributePlacementType;
	РазмещениеРеквизитовИзмеренийВКолонках: DimensionAttributePlacementType;
	DimensionsPlacementOnRows: DimensionPlacementType;
	РазмещениеИзмеренийВСтроках: DimensionPlacementType;
	DimensionsPlacementOnColumns: DimensionPlacementType;
	РазмещениеИзмеренийВКолонках: DimensionPlacementType;
	ShowLines: PivotTableLinesShowType;
	ОтображатьЛинии: PivotTableLinesShowType;
	GetValues(... params): Structure;
	ПолучитьЗначения(... params): Structure;
	Refresh(): void;
	Обновить(): void;
}
interface EmbeddedTableCollection {
	Add(... params): PivotTable;
	Добавить(... params): PivotTable;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): PivotTable;
	Найти(... params): PivotTable;
	Get(... params): PivotTable;
	Получить(... params): PivotTable;
}
interface SpreadsheetDocumentSelectedAreas {
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params);
	Получить(... params);
	Move(... params);
	Сдвинуть(... params);
	Insert(... params): void;
	Вставить(... params): void;
}
interface PrintAccuracy {
}
interface DuplexPrintingType {
}
interface PagePlacementAlternation {
}
interface SpreadsheetDocument {
	TableWidth: number;
	ШиринаТаблицы: number;
	TableHeight: number;
	ВысотаТаблицы: number;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	Protection: boolean;
	Защита: boolean;
	CurrentArea: SpreadsheetDocumentRange;
	ТекущаяОбласть: SpreadsheetDocumentRange;
	ShowGrid: boolean;
	ОтображатьСетку: boolean;
	ShowHeaders: boolean;
	ОтображатьЗаголовки: boolean;
	FixedTop: number;
	ФиксацияСверху: number;
	FixedLeft: number;
	ФиксацияСлева: number;
	PrintParametersKey: string;
	КлючПараметровПечати: string;
	PrintParametersName: string;
	ИмяПараметровПечати: string;
	WindowOptionsKey: string;
	КлючСохраненияПоложенияОкна: string;
	WindowOptionsName: string;
	ИмяСохраненияПоложенияОкна: string;
	BlackAndWhiteView: boolean;
	ЧерноБелыйПросмотр: boolean;
	StepDirection: SpreadsheetDocumentStepDirectionType;
	НаправлениеПерехода: SpreadsheetDocumentStepDirectionType;
	BackgroundPicture: Picture;
	ФоноваяКартинка: Picture;
	TotalsRight: boolean;
	ИтогиСправа: boolean;
	TotalsBelow: boolean;
	ИтогиСнизу: boolean;
	FixedBackground: boolean;
	ФиксированныйФон: boolean;
	Drawings: SpreadsheetDocumentDrawingCollection;
	Рисунки: SpreadsheetDocumentDrawingCollection;
	Parameters: SpreadsheetDocumentTemplateParameters;
	Параметры: SpreadsheetDocumentTemplateParameters;
	Areas: SpreadsheetDocumentAreaCollection;
	Области: SpreadsheetDocumentAreaCollection;
	GroupBackColor: Color;
	ЦветФонаГруппировки: Color;
	GroupTextColor: Color;
	ЦветТекстаГруппировки: Color;
	HeaderBackColor: Color;
	ЦветФонаЗаголовков: Color;
	HeaderTextColor: Color;
	ЦветТекстаЗаголовков: Color;
	SaveViewProperties: boolean;
	СохранятьСвойстваОтображения: boolean;
	PageOrientation: PageOrientation;
	ОриентацияСтраницы: PageOrientation;
	PrintScale: number;
	МасштабПечати: number;
	Collate: boolean;
	РазборПоКопиям: boolean;
	LeftMargin: number;
	ПолеСлева: number;
	RightMargin: number;
	ПолеСправа: number;
	TopMargin: number;
	ПолеСверху: number;
	BottomMargin: number;
	ПолеСнизу: number;
	HeaderSize: number;
	РазмерКолонтитулаСверху: number;
	FooterSize: number;
	РазмерКолонтитулаСнизу: number;
	FitToPage: boolean;
	АвтоМасштаб: boolean;
	BlackAndWhite: boolean;
	ЧерноБелаяПечать: boolean;
	PrinterName: string;
	ИмяПринтера: string;
	PerPage: number;
	ЭкземпляровНаСтранице: number;
	Copies: number;
	КоличествоЭкземпляров: number;
	RepeatOnRowPrint: SpreadsheetDocumentRange;
	ПовторятьПриПечатиСтроки: SpreadsheetDocumentRange;
	RepeatOnColumnPrint: SpreadsheetDocumentRange;
	ПовторятьПриПечатиКолонки: SpreadsheetDocumentRange;
	PrintArea: SpreadsheetDocumentRange;
	ОбластьПечати: SpreadsheetDocumentRange;
	Header: SpreadsheetDocumentHeaderFooter;
	ВерхнийКолонтитул: SpreadsheetDocumentHeaderFooter;
	Footer: SpreadsheetDocumentHeaderFooter;
	НижнийКолонтитул: SpreadsheetDocumentHeaderFooter;
	EmbeddedTables: EmbeddedTableCollection;
	ВстроенныеТаблицы: EmbeddedTableCollection;
	LanguageCode: string;
	КодЯзыка: string;
	ShowGroups: boolean;
	ОтображатьГруппировки: boolean;
	SelectedAreas: SpreadsheetDocumentSelectedAreas;
	ВыделенныеОбласти: SpreadsheetDocumentSelectedAreas;
	Output: UseOutput;
	Вывод: UseOutput;
	UsedFileName: string;
	ИспользуемоеИмяФайла: string;
	PageSize: string;
	РазмерСтраницы: string;
	PageWidth: number;
	ШиринаСтраницы: number;
	PageHeight: number;
	ВысотаСтраницы: number;
	PrintAccuracy: PrintAccuracy;
	ТочностьПечати: PrintAccuracy;
	DuplexPrinting: DuplexPrintingType;
	ДвусторонняяПечать: DuplexPrintingType;
	PagePlacementAlternation: PagePlacementAlternation;
	ЧередованиеРасположенияСтраниц: PagePlacementAlternation;
	Template: boolean;
	Макет: boolean;
	Read(... params): void;
	Прочитать(... params): void;
	Write(... params): void;
	Записать(... params): void;
	Print(... params): void;
	Напечатать(... params): void;
	Clear(): void;
	Очистить(): void;
	Show(... params): void;
	Показать(... params): void;
	Hide(): void;
	Скрыть(): void;
	Put(... params);
	Вывести(... params);
	Join(... params);
	Присоединить(... params);
	PutVerticalPageBreak(): void;
	ВывестиВертикальныйРазделительСтраниц(): void;
	PutHorizontalPageBreak(): void;
	ВывестиГоризонтальныйРазделительСтраниц(): void;
	CheckPut(... params): boolean;
	ПроверитьВывод(... params): boolean;
	CheckAttachment(... params): boolean;
	ПроверитьПрисоединение(... params): boolean;
	Area(... params): SpreadsheetDocumentRange;
	Область(... params): SpreadsheetDocumentRange;
	StartRowGroup(... params): void;
	НачатьГруппуСтрок(... params): void;
	EndRowGroup(): void;
	ЗакончитьГруппуСтрок(): void;
	StartColumnGroup(... params): void;
	НачатьГруппуКолонок(... params): void;
	EndColumnGroup(): void;
	ЗакончитьГруппуКолонок(): void;
	FindText(... params): SpreadsheetDocumentRange;
	НайтиТекст(... params): SpreadsheetDocumentRange;
	FindValue(... params): SpreadsheetDocumentRange;
	НайтиЗначение(... params): SpreadsheetDocumentRange;
	InsertArea(... params): void;
	ВставитьОбласть(... params): void;
	DeleteArea(... params): void;
	УдалитьОбласть(... params): void;
	GetArea(... params): SpreadsheetDocument;
	ПолучитьОбласть(... params): SpreadsheetDocument;
	StartRowAutoGrouping(): void;
	НачатьАвтогруппировкуСтрок(): void;
	EndRowAutoGrouping(): void;
	ЗакончитьАвтогруппировкуСтрок(): void;
	StartColumnAutoGrouping(): void;
	НачатьАвтогруппировкуКолонок(): void;
	EndColumnAutoGrouping(): void;
	ЗакончитьАвтогруппировкуКолонок(): void;
	RowGroupLevelCount(): number;
	КоличествоУровнейГруппировокСтрок(): number;
	ColumnGroupLevelCount(): number;
	КоличествоУровнейГруппировокКолонок(): number;
	ShowRowGroupLevel(... params): void;
	ПоказатьУровеньГруппировокСтрок(... params): void;
	ShowColumnGroupLevel(... params): void;
	ПоказатьУровеньГруппировокКолонок(... params): void;
	PageCount(): number;
	КоличествоСтраниц(): number;
	BeginWriting(... params): void;
	НачатьЗапись(... params): void;
	GetDataAreaHorizontalSize(): number;
	ПолучитьРазмерОбластиДанныхПоГоризонтали(): number;
	GetDataAreaVerticalSize(): number;
	ПолучитьРазмерОбластиДанныхПоВертикали(): number;
}
declare type ТабличныйДокумент = SpreadsheetDocument;
interface HTMLDocumentShell {
	Get();
	Получить();
	GetText();
	ПолучитьТекст();
	GetHTMLDocument();
	ПолучитьДокументHTML();
	GetCOMObject();
	ПолучитьCOMОбъект();
}
interface TextDocumentTemplateParameters {
	Count(): number;
	Количество(): number;
	Fill(... params): void;
	Заполнить(... params): void;
	Get(... params);
	Получить(... params);
	Set(... params): void;
	Установить(... params): void;
}
interface TextDocument {
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	TemplateLanguageCode: string;
	КодЯзыкаМакета: string;
	Parameters: TextDocumentTemplateParameters;
	Параметры: TextDocumentTemplateParameters;
	LineSeparator: string;
	РазделительСтрок: string;
	Output: UseOutput;
	Вывод: UseOutput;
	UsedFileName: string;
	ИспользуемоеИмяФайла: string;
	LineCount(): number;
	КоличествоСтрок(): number;
	GetLine(... params): string;
	ПолучитьСтроку(... params): string;
	Read(... params): void;
	Прочитать(... params): void;
	InsertLine(... params): void;
	ВставитьСтроку(... params): void;
	AddLine(... params): void;
	ДобавитьСтроку(... params): void;
	ReplaceLine(... params): void;
	ЗаменитьСтроку(... params): void;
	DeleteLine(... params): void;
	УдалитьСтроку(... params): void;
	Show(... params): void;
	Показать(... params): void;
	Clear(): void;
	Очистить(): void;
	SetFileType(... params): void;
	УстановитьТипФайла(... params): void;
	Write(... params): void;
	Записать(... params): void;
	GetText(): string;
	ПолучитьТекст(): string;
	SetText(... params): void;
	УстановитьТекст(... params): void;
	GetArea(... params): TextDocument;
	ПолучитьОбласть(... params): TextDocument;
	Put(... params): void;
	Вывести(... params): void;
	BeginReading(... params): void;
	НачатьЧтение(... params): void;
	BeginWriting(... params): void;
	НачатьЗапись(... params): void;
}
declare type ТекстовыйДокумент = TextDocument;
interface ConnectionStopRequest {
	StopConnection: boolean;
	НеобходимоЗавершить: boolean;
	DisconnectionTime: Date;
	ПринудительноеЗавершение: Date;
}
declare type НеобходимостьЗавершенияСоединения = ConnectionStopRequest;
interface EventLogEventUse {
	Use;
	Использование;
	UseDescription;
	ОписаниеИспользования;
}
declare type ИспользованиеСобытияЖурналаРегистрации = EventLogEventUse;
interface DataBaseConfigurationUpdate {
	State: EnumDataBaseConfigurationUpdateState;
	Состояние: EnumDataBaseConfigurationUpdateState;
	Suspended: boolean;
	Приостановлено: boolean;
	CompletedWithError;
	ЗавершеноСОшибкой;
	ProcessingPercent: number;
	ПроцентОбработки: number;
	ExecutionInformation;
	ИнформацияОВыполнении;
}
declare var Metadata;
declare var Метаданные;
declare var PictureLib: PictureLib;
declare var БиблиотекаКартинок: PictureLib;
declare var FilterCriteria;
declare var КритерииОтбора;
declare var ExchangePlans;
declare var ПланыОбмена;
declare var SessionParameters;
declare var ПараметрыСеанса;
declare var EventLogLevel: EnumEventLogLevel;
declare var УровеньЖурналаРегистрации: EnumEventLogLevel;
declare var EventLogEntryTransactionMode: EnumEventLogEntryTransactionMode;
declare var РежимТранзакцииЗаписиЖурналаРегистрации: EnumEventLogEntryTransactionMode;
declare var EventLogEntryTransactionStatus: EnumEventLogEntryTransactionStatus;
declare var СтатусТранзакцииЗаписиЖурналаРегистрации: EnumEventLogEntryTransactionStatus;
declare var AutoChangeRecord: EnumAutoChangeRecord;
declare var АвтоРегистрацияИзменений: EnumAutoChangeRecord;
declare var AllowedMessageNo: EnumAllowedMessageNo;
declare var ДопустимыйНомерСообщения: EnumAllowedMessageNo;
declare var InfoBaseUsers: InfoBaseUsersManager;
declare var ПользователиИнформационнойБазы: InfoBaseUsersManager;
declare var DataItemSend: EnumDataItemSend;
declare var ОтправкаЭлементаДанных: EnumDataItemSend;
declare var DataItemReceive: EnumDataItemReceive;
declare var ПолучениеЭлементаДанных: EnumDataItemReceive;
declare var StyleColors: StyleColors;
declare var ЦветаСтиля: StyleColors;
declare var StyleFonts: StyleFonts;
declare var ШрифтыСтиля: StyleFonts;
declare var StyleBorders: StyleBorders;
declare var РамкиСтиля: StyleBorders;
declare var WSReferences;
declare var WSСсылки;
declare var FullTextSearchMode: EnumFullTextSearchMode;
declare var РежимПолнотекстовогоПоиска: EnumFullTextSearchMode;
declare var FullTextSearch: FullTextSearchManager;
declare var ПолнотекстовыйПоиск: FullTextSearchManager;
declare var FullTextSearchRepresentationType: EnumFullTextSearchRepresentationType;
declare var ВидОтображенияПолнотекстовогоПоиска: EnumFullTextSearchRepresentationType;
declare var FullTextSearchMetadataUse: EnumFullTextSearchMetadataUse;
declare var ИспользованиеМетаданныхПолнотекстовогоПоиска: EnumFullTextSearchMetadataUse;
declare var BackgroundJobState: EnumBackgroundJobState;
declare var СостояниеФоновогоЗадания: EnumBackgroundJobState;
declare var BackgroundJobs: BackgroundJobsManager;
declare var ФоновыеЗадания: BackgroundJobsManager;
declare var ScheduledJobs: ScheduledJobsManager;
declare var РегламентныеЗадания: ScheduledJobsManager;
declare var AutonumerationInForm: EnumAutonumerationInForm;
declare var АвтонумерацияВФорме: EnumAutonumerationInForm;
declare var SettingsStorages;
declare var ХранилищаНастроек;
declare var SystemSettingsStorage: StandardSettingsStorageManager;
declare var ХранилищеСистемныхНастроек: StandardSettingsStorageManager;
declare var CommonSettingsStorage: StandardSettingsStorageManager | any;
declare var ХранилищеОбщихНастроек: StandardSettingsStorageManager | any;
declare var ReportsUserSettingsStorage: StandardSettingsStorageManager | any;
declare var ХранилищеПользовательскихНастроекОтчетов: StandardSettingsStorageManager | any;
declare var ReportsVariantsStorage: StandardSettingsStorageManager | any;
declare var ХранилищеВариантовОтчетов: StandardSettingsStorageManager | any;
declare var FormDataSettingsStorage: StandardSettingsStorageManager | any;
declare var ХранилищеНастроекДанныхФорм: StandardSettingsStorageManager | any;
declare var StandardCommandsGroup: EnumStandardCommandsGroup;
declare var СтандартнаяГруппаКоманд: EnumStandardCommandsGroup;
declare var DataBaseConfigurationUpdateExecutionInformationItemType: EnumDataBaseConfigurationUpdateExecutionInformationItemType;
declare var ТипЭлементаИнформацииОВыполненииОбновленияКонфигурацииБазыДанных: EnumDataBaseConfigurationUpdateExecutionInformationItemType;
declare var DataBaseConfigurationUpdateState: EnumDataBaseConfigurationUpdateState;
declare var СостояниеОбновленияКонфигурацииБазыДанных: EnumDataBaseConfigurationUpdateState;
declare var ConfigurationExtensions: ConfigurationExtensionsManager;
declare var РасширенияКонфигурации: ConfigurationExtensionsManager;
declare var ConfigurationExtensionsSource: EnumConfigurationExtensionsSource;
declare var ИсточникРасширенийКонфигурации: EnumConfigurationExtensionsSource;
declare var ConfigurationExtensionApplicationIssueSeverity: EnumConfigurationExtensionApplicationIssueSeverity;
declare var ВажностьПроблемыПримененияРасширенияКонфигурации: EnumConfigurationExtensionApplicationIssueSeverity;
declare var DynamicListsUserSettingsStorage: StandardSettingsStorageManager;
declare var ХранилищеПользовательскихНастроекДинамическихСписков: StandardSettingsStorageManager;
declare function BeginTransaction(... params): void;
declare function НачатьТранзакцию(... params): void;
declare function CommitTransaction(): void;
declare function ЗафиксироватьТранзакцию(): void;
declare function RollbackTransaction(): void;
declare function ОтменитьТранзакцию(): void;
declare function TransactionActive(): boolean;
declare function ТранзакцияАктивна(): boolean;
declare function Message(... params): void;
declare function Сообщить(... params): void;
declare function FindMarkedForDeletion(... params): ArrayV8;
declare function НайтиПомеченныеНаУдаление(... params): ArrayV8;
declare function FindByRef(... params): ValueTable;
declare function НайтиПоСсылкам(... params): ValueTable;
declare function DeleteObjects(... params): number;
declare function УдалитьОбъекты(... params): number;
declare function AccessRight(... params): boolean;
declare function ПравоДоступа(... params): boolean;
declare function IsInRole(... params): boolean;
declare function РольДоступна(... params): boolean;
declare function SetExclusiveMode(... params): void;
declare function УстановитьМонопольныйРежим(... params): void;
declare function ExclusiveMode(): boolean;
declare function МонопольныйРежим(): boolean;
declare function NStr(... params): string;
declare function НСтр(... params): string;
declare function GetRealTimeTimestamp(): Date;
declare function ПолучитьОперативнуюОтметкуВремени(): Date;
declare function WriteLogEvent(... params): void;
declare function ЗаписьЖурналаРегистрации(... params): void;
declare function CurrentLanguage(): string | MetadataObject;
declare function ТекущийЯзык(): string | MetadataObject;
declare function ValueToStringInternal(... params): string;
declare function ЗначениеВСтрокуВнутр(... params): string;
declare function ValueFromStringInternal(... params);
declare function ЗначениеИзСтрокиВнутр(... params);
declare function ValueToFile(... params): boolean;
declare function ЗначениеВФайл(... params): boolean;
declare function ValueFromFile(... params);
declare function ЗначениеИзФайла(... params);
declare function ComputerName(): string;
declare function ИмяКомпьютера(): string;
declare function UserName(): string;
declare function ИмяПользователя(): string;
declare function UserFullName(): string;
declare function ПолноеИмяПользователя(): string;
declare function BinDir(): string;
declare function КаталогПрограммы(): string;
declare function TempFilesDir(): string;
declare function КаталогВременныхФайлов(): string;
declare function BeginGettingTempFilesDir(... params): void;
declare function НачатьПолучениеКаталогаВременныхФайлов(... params): void;
declare function CurrentLocaleCode(): string;
declare function ТекущийКодЛокализации(): string;
declare function InfoBaseLocaleCode(): string;
declare function КодЛокализацииИнформационнойБазы(): string;
declare function LocaleCode();
declare function КодЛокализации();
declare function InfoBaseConnectionString(): string;
declare function СтрокаСоединенияИнформационнойБазы(): string;
declare function AccessParameters(... params): AccessParameters;
declare function ПараметрыДоступа(... params): AccessParameters;
declare function UnloadEventLog(... params): void;
declare function ВыгрузитьЖурналРегистрации(... params): void;
declare function CopyEventLog(... params): void;
declare function СкопироватьЖурналРегистрации(... params): void;
declare function ClearEventLog(... params): void;
declare function ОчиститьЖурналРегистрации(... params): void;
declare function ApplicationPresentation(... params): string;
declare function ПредставлениеПриложения(... params): string;
declare function GetInfoBaseConnections(): ArrayV8;
declare function ПолучитьСоединенияИнформационнойБазы(): ArrayV8;
declare function GetInfoBaseSessions(): ArrayV8;
declare function ПолучитьСеансыИнформационнойБазы(): ArrayV8;
declare function GetCurrentInfoBaseSession(): InfoBaseSession;
declare function ПолучитьТекущийСеансИнформационнойБазы(): InfoBaseSession;
declare function InfoBaseConnectionNumber(): number;
declare function НомерСоединенияИнформационнойБазы(): number;
declare function InfoBaseSessionNumber(): number;
declare function НомерСеансаИнформационнойБазы(): number;
declare function EventLogEventPresentation(... params): string;
declare function ПредставлениеСобытияЖурналаРегистрации(... params): string;
declare function GetEventLogUsing(): ArrayV8;
declare function ПолучитьИспользованиеЖурналаРегистрации(): ArrayV8;
declare function SetEventLogUsing(... params): void;
declare function УстановитьИспользованиеЖурналаРегистрации(... params): void;
declare function ConfigurationChanged(): boolean;
declare function КонфигурацияИзменена(): boolean;
declare function DataBaseConfigurationChangedDynamically(): boolean;
declare function КонфигурацияБазыДанныхИзмененаДинамически(): boolean;
declare function GetDBStorageStructureInfo(... params): ValueTable;
declare function ПолучитьСтруктуруХраненияБазыДанных(... params): ValueTable;
declare function SetLockWaitTime(... params): void;
declare function УстановитьВремяОжиданияБлокировкиДанных(... params): void;
declare function GetLockWaitTime(): number;
declare function ПолучитьВремяОжиданияБлокировкиДанных(): number;
declare function SetUserPasswordMinLength(... params): void;
declare function УстановитьМинимальнуюДлинуПаролейПользователей(... params): void;
declare function GetUserPasswordMinLength(): number;
declare function ПолучитьМинимальнуюДлинуПаролейПользователей(): number;
declare function SetUserPasswordStrengthCheck(... params): void;
declare function УстановитьПроверкуСложностиПаролейПользователей(... params): void;
declare function GetUserPasswordStrengthCheck(): boolean;
declare function ПолучитьПроверкуСложностиПаролейПользователей(): boolean;
declare function CurrentSystemLanguage(): string;
declare function ТекущийЯзыкСистемы(): string;
declare function GetConnectionsLock(): ConnectionsLock;
declare function ПолучитьБлокировкуУстановкиСоединений(): ConnectionsLock;
declare function GetSessionsLock(): SessionsLock;
declare function ПолучитьБлокировкуСеансов(): SessionsLock;
declare function SetConnectionsLock(... params): void;
declare function УстановитьБлокировкуУстановкиСоединений(... params): void;
declare function SetSessionsLock(... params): void;
declare function УстановитьБлокировкуСеансов(... params): void;
declare function BriefErrorDescription(... params): string;
declare function КраткоеПредставлениеОшибки(... params): string;
declare function DetailErrorDescription(... params): string;
declare function ПодробноеПредставлениеОшибки(... params): string;
declare function GetCommonTemplate(... params): ActiveDocumentShell | BinaryData | GeographicalSchema | DataCompositionAppearanceTemplate | DataCompositionSchema | SpreadsheetDocument | HTMLDocumentShell | TextDocument;
declare function ПолучитьОбщийМакет(... params): ActiveDocumentShell | BinaryData | GeographicalSchema | DataCompositionAppearanceTemplate | DataCompositionSchema | SpreadsheetDocument | HTMLDocumentShell | TextDocument;
declare function RefreshObjectsNumbering(... params): void;
declare function ОбновитьНумерациюОбъектов(... params): void;
declare function ConnectionStopRequest(): ConnectionStopRequest;
declare function НеобходимостьЗавершенияСоединения(): ConnectionStopRequest;
declare function SetPrivilegedMode(... params): void;
declare function УстановитьПривилегированныйРежим(... params): void;
declare function PrivilegedMode();
declare function ПривилегированныйРежим();
declare function LockDataForEdit(... params): void;
declare function ЗаблокироватьДанныеДляРедактирования(... params): void;
declare function UnlockDataForEdit(... params): void;
declare function РазблокироватьДанныеДляРедактирования(... params): void;
declare function RefreshReusableValues(): void;
declare function ОбновитьПовторноИспользуемыеЗначения(): void;
declare function GetEventLogFilterValues(... params);
declare function ПолучитьЗначенияОтбораЖурналаРегистрации(... params);
declare function SetSafeMode(... params): void;
declare function УстановитьБезопасныйРежим(... params): void;
declare function SafeMode(): boolean;
declare function БезопасныйРежим(): boolean;
declare function SetInfoBaseTimeZone(... params): void;
declare function УстановитьЧасовойПоясИнформационнойБазы(... params): void;
declare function GetInfoBaseTimeZone(): string;
declare function ПолучитьЧасовойПоясИнформационнойБазы(): string;
declare function SetSessionTimeZone(... params): void;
declare function УстановитьЧасовойПоясСеанса(... params): void;
declare function SessionTimeZone(): string;
declare function ЧасовойПоясСеанса(): string;
declare function CurrentSessionDate(): Date;
declare function ТекущаяДатаСеанса(): Date;
declare function GetUserMessages(... params): FixedArray;
declare function ПолучитьСообщенияПользователю(... params): FixedArray;
declare function DaylightTimeOffset(... params): number;
declare function СмещениеЛетнегоВремени(... params): number;
declare function CurrentUniversalDate(): Date;
declare function ТекущаяУниверсальнаяДата(): Date;
declare function ToLocalTime(... params): Date;
declare function МестноеВремя(... params): Date;
declare function ToUniversalTime(... params): Date;
declare function УниверсальноеВремя(... params): Date;
declare function TimeZone(): string;
declare function ЧасовойПояс(): string;
declare function GetAvailableTimeZones(): ArrayV8;
declare function ПолучитьДопустимыеЧасовыеПояса(): ArrayV8;
declare function TimeZonePresentation(... params): string;
declare function ПредставлениеЧасовогоПояса(... params): string;
declare function GetAvailableLocaleCodes(): ArrayV8;
declare function ПолучитьДопустимыеКодыЛокализации(): ArrayV8;
declare function LocaleCodePresentation(... params): string;
declare function ПредставлениеКодаЛокализации(... params): string;
declare function StandardTimeOffset(... params): number;
declare function СмещениеСтандартногоВремени(... params): number;
declare function CurrentRunMode();
declare function ТекущийРежимЗапуска();
declare function GetTempFileName(... params): string;
declare function ПолучитьИмяВременногоФайла(... params): string;
declare function SetEventLogEventUse(... params): void;
declare function УстановитьИспользованиеСобытияЖурналаРегистрации(... params): void;
declare function GetEventLogEventUse(... params): EventLogEventUse;
declare function ПолучитьИспользованиеСобытияЖурналаРегистрации(... params): EventLogEventUse;
declare function RightPresentation(... params): string;
declare function ПредставлениеПрава(... params): string;
declare function VerifyAccessRights(... params): void;
declare function ВыполнитьПроверкуПравДоступа(... params): void;
declare function GetDataBaseConfigurationUpdate(): DataBaseConfigurationUpdate;
declare function ПолучитьОбновлениеКонфигурацииБазыДанных(): DataBaseConfigurationUpdate;
declare function EraseInfoBaseData(): void;
declare function УдалитьДанныеИнформационнойБазы(): void;
declare function SetDataSeparationSafeMode(... params): void;
declare function УстановитьБезопасныйРежимРазделенияДанных(... params): void;
declare function DataSeparationSafeMode(... params): boolean;
declare function БезопасныйРежимРазделенияДанных(... params): boolean;
declare function InitializePredefinedData(): void;
declare function ИнициализироватьПредопределенныеДанные(): void;
declare function ClientApplicationBaseFontCurrentVariant();
declare function ТекущийВариантОсновногоШрифтаКлиентскогоПриложения();
declare function ClientApplicationInterfaceCurrentVariant();
declare function ТекущийВариантИнтерфейсаКлиентскогоПриложения();
declare function SetInfoBasePredefinedDataUpdate(... params): void;
declare function УстановитьОбновлениеПредопределенныхДанныхИнформационнойБазы(... params): void;
declare function GetInfoBasePredefinedData();
declare function ПолучитьОбновлениеПредопределенныхДанныхИнформационнойБазы();
declare function SetPassiveSessionHibernateTime(... params): void;
declare function УстановитьВремяЗасыпанияПассивногоСеанса(... params): void;
declare function GetPassiveSessionHibernateTime(): number;
declare function ПолучитьВремяЗасыпанияПассивногоСеанса(): number;
declare function SetHibernateSessionTerminateTime(... params): void;
declare function УстановитьВремяЗавершенияСпящегоСеанса(... params): void;
declare function GetHibernateSessionTerminateTime(): number;
declare function ПолучитьВремяЗавершенияСпящегоСеанса(): number;
declare function GetConfigurationID(): string;
declare function ПолучитьИдентификаторКонфигурации(): string;
declare function GetLicensingClientName(): string;
declare function ПолучитьИмяКлиентаЛицензирования(): string;
declare function SetLicensingClientParameters(... params): void;
declare function УстановитьНастройкиКлиентаЛицензирования(... params): void;
declare function GetLicensingClientAdditionalParameter(): string;
declare function ПолучитьДополнительныйПараметрКлиентаЛицензирования(): string;
declare function CheckScriptCircularRefs(... params): ValueTable;
declare function ПроверитьЦиклическиеСсылкиВстроенногоЯзыка(... params): ValueTable;
declare function GetExternalResourcesMode(): string;
declare function ПолучитьРежимВнешнихРесурсов(): string;
interface InterfaceControlItem {
	Visible: boolean;
	Видимость: boolean;
	Switchable: boolean;
	Переключаемый: boolean;
}
interface InterfaceControlItemCollection {
	Count(): number;
	Количество(): number;
	SwitchInterface(... params): void;
	ПереключитьИнтерфейс(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): InterfaceControlItem;
	Найти(... params): InterfaceControlItem;
	Get(... params): InterfaceControlItem;
	Получить(... params): InterfaceControlItem;
}
interface EnumWorkingDateMode {
	UseCurrentDate;
	ИспользоватьТекущуюДату;
	Assign;
	Назначать;
}
declare type ПеречислениеРежимРабочейДаты = EnumWorkingDateMode;
interface Style {
}
interface StyleLib {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): Style;
	Получить(... params): Style;
}
interface EnumIntervalBoundVariant {
	WithoutRestriction;
	БезОграничения;
	WorkingDate;
	РабочаяДата;
	BeforeAfter;
	Смещение;
	Week;
	Неделя;
	Month;
	Месяц;
	Quarter;
	Квартал;
	Year;
	Год;
	SpecificDate;
	КонкретнаяДата;
}
declare type ПеречислениеВариантГраницыИнтервала = EnumIntervalBoundVariant;
interface EnumPeriodVariant {
	Year;
	Год;
	Quarter;
	Квартал;
	QuarterFromBegOfYear;
	КварталСНачалаГода;
	Month;
	Месяц;
	MonthFromBegOfQuarter;
	МесяцСНачалаКвартала;
	MonthFromBegOfYear;
	МесяцСНачалаГода;
	Day;
	День;
	DayFromBegOfMonth;
	ДеньСНачалаМесяца;
	DayFromBegOfQuarter;
	ДеньСНачалаКвартала;
	DayFromBegOfYear;
	ДеньСНачалаГода;
	AnyInterval;
	ПроизвольныйИнтервал;
}
declare type ПеречислениеВариантПериода = EnumPeriodVariant;
interface EnumPeriodSettingsVariant {
	Period;
	Период;
	Interval;
	Интервал;
}
declare type ПеречислениеВариантНастройкиПериода = EnumPeriodSettingsVariant;
interface EnumNewRowShowCheckVariant {
	DontCheck;
	НеПроверять;
	FilterMismatchMessage;
	СообщатьОНесоответствииОтбору;
}
declare type ПеречислениеВариантПроверкиОтображенияНовойСтроки = EnumNewRowShowCheckVariant;
interface DialogReturnCode {
}
interface FormDataStructure {
	Property(... params): boolean;
	Свойство(... params): boolean;
}
interface FormGroupType {
}
interface FormDecorationType {
}
interface Key {
}
interface Shortcut {
	Key: Key;
	Клавиша: Key;
	Alt: boolean;
	Ctrl: boolean;
	Shift: boolean;
}
declare type СочетаниеКлавиш = Shortcut;
interface ToolTipRepresentation {
}
interface ItemHorizontalLocation {
}
interface ItemVerticalAlign {
}
interface FormDecoration {
	Name: string;
	Имя: string;
	Type: FormDecorationType;
	Вид: FormDecorationType;
	Visible: boolean;
	Видимость: boolean;
	Title: FormattedString | string;
	Заголовок: FormattedString | string;
	ToolTip: string;
	Подсказка: string;
	Enabled: boolean;
	Доступность: boolean;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	TextColor: Color;
	ЦветТекста: Color;
	Font: Font;
	Шрифт: Font;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
	ContextMenu: FormGroup;
	КонтекстноеМеню: FormGroup;
	Parent: FormGroup | ManagedForm;
	Родитель: FormGroup | ManagedForm;
	SkipOnInput: boolean;
	ПропускатьПриВводе: boolean;
	ToolTipRepresentation: ToolTipRepresentation;
	ОтображениеПодсказки: ToolTipRepresentation;
	ExtendedToolTip: FormDecoration;
	РасширеннаяПодсказка: FormDecoration;
	HorizontalAlignInGroup: ItemHorizontalLocation;
	ГоризонтальноеПоложениеВГруппе: ItemHorizontalLocation;
	VerticalAlignInGroup: ItemVerticalAlign;
	ВертикальноеПоложениеВГруппе: ItemVerticalAlign;
	GetAction(... params);
	ПолучитьДействие(... params);
	SetAction(... params): void;
	УстановитьДействие(... params): void;
}
interface TableRepresentation {
}
interface FormItemTitleLocation {
}
interface FormItemCommandBarLabelLocation {
}
interface TableHeightControlVariant {
}
interface TableRowInputMode {
}
interface TableSelectionMode {
}
interface TableRowSelectionMode {
}
interface ScrollBarUse {
}
interface SearchInTableOnInput {
}
interface InitialListView {
}
interface InitialTreeView {
}
interface FormDataCollectionItem {
	GetID();
	ПолучитьИдентификатор();
	Property(... params): boolean;
	Свойство(... params): boolean;
}
interface FormDataTreeItemCollection {
	Count(): number;
	Количество(): number;
	Add(): FormDataTreeItem;
	Добавить(): FormDataTreeItem;
	Insert(... params): FormDataTreeItem;
	Вставить(... params): FormDataTreeItem;
	Delete(... params): void;
	Удалить(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Get(... params): FormDataTreeItem;
	Получить(... params): FormDataTreeItem;
}
interface FormDataTreeItem {
	GetID(): number;
	ПолучитьИдентификатор(): number;
	GetItems(): FormDataTreeItemCollection;
	ПолучитьЭлементы(): FormDataTreeItemCollection;
	GetParent(): FormDataTreeItem;
	ПолучитьРодителя(): FormDataTreeItem;
	Property(... params): boolean;
	Свойство(... params): boolean;
}
interface FormItemAdditionType {
}
interface FormItemAddition {
	Name: string;
	Имя: string;
	Type: FormItemAdditionType;
	Вид: FormItemAdditionType;
	Visible: boolean;
	Видимость: boolean;
	Title: string;
	Заголовок: string;
	ToolTip: string;
	Подсказка: string;
	Enabled: boolean;
	Доступность: boolean;
	ContextMenu: FormGroup;
	КонтекстноеМеню: FormGroup;
	Parent: FormGroup | ManagedForm;
	Родитель: FormGroup | ManagedForm;
	ToolTipRepresentation: ToolTipRepresentation;
	ОтображениеПодсказки: ToolTipRepresentation;
	ExtendedToolTip: FormDecoration;
	РасширеннаяПодсказка: FormDecoration;
	ChildItems: FormItems;
	ПодчиненныеЭлементы: FormItems;
	HorizontalAlignInGroup: ItemHorizontalLocation;
	ГоризонтальноеПоложениеВГруппе: ItemHorizontalLocation;
	VerticalAlignInGroup: ItemVerticalAlign;
	ВертикальноеПоложениеВГруппе: ItemVerticalAlign;
}
interface SearchStringLocation {
}
interface ViewStatusLocation {
}
interface SearchControlLocation {
}
interface RefreshRequestMethod {
}
interface FormTable {
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	Representation: TableRepresentation;
	Отображение: TableRepresentation;
	Visible: boolean;
	Видимость: boolean;
	TitleLocation: FormItemTitleLocation;
	ПоложениеЗаголовка: FormItemTitleLocation;
	TitleHeight: number;
	ВысотаЗаголовка: number;
	CommandBarLocation: FormItemCommandBarLabelLocation;
	ПоложениеКоманднойПанели: FormItemCommandBarLabelLocation;
	ToolTip: string;
	Подсказка: string;
	Enabled: boolean;
	Доступность: boolean;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	SkipOnInput: boolean;
	ПропускатьПриВводе: boolean;
	DefaultItem: boolean;
	АктивизироватьПоУмолчанию: boolean;
	ChangeRowSet: boolean;
	ИзменятьСоставСтрок: boolean;
	ChangeRowOrder: boolean;
	ИзменятьПорядокСтрок: boolean;
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HeightInTableRows: number;
	ВысотаВСтрокахТаблицы: number;
	HeightControlVariant: TableHeightControlVariant;
	ВариантУправленияВысотой: TableHeightControlVariant;
	AutoMaxHeightInTableRows: boolean;
	АвтоМаксимальнаяВысотаВСтрокахТаблицы: boolean;
	MaxHeightInTableRows: number;
	МаксимальнаяВысотаВСтрокахТаблицы: number;
	ChoiceMode: boolean;
	РежимВыбора: boolean;
	MultipleChoice: boolean;
	МножественныйВыбор: boolean;
	RowInputMode: TableRowInputMode;
	РежимВводаСтрок: TableRowInputMode;
	SelectionMode: TableSelectionMode;
	РежимВыделения: TableSelectionMode;
	RowSelectionMode: TableRowSelectionMode;
	РежимВыделенияСтроки: TableRowSelectionMode;
	Header: boolean;
	Шапка: boolean;
	HeaderHeight: number;
	ВысотаШапки: number;
	Footer: boolean;
	Подвал: boolean;
	FooterHeight: number;
	ВысотаПодвала: number;
	HorizontalScrollBar: ScrollBarUse;
	ГоризонтальнаяПолосаПрокрутки: ScrollBarUse;
	VerticalScrollBar: ScrollBarUse;
	ВертикальнаяПолосаПрокрутки: ScrollBarUse;
	HorizontalLines: boolean;
	ГоризонтальныеЛинии: boolean;
	VerticalLines: boolean;
	ВертикальныеЛинии: boolean;
	FixedLeft: number;
	ФиксацияСлева: number;
	FixedRight: number;
	ФиксацияСправа: number;
	UseAlternationRowColor: boolean;
	ЧередованиеЦветовСтрок: boolean;
	AutoInsertNewRow: boolean;
	АвтоВводНовойСтроки: boolean;
	AutoAddIncomplete: boolean;
	АвтоВводНезаполненного: boolean;
	AutoMarkIncomplete: boolean;
	АвтоОтметкаНезаполненного: boolean;
	SearchOnInput: SearchInTableOnInput;
	ПоискПриВводе: SearchInTableOnInput;
	MarkIncomplete: boolean;
	ОтметкаНезаполненного: boolean;
	InitialListView: InitialListView;
	НачальноеОтображениеСписка: InitialListView;
	InitialTreeView: InitialTreeView;
	НачальноеОтображениеДерева: InitialTreeView;
	Output: UseOutput;
	Вывод: UseOutput;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	RowsPicture: boolean;
	КартинкаСтрок: boolean;
	ContextMenu: FormGroup;
	КонтекстноеМеню: FormGroup;
	CommandBar: FormGroup;
	КоманднаяПанель: FormGroup;
	CurrentRow;
	ТекущаяСтрока;
	CurrentParent;
	ТекущийРодитель;
	CurrentItem;
	ТекущийЭлемент;
	SelectedRows: ArrayV8;
	ВыделенныеСтроки: ArrayV8;
	CurrentData: FormDataCollectionItem | FormDataTreeItem | FormDataStructure;
	ТекущиеДанные: FormDataCollectionItem | FormDataTreeItem | FormDataStructure;
	ChildItems: FormItems;
	ПодчиненныеЭлементы: FormItems;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	TitleTextColor: Color;
	ЦветТекстаЗаголовка: Color;
	TitleFont: Font;
	ШрифтЗаголовка: Font;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
	EnableStartDrag: boolean;
	РазрешитьНачалоПеретаскивания: boolean;
	EnableDrag: boolean;
	РазрешитьПеретаскивание: boolean;
	Parent: FormGroup | ManagedForm;
	Родитель: FormGroup | ManagedForm;
	DataPath: string;
	ПутьКДанным: string;
	RowPictureDataPath: string;
	ПутьКДаннымКартинкиСтроки: string;
	ToolTipRepresentation: ToolTipRepresentation;
	ОтображениеПодсказки: ToolTipRepresentation;
	ExtendedToolTip: FormDecoration;
	РасширеннаяПодсказка: FormDecoration;
	SearchStringRepresentation: FormItemAddition;
	ОтображениеСтрокиПоиска: FormItemAddition;
	ViewStatusRepresentation: FormItemAddition;
	ОтображениеСостоянияПросмотра: FormItemAddition;
	SearchControl: FormItemAddition;
	УправлениеПоиском: FormItemAddition;
	SearchStringLocation: SearchStringLocation;
	ПоложениеСтрокиПоиска: SearchStringLocation;
	ViewStatusLocation: ViewStatusLocation;
	ПоложениеСостоянияПросмотра: ViewStatusLocation;
	SearchControlLocation: SearchControlLocation;
	ПоложениеУправленияПоиском: SearchControlLocation;
	HorizontalAlignInGroup: ItemHorizontalLocation;
	ГоризонтальноеПоложениеВГруппе: ItemHorizontalLocation;
	VerticalAlignInGroup: ItemVerticalAlign;
	ВертикальноеПоложениеВГруппе: ItemVerticalAlign;
	RefreshRequest: RefreshRequestMethod;
	ЗапросОбновления: RefreshRequestMethod;
	AdditionalCreateParameters;
	ДополнительныеПараметрыСоздания;
	RowData(... params);
	ДанныеСтроки(... params);
	AddRow(): void;
	ДобавитьСтроку(): void;
	EndEditRow(... params): void;
	ЗакончитьРедактированиеСтроки(... params): void;
	ChangeRow(): void;
	ИзменитьСтроку(): void;
	CheckRow(... params);
	ПроверитьСтроку(... params);
	Expanded(... params);
	Развернут(... params);
	Expand(... params): void;
	Развернуть(... params): void;
	Collapse(... params): void;
	Свернуть(... params): void;
	CopyRow(): void;
	СкопироватьСтроку(): void;
	Refresh(): void;
	Обновить(): void;
	GetAction(... params);
	ПолучитьДействие(... params);
	SetAction(... params): void;
	УстановитьДействие(... params): void;
	CreateUserSettingsFormItems(... params): void;
	СоздатьЭлементыФормыПользовательскихНастроек(... params): void;
	GetPerformingDataCompositionScheme(): DataCompositionSchema;
	ПолучитьИсполняемуюСхемуКомпоновкиДанных(): DataCompositionSchema;
	GetPerformingDataCompositionSettings(): DataCompositionSettings;
	ПолучитьИсполняемыеНастройкиКомпоновкиДанных(): DataCompositionSettings;
}
interface FormButtonType {
}
interface ButtonRepresentation {
}
interface ButtonShape {
}
interface ButtonShapeRepresentation {
}
interface FormButton {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	TitleHeight: number;
	ВысотаЗаголовка: number;
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	Type: FormButtonType;
	Вид: FormButtonType;
	Visible: boolean;
	Видимость: boolean;
	Representation: ButtonRepresentation;
	Отображение: ButtonRepresentation;
	DefaultButton: boolean;
	КнопкаПоУмолчанию: boolean;
	SkipOnInput: boolean;
	ПропускатьПриВводе: boolean;
	DefaultItem: boolean;
	АктивизироватьПоУмолчанию: boolean;
	OnlyInAllActions: boolean;
	ТолькоВоВсехДействиях: boolean;
	Enabled: boolean;
	Доступность: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
	Check: boolean;
	Пометка: boolean;
	Parent: FormGroup | ManagedForm;
	Родитель: FormGroup | ManagedForm;
	CommandName: string;
	ИмяКоманды: string;
	Picture: Picture;
	Картинка: Picture;
	ToolTipRepresentation: ToolTipRepresentation;
	ОтображениеПодсказки: ToolTipRepresentation;
	ExtendedToolTip: FormDecoration;
	РасширеннаяПодсказка: FormDecoration;
	HorizontalAlignInGroup: ItemHorizontalLocation;
	ГоризонтальноеПоложениеВГруппе: ItemHorizontalLocation;
	VerticalAlignInGroup: ItemVerticalAlign;
	ВертикальноеПоложениеВГруппе: ItemVerticalAlign;
	Shape: ButtonShape;
	Фигура: ButtonShape;
	ShapeRepresentation: ButtonShapeRepresentation;
	ОтображениеФигуры: ButtonShapeRepresentation;
	PictureLocation;
	ПоложениеКартинки;
}
interface FormFieldType {
}
interface WarningOnEditRepresentation {
}
interface ColumnEditMode {
}
interface FixingInTable {
}
interface FormField {
	Name: string;
	Имя: string;
	Type: FormFieldType;
	Вид: FormFieldType;
	Visible: boolean;
	Видимость: boolean;
	TitleLocation: FormItemTitleLocation;
	ПоложениеЗаголовка: FormItemTitleLocation;
	TitleHeight: number;
	ВысотаЗаголовка: number;
	Title: string;
	Заголовок: string;
	ToolTip: string;
	Подсказка: string;
	Enabled: boolean;
	Доступность: boolean;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	SkipOnInput: boolean;
	ПропускатьПриВводе: boolean;
	DefaultItem: boolean;
	АктивизироватьПоУмолчанию: boolean;
	WarningOnEditRepresentation: WarningOnEditRepresentation;
	ОтображениеПредупрежденияПриРедактировании: WarningOnEditRepresentation;
	WarningOnEdit: string;
	ПредупреждениеПриРедактировании: string;
	FooterText: string;
	ТекстПодвала: string;
	ShowInHeader: boolean;
	ОтображатьВШапке: boolean;
	ShowInFooter: boolean;
	ОтображатьВПодвале: boolean;
	CellHyperlink: boolean;
	ГиперссылкаЯчейки: boolean;
	HorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложение: ItemHorizontalLocation;
	HeaderHorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложениеВШапке: ItemHorizontalLocation;
	FooterHorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложениеВПодвале: ItemHorizontalLocation;
	VerticalAlign: ItemVerticalAlign;
	ВертикальноеПоложение: ItemVerticalAlign;
	HorizontalAlignInGroup: ItemHorizontalLocation;
	ГоризонтальноеПоложениеВГруппе: ItemHorizontalLocation;
	VerticalAlignInGroup: ItemVerticalAlign;
	ВертикальноеПоложениеВГруппе: ItemVerticalAlign;
	EditMode: ColumnEditMode;
	РежимРедактирования: ColumnEditMode;
	AutoCellHeight: boolean;
	АвтоВысотаЯчейки: boolean;
	HeaderPicture: Picture;
	КартинкаШапки: Picture;
	FooterPicture: Picture;
	КартинкаПодвала: Picture;
	TypeRestriction: TypeDescription;
	ОграничениеТипа: TypeDescription;
	ContextMenu: FormGroup;
	КонтекстноеМеню: FormGroup;
	ExtendedToolTip: FormDecoration;
	РасширеннаяПодсказка: FormDecoration;
	TitleTextColor: Color;
	ЦветТекстаЗаголовка: Color;
	TitleFont: Font;
	ШрифтЗаголовка: Font;
	TitleBackColor: Color;
	ЦветФонаЗаголовка: Color;
	FooterTextColor: Color;
	ЦветТекстаПодвала: Color;
	FooterBackColor: Color;
	ЦветФонаПодвала: Color;
	FooterFont: Font;
	ШрифтПодвала: Font;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
	Parent: FormGroup | ManagedForm | FormTable;
	Родитель: FormGroup | ManagedForm | FormTable;
	DataPath: string;
	ПутьКДанным: string;
	FooterDataPath: string;
	ПутьКДаннымПодвала: string;
	FixingInTable: FixingInTable;
	ФиксацияВТаблице: FixingInTable;
	ToolTipRepresentation: ToolTipRepresentation;
	ОтображениеПодсказки: ToolTipRepresentation;
	GetAction(... params);
	ПолучитьДействие(... params);
	SetAction(... params): void;
	УстановитьДействие(... params): void;
}
interface FormItems {
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	Получить(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	Find(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	Найти(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
}
interface FormGroup {
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	Name: string;
	Имя: string;
	Type: FormGroupType;
	Вид: FormGroupType;
	Title: string;
	Заголовок: string;
	ToolTip: string;
	Подсказка: string;
	Visible: boolean;
	Видимость: boolean;
	EnableContentChange: boolean;
	РазрешитьИзменениеСостава: boolean;
	Enabled: boolean;
	Доступность: boolean;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	ChildItems: FormItems;
	ПодчиненныеЭлементы: FormItems;
	TitleTextColor: Color;
	ЦветТекстаЗаголовка: Color;
	TitleFont: Font;
	ШрифтЗаголовка: Font;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
	Parent: FormGroup | ManagedForm | FormTable;
	Родитель: FormGroup | ManagedForm | FormTable;
	ToolTipRepresentation: ToolTipRepresentation;
	ОтображениеПодсказки: ToolTipRepresentation;
	ExtendedToolTip: FormDecoration;
	РасширеннаяПодсказка: FormDecoration;
	HorizontalAlignInGroup: ItemHorizontalLocation;
	ГоризонтальноеПоложениеВГруппе: ItemHorizontalLocation;
	VerticalAlignInGroup: ItemVerticalAlign;
	ВертикальноеПоложениеВГруппе: ItemVerticalAlign;
	GetAction(... params);
	ПолучитьДействие(... params);
	SetAction(... params): void;
	УстановитьДействие(... params): void;
}
interface FormAllItems {
	Count(): number;
	Количество(): number;
	Find(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	Найти(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	Add(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	Добавить(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	Insert(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	Вставить(... params): FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Переместить(... params): void;
}
interface FormCommand {
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	ToolTip: string;
	Подсказка: string;
	Picture: Picture;
	Картинка: Picture;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
	Representation: ButtonRepresentation;
	Отображение: ButtonRepresentation;
	Action: string;
	Действие: string;
	ModifiesStoredData: boolean;
	ИзменяетСохраняемыеДанные: boolean;
}
interface FormCommands {
	Count(): number;
	Количество(): number;
	Find(... params): FormCommand;
	Найти(... params): FormCommand;
	Add(... params): FormCommand;
	Добавить(... params): FormCommand;
	Delete(... params): void;
	Удалить(... params): void;
}
interface ManagedForm {
	ThisForm: ManagedForm;
	ЭтаФорма: ManagedForm;
	FormOwner;
	ВладелецФормы;
	CloseOnOwnerClose: boolean;
	ЗакрыватьПриЗакрытииВладельца: boolean;
	CloseOnChoice: boolean;
	ЗакрыватьПриВыборе: boolean;
	Modified: boolean;
	Модифицированность: boolean;
	Parameters: FormDataStructure;
	Параметры: FormDataStructure;
	Items: FormAllItems;
	Элементы: FormAllItems;
	Commands: FormCommands;
	Команды: FormCommands;
	CurrentItem: FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	ТекущийЭлемент: FormGroup | FormDecoration | FormTable | FormButton | FormItemAddition | FormField;
	UUID: UUID;
	УникальныйИдентификатор: UUID;
	FormName: string;
	ИмяФормы: string;
	UniqueKey;
	КлючУникальности;
	Window;
	Окно;
	ModalMode: boolean;
	МодальныйРежим: boolean;
	SavedInSettingsDataModified;
	СохраняемыеВНастройкахДанныеМодифицированы;
	OnCloseNotifyDescription;
	ОписаниеОповещенияОЗакрытии;
	ThisObject: ManagedForm;
	ЭтотОбъект: ManagedForm;
	ValueToFormAttribute(... params);
	ЗначениеВРеквизитФормы(... params);
	FormAttributeToValue(... params);
	РеквизитФормыВЗначение(... params);
	LockFormDataForEdit(): void;
	ЗаблокироватьДанныеФормыДляРедактирования(): void;
	UnlockFormDataForEdit(): void;
	РазблокироватьДанныеФормыДляРедактирования(): void;
	CheckFilling(): boolean;
	ПроверитьЗаполнение(): boolean;
	GetFormFunctionalOption(... params);
	ПолучитьФункциональнуюОпциюФормы(... params);
	SetFormFunctionalOptionParameters(... params): void;
	УстановитьПараметрыФункциональныхОпцийФормы(... params): void;
	GetFormFunctionalOptionParameters(): Structure;
	ПолучитьПараметрыФункциональныхОпцийФормы(): Structure;
	Open(): void;
	Открыть(): void;
	Close(... params): void;
	Закрыть(... params): void;
	DoModal(... params);
	ОткрытьМодально(... params);
	Activate(): void;
	Активизировать(): void;
	NotifyChoice(... params): void;
	ОповеститьОВыборе(... params): void;
	NotifyActivate(... params): void;
	ОповеститьОбАктивизации(... params): void;
	NotifyWritingNew(... params): void;
	ОповеститьОЗаписиНового(... params): void;
	OpenFormHelp(): boolean;
	ОткрытьСправкуФормы(): boolean;
	AttachIdleHandler(... params): void;
	ПодключитьОбработчикОжидания(... params): void;
	DetachIdleHandler(... params): void;
	ОтключитьОбработчикОжидания(... params): void;
	RepresentDataChange(... params): void;
	ОтобразитьИзменениеДанных(... params): void;
	ChooseFromMenu(... params): ValueListItem;
	ВыбратьИзМеню(... params): ValueListItem;
	ShowChooseFromMenu(... params): void;
	ПоказатьВыборИзМеню(... params): void;
	ChooseFromList(... params): ValueListItem;
	ВыбратьИзСписка(... params): ValueListItem;
	ShowChooseFromList(... params): void;
	ПоказатьВыборИзСписка(... params): void;
	ClearMarkIncomplete(): void;
	ОтключитьОтметкуНезаполненного(): void;
	RefreshDataRepresentation(... params): void;
	ОбновитьОтображениеДанных(... params): void;
	IsOpen(): boolean;
	Открыта(): boolean;
	IsInputAvailable(): boolean;
	ВводДоступен(): boolean;
	ChangeAttributes(... params): void;
	ИзменитьРеквизиты(... params): void;
	GetAttributes(... params): ArrayV8;
	ПолучитьРеквизиты(... params): ArrayV8;
	ExecuteNavigation(... params): void;
	ВыполнитьПереход(... params): void;
	SetEventHandlersExecution(... params): void;
	УстановитьВыполнениеОбработчиковСобытия(... params): void;
	SetExecutionAfterEventHandlers(... params): void;
	УстановитьВыполнениеПослеОбработчиковСобытия(... params): void;
	BeginEditingItem(): void;
	НачатьРедактированиеЭлемента(): void;
}
interface Controls {
	Count(): number;
	Количество(): number;
	Add(... params);
	Добавить(... params);
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params);
	Найти(... params);
	Get(... params);
	Получить(... params);
	AddActiveX(... params);
	ДобавитьActiveX(... params);
}
interface EnterKeyBehaviorType {
}
interface WindowStateVariant {
}
interface WindowLocationVariant {
}
interface WindowDockVariant {
}
interface WindowSizeChange {
}
interface WindowAppearanceModeVariant {
}
interface WindowAppearanceModeChange {
}
interface Form {
	Controls: Controls;
	ЭлементыФормы: Controls;
	Panel;
	Панель;
	Caption: string;
	Заголовок: string;
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	EnterKeyBehavior: EnterKeyBehaviorType;
	ПоведениеКлавишиEnter: EnterKeyBehaviorType;
	CurrentControl;
	ТекущийЭлемент;
	ModalMode: boolean;
	МодальныйРежим: boolean;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	ChoiceMode: boolean;
	РежимВыбора: boolean;
	ChoiceInitialValue;
	НачальноеЗначениеВыбора;
	CloseOnChoice: boolean;
	ЗакрыватьПриВыборе: boolean;
	FormOwner;
	ВладелецФормы;
	CloseOnOwnerClose: boolean;
	ЗакрыватьПриЗакрытииВладельца: boolean;
	ThisForm;
	ЭтаФорма;
	Modified: boolean;
	Модифицированность: boolean;
	WindowOptionsKey: string;
	КлючСохраненияПоложенияОкна: string;
	WindowOptionsName;
	ИмяСохраненияПоложенияОкна;
	UniqueKey;
	КлючУникальности;
	AutoTitle: boolean;
	АвтоЗаголовок: boolean;
	Style: Style;
	Стиль: Style;
	WindowState: WindowStateVariant;
	СостояниеОкна: WindowStateVariant;
	ConnectableWindow: boolean;
	СоединяемоеОкно: boolean;
	WindowLocation: WindowLocationVariant;
	ПоложениеОкна: WindowLocationVariant;
	WindowDockLocation: WindowDockVariant;
	ПоложениеПрикрепленногоОкна: WindowDockVariant;
	AllowNormalState: boolean;
	РазрешитьСостояниеОбычное: boolean;
	AllowFloatState: boolean;
	РазрешитьСостояниеСвободное: boolean;
	AllowDockedState: boolean;
	РазрешитьСостояниеПрикрепленное: boolean;
	AllowAutohideState: boolean;
	РазрешитьСостояниеПрячущееся: boolean;
	AllowJoinWindow: boolean;
	РазрешитьСоединятьОкно: boolean;
	SizeChange: WindowSizeChange;
	ИзменениеРазмера: WindowSizeChange;
	MultipleChoice: boolean;
	МножественныйВыбор: boolean;
	CaptionPicture;
	КартинкаЗаголовка;
	WindowAppearanceMode: WindowAppearanceModeVariant;
	СпособОтображенияОкна: WindowAppearanceModeVariant;
	ChangeWindowAppearanceMode: WindowAppearanceModeChange;
	ИзменятьСпособОтображенияОкна: WindowAppearanceModeChange;
	DesktopMode: boolean;
	РежимРабочегоСтола: boolean;
	AllowClose: boolean;
	РазрешитьЗакрытие: boolean;
	AutoFillCheck;
	ПроверятьЗаполнениеАвтоматически;
	Open(): void;
	Открыть(): void;
	Close(... params): void;
	Закрыть(... params): void;
	DoModal(... params);
	ОткрытьМодально(... params);
	Activate(): void;
	Активизировать(): void;
	Refresh(): void;
	Обновить(): void;
	NotifyChoice(... params): void;
	ОповеститьОВыборе(... params): void;
	NotifyActivateObject(... params): void;
	ОповеститьОбАктивизацииОбъекта(... params): void;
	NotifyWriteNewObject(... params): void;
	ОповеститьОЗаписиНовогоОбъекта(... params): void;
	IsOpen(): boolean;
	Открыта(): boolean;
	AttachIdleHandler(... params): void;
	ПодключитьОбработчикОжидания(... params): void;
	DetachIdleHandler(... params): void;
	ОтключитьОбработчикОжидания(... params): void;
	IsInputAvailable(): boolean;
	ВводДоступен(): boolean;
	GetAction(... params);
	ПолучитьДействие(... params);
	SetAction(... params): void;
	УстановитьДействие(... params): void;
	AttachDataChangeHandler(... params): void;
	ПодключитьОбработчикИзмененияДанных(... params): void;
	DetachDataChangeHandler(... params): void;
	ОтключитьОбработчикИзмененияДанных(... params): void;
	ChooseFromList(... params);
	ВыбратьИзСписка(... params);
	ChooseFromMenu(... params);
	ВыбратьИзМеню(... params);
	OpenFormHelp(): boolean;
	ОткрытьСправкуФормы(): boolean;
	CheckFilling();
	ПроверитьЗаполнение();
}
declare var MainInterface: InterfaceControlItemCollection;
declare var ГлавныйИнтерфейс: InterfaceControlItemCollection;
declare var WorkingDate: EnumWorkingDateMode;
declare var РабочаяДата: EnumWorkingDateMode;
declare var WorkingDateUse: EnumWorkingDateMode;
declare var ИспользованиеРабочейДаты: EnumWorkingDateMode;
declare var StyleLib: StyleLib;
declare var БиблиотекаСтилей: StyleLib;
declare var LaunchParameter: string;
declare var ПараметрЗапуска: string;
declare var MainStyle: Style;
declare var ГлавныйСтиль: Style;
declare var WorkingDateMode: EnumWorkingDateMode;
declare var РежимРабочейДаты: EnumWorkingDateMode;
declare var IntervalBoundVariant: EnumIntervalBoundVariant;
declare var ВариантГраницыИнтервала: EnumIntervalBoundVariant;
declare var PeriodVariant: EnumPeriodVariant;
declare var ВариантПериода: EnumPeriodVariant;
declare var PeriodSettingsVariant: EnumPeriodSettingsVariant;
declare var ВариантНастройкиПериода: EnumPeriodSettingsVariant;
declare var NewRowShowCheckVariant: EnumNewRowShowCheckVariant;
declare var ВариантПроверкиОтображенияНовойСтроки: EnumNewRowShowCheckVariant;
declare function DoMessageBox(... params): void;
declare function Предупреждение(... params): void;
declare function DoQueryBox(... params): DialogReturnCode;
declare function Вопрос(... params): DialogReturnCode;
declare function InputString(... params): boolean;
declare function ВвестиСтроку(... params): boolean;
declare function InputNumber(... params): boolean;
declare function ВвестиЧисло(... params): boolean;
declare function InputDate(... params): boolean;
declare function ВвестиДату(... params): boolean;
declare function InputValue(... params): boolean;
declare function ВвестиЗначение(... params): boolean;
declare function OpenValue(... params): void;
declare function ОткрытьЗначение(... params): void;
declare function Beep(): void;
declare function Сигнал(): void;
declare function GetCaption(): string;
declare function ПолучитьЗаголовокСистемы(): string;
declare function SetCaption(... params): void;
declare function УстановитьЗаголовокСистемы(... params): void;
declare function SaveValue(... params): void;
declare function СохранитьЗначение(... params): void;
declare function RestoreValue(... params);
declare function ВосстановитьЗначение(... params);
declare function SaveUserSettings(): void;
declare function СохранитьНастройкиПользователя(): void;
declare function ClearUserSettings(... params): void;
declare function ОчиститьНастройкиПользователя(... params): void;
declare function RunSystem(... params): void;
declare function ЗапуститьСистему(... params): void;
declare function Exit(... params): void;
declare function ЗавершитьРаботуСистемы(... params): void;
declare function Terminate(... params): void;
declare function ПрекратитьРаботуСистемы(... params): void;
declare function AttachIdleHandler(... params): void;
declare function ПодключитьОбработчикОжидания(... params): void;
declare function DetachIdleHandler(... params): void;
declare function ОтключитьОбработчикОжидания(... params): void;
declare function LockApplication(): void;
declare function ЗаблокироватьРаботуПользователя(): void;
declare function ClearMessages(): void;
declare function ОчиститьСообщения(): void;
declare function Status(... params): void;
declare function Состояние(... params): void;
declare function Notify(... params): void;
declare function Оповестить(... params): void;
declare function UserInterruptProcessing(): void;
declare function ОбработкаПрерыванияПользователя(): void;
declare function OpenHelpContent(): boolean;
declare function ОткрытьСодержаниеСправки(): boolean;
declare function OpenHelpIndex(... params): boolean;
declare function ОткрытьИндексСправки(... params): boolean;
declare function OpenHelp(... params): boolean;
declare function ОткрытьСправку(... params): boolean;
declare function CloseHelp(): void;
declare function ЗакрытьСправку(): void;
declare function GetAppearanceTemplate(... params): SpreadsheetDocument;
declare function ПолучитьМакетОформления(... params): SpreadsheetDocument;
declare function WindowsUsers();
declare function ПользователиWindows();
declare function OSUsers();
declare function ПользователиОС();
declare function AttachNotificationHandler(... params): void;
declare function ПодключитьОбработчикОповещения(... params): void;
declare function DetachNotificationHandler(... params): void;
declare function ОтключитьОбработчикОповещения(... params): void;
declare function ShowErrorInfo(... params): void;
declare function ПоказатьИнформациюОбОшибке(... params): void;
declare function ProcessJobs(... params): void;
declare function ВыполнитьОбработкуЗаданий(... params): void;
declare function GetForm(... params);
declare function ПолучитьФорму(... params);
declare function OpenForm(... params): ManagedForm | Form;
declare function ОткрытьФорму(... params): ManagedForm | Form;
declare function OpenFormModal(... params): ManagedForm | Form;
declare function ОткрытьФормуМодально(... params): ManagedForm | Form;
declare function UserDataWorkDir(): string;
declare function РабочийКаталогДанныхПользователя(): string;
declare function DocumentsDir(): string;
declare function КаталогДокументов(): string;
declare function BeginGettingDocumentsDir(... params): void;
declare function НачатьПолучениеКаталогаДокументов(... params): void;
declare function BeginGettingUserDataWorkDir(... params): void;
declare function НачатьПолучениеРабочегоКаталогаДанныхПользователя(... params): void;
declare function ShowMessageBox(... params): void;
declare function ПоказатьПредупреждение(... params): void;
declare function ShowQueryBox(... params): void;
declare function ПоказатьВопрос(... params): void;
declare function ShowValue(... params): void;
declare function ПоказатьЗначение(... params): void;
declare function ShowInputDate(... params): void;
declare function ПоказатьВводДаты(... params): void;
declare function ShowInputValue(... params): void;
declare function ПоказатьВводЗначения(... params): void;
declare function ShowInputString(... params): void;
declare function ПоказатьВводСтроки(... params): void;
declare function ShowInputNumber(... params): void;
declare function ПоказатьВводЧисла(... params): void;
declare function AttachLicensingClientParametersRequestHandler(... params): void;
declare function ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования(... params): void;
declare function DetachLicensingClientParametersRequestHandler(): void;
declare function ОтключитьОбработчикЗапросаНастроекКлиентаЛицензирования(): void;
declare function GetExternalResourcesMode();
declare function ПолучитьРежимВнешнихРесурсов();
interface EnumButtonPictureLocation {
	Left;
	Лево;
	Right;
	Право;
}
declare type ПеречислениеПоложениеКартинкиКнопки = EnumButtonPictureLocation;
interface EnumTitleLocation {
	TitleLeft;
	ЗаголовокСлева;
	TitleRight;
	ЗаголовокСправа;
}
declare type ПеречислениеПоложениеЗаголовка = EnumTitleLocation;
interface EnumKey {
	None;
	Нет;
	BackSpace;
	Space;
	_0;
	_1;
	_2;
	_3;
	_4;
	_5;
	_6;
	_7;
	_8;
	_9;
	A;
	B;
	C;
	D;
	E;
	F;
	G;
	H;
	I;
	J;
	K;
	L;
	M;
	N;
	O;
	P;
	Q;
	R;
	S;
	T;
	U;
	V;
	W;
	X;
	Y;
	Z;
	Num0;
	Num1;
	Num2;
	Num3;
	Num4;
	Num5;
	Num6;
	Num7;
	Num8;
	Num9;
	NumMultiply;
	NumAdd;
	NumSubtract;
	NumDecimal;
	NumDivide;
	F1;
	F2;
	F3;
	F4;
	F5;
	F6;
	F7;
	F8;
	F9;
	F10;
	F11;
	F12;
	Break;
}
declare type ПеречислениеКлавиша = EnumKey;
interface EnumDialogReturnCode {
	Timeout;
	Таймаут;
	OK;
	ОК;
	Cancel;
	Отмена;
	Abort;
	Прервать;
	Retry;
	Повторить;
	Ignore;
	Пропустить;
	Yes;
	Да;
	No;
	Нет;
}
declare type ПеречислениеКодВозвратаДиалога = EnumDialogReturnCode;
interface EnumCommandBarButtonType {
	Separator;
	Разделитель;
	Action;
	Действие;
	Popup;
	Подменю;
}
declare type ПеречислениеТипКнопкиКоманднойПанели = EnumCommandBarButtonType;
interface EnumWindowStateVariant {
	Normal;
	Обычное;
	Float;
	Свободное;
	Docked;
	Прикрепленное;
	Autohide;
	Прячущееся;
}
declare type ПеречислениеВариантСостоянияОкна = EnumWindowStateVariant;
interface EnumWindowDockVariant {
	Left;
	Лево;
	Right;
	Право;
	Top;
	Верх;
	Bottom;
	Низ;
}
declare type ПеречислениеВариантПрикрепленияОкна = EnumWindowDockVariant;
interface EnumWindowSizeChange {
	Change;
	Изменять;
	DontChange;
	НеИзменять;
}
declare type ПеречислениеИзменениеРазмераОкна = EnumWindowSizeChange;
interface EnumScrollingTextMode {
	DontUse;
	НеИспользовать;
	VerySlow;
	ОченьМедленно;
	Slow;
	Медленно;
	Normal;
	Нормально;
	Fast;
	Быстро;
	VeryFast;
	ОченьБыстро;
}
declare type ПеречислениеРежимБегущейСтроки = EnumScrollingTextMode;
interface EnumListEditMode {
	InList;
	ВСписке;
	InDialog;
	ВДиалоге;
}
declare type ПеречислениеСпособРедактированияСписка = EnumListEditMode;
interface EnumControlEdge {
	Left;
	Лево;
	Top;
	Верх;
	Right;
	Право;
	Bottom;
	Низ;
	Center;
	Центр;
}
declare type ПеречислениеГраницаЭлементаУправления = EnumControlEdge;
interface EnumLabelPictureLocation {
	Left;
	Лево;
	Top;
	Верх;
	Right;
	Право;
	Bottom;
	Низ;
	Center;
	Центр;
}
declare type ПеречислениеПоложениеКартинкиНадписи = EnumLabelPictureLocation;
interface EnumPanelPictureLocation {
	Left;
	Лево;
	Top;
	Верх;
	Right;
	Право;
	Bottom;
	Низ;
	Center;
	Центр;
}
declare type ПеречислениеПоложениеКартинкиПанели = EnumPanelPictureLocation;
interface EnumWindowLocationVariant {
	Auto;
	Авто;
	Center;
	Центрировать;
	DontOverlapOwner;
	НеПерекрыватьВладельца;
}
declare type ПеречислениеВариантПоложенияОкна = EnumWindowLocationVariant;
interface EnumControlCollapseMode {
	None;
	Нет;
	Left;
	Лево;
	Right;
	Право;
	Top;
	Верх;
	Bottom;
	Низ;
}
declare type ПеречислениеРежимСверткиЭлементаУправления = EnumControlCollapseMode;
interface EnumCommandBarButtonOrder {
	DontOrder;
	НеУпорядочивать;
	Asc;
	Возр;
	Desc;
	Убыв;
}
declare type ПеречислениеПорядокКнопокКоманднойПанели = EnumCommandBarButtonOrder;
interface EnumWindowAppearanceModeVariant {
	Minimized;
	Минимизированное;
	Normal;
	Нормальное;
	Maximized;
	Максимизированное;
}
declare type ПеречислениеВариантСпособаОтображенияОкна = EnumWindowAppearanceModeVariant;
interface EnumWindowAppearanceModeChange {
	Enable;
	Разрешить;
	Disable;
	Запретить;
	Auto;
	Авто;
}
declare type ПеречислениеИзменениеСпособаОтображенияОкна = EnumWindowAppearanceModeChange;
interface EnumDragAllowedActions {
	DontProcess;
	НеОбрабатывать;
	Move;
	Перемещение;
	Copy;
	Копирование;
	CopyAndMove;
	КопированиеИПеремещение;
}
declare type ПеречислениеДопустимыеДействияПеретаскивания = EnumDragAllowedActions;
interface EnumDragAction {
	Copy;
	Копирование;
	Move;
	Перемещение;
	Cancel;
	Отмена;
	Choice;
	Выбор;
}
declare type ПеречислениеДействиеПеретаскивания = EnumDragAction;
interface EnumQuestionDialogMode {
	OK;
	ОК;
	OKCancel;
	ОКОтмена;
	AbortRetryIgnore;
	ПрерватьПовторитьПропустить;
	YesNoCancel;
	ДаНетОтмена;
	YesNo;
	ДаНет;
	RetryCancel;
	ПовторитьОтмена;
}
declare type ПеречислениеРежимДиалогаВопрос = EnumQuestionDialogMode;
declare var ButtonPictureLocation: EnumButtonPictureLocation;
declare var ПоложениеКартинкиКнопки: EnumButtonPictureLocation;
declare var TitleLocation: EnumTitleLocation;
declare var ПоложениеЗаголовка: EnumTitleLocation;
declare var Key: EnumKey;
declare var Клавиша: EnumKey;
declare var DialogReturnCode: EnumDialogReturnCode;
declare var КодВозвратаДиалога: EnumDialogReturnCode;
declare var CommandBarButtonType: EnumCommandBarButtonType;
declare var ТипКнопкиКоманднойПанели: EnumCommandBarButtonType;
declare var InitialListView: EnumInitialListView;
declare var НачальноеОтображениеСписка: EnumInitialListView;
declare var WindowStateVariant: EnumWindowStateVariant;
declare var ВариантСостоянияОкна: EnumWindowStateVariant;
declare var WindowDockVariant: EnumWindowDockVariant;
declare var ВариантПрикрепленияОкна: EnumWindowDockVariant;
declare var WindowSizeChange: EnumWindowSizeChange;
declare var ИзменениеРазмераОкна: EnumWindowSizeChange;
declare var ScrollingTextMode: EnumScrollingTextMode;
declare var РежимБегущейСтроки: EnumScrollingTextMode;
declare var ListEditMode: EnumListEditMode;
declare var СпособРедактированияСписка: EnumListEditMode;
declare var ControlEdge: EnumControlEdge;
declare var ГраницаЭлементаУправления: EnumControlEdge;
declare var LabelPictureLocation: EnumLabelPictureLocation;
declare var ПоложениеКартинкиНадписи: EnumLabelPictureLocation;
declare var PanelPictureLocation: EnumPanelPictureLocation;
declare var ПоложениеКартинкиПанели: EnumPanelPictureLocation;
declare var WindowLocationVariant: EnumWindowLocationVariant;
declare var ВариантПоложенияОкна: EnumWindowLocationVariant;
declare var ControlCollapseMode: EnumControlCollapseMode;
declare var РежимСверткиЭлементаУправления: EnumControlCollapseMode;
declare var CommandBarButtonOrder: EnumCommandBarButtonOrder;
declare var ПорядокКнопокКоманднойПанели: EnumCommandBarButtonOrder;
declare var WindowAppearanceModeVariant: EnumWindowAppearanceModeVariant;
declare var ВариантСпособаОтображенияОкна: EnumWindowAppearanceModeVariant;
declare var WindowAppearanceModeChange: EnumWindowAppearanceModeChange;
declare var ИзменениеСпособаОтображенияОкна: EnumWindowAppearanceModeChange;
declare var DragAllowedActions: EnumDragAllowedActions;
declare var ДопустимыеДействияПеретаскивания: EnumDragAllowedActions;
declare var DragAction: EnumDragAction;
declare var ДействиеПеретаскивания: EnumDragAction;
declare var QuestionDialogMode: EnumQuestionDialogMode;
declare var РежимДиалогаВопрос: EnumQuestionDialogMode;
interface EnumXMLNodeType {
	None;
	Ничего;
	Attribute;
	Атрибут;
	CDATASection;
	СекцияCDATA;
	Comment;
	Комментарий;
	DocumentTypeDefinition;
	ОпределениеТипаДокумента;
	StartElement;
	НачалоЭлемента;
	EndElement;
	КонецЭлемента;
	EndEntity;
	КонецСущности;
	Entity;
	Сущность;
	EntityReference;
	СсылкаНаСущность;
	Notation;
	Нотация;
	ProcessingInstruction;
	ИнструкцияОбработки;
	Text;
	Текст;
	Whitespace;
	ПробельныеСимволы;
	XMLDeclaration;
	ОбъявлениеXML;
}
declare type ПеречислениеТипУзлаXML = EnumXMLNodeType;
interface EnumXMLTypeAssignment {
	Explicit;
	Явное;
	Implicit;
	Неявное;
}
declare type ПеречислениеНазначениеТипаXML = EnumXMLTypeAssignment;
interface EnumXMLAttributeType {
	CDATA;
	ID;
	IDREF;
	IDREFS;
	ENTITY;
	ENTITIES;
	NMTOKEN;
	NMTOKENS;
	NOTATION;
	ENUMERATION;
}
declare type ПеречислениеТипАтрибутаXML = EnumXMLAttributeType;
interface EnumXMLSpace {
	Default;
	ПоУмолчанию;
	Preserve;
	Сохранять;
}
declare type ПеречислениеПробельныеСимволыXML = EnumXMLSpace;
interface EnumXMLValidationType {
	NoValidate;
	НетПроверки;
	DocumentTypeDefinition;
	ОпределениеТипаДокумента;
	XMLSchema;
	СхемаXML;
}
declare type ПеречислениеТипПроверкиXML = EnumXMLValidationType;
interface EnumDOMNodeType {
	Element;
	Элемент;
	Attribute;
	Атрибут;
	Text;
	Текст;
	CDATASection;
	СекцияCDATA;
	EntityReference;
	СсылкаНаСущность;
	Entity;
	Сущность;
	ProcessingInstruction;
	ИнструкцияОбработки;
	Comment;
	Комментарий;
	Document;
	Документ;
	DocumentType;
	ОпределениеТипаДокумента;
	DocumentFragment;
	ФрагментДокумента;
	Notation;
	Нотация;
	XPathNamespace;
	ПространствоИменXPath;
}
declare type ПеречислениеТипУзлаDOM = EnumDOMNodeType;
interface EnumDOMDocumentPosition {
	Disconnected;
	Отсоединен;
	Preceding;
	Предшествует;
	Following;
	Следует;
	Contains;
	Содержит;
	ContainedBy;
	Содержится;
	ImplementationSpecific;
	ЗависитОтРеализации;
}
declare type ПеречислениеПозицияВДокументеDOM = EnumDOMDocumentPosition;
interface EnumDOMBuilderAction {
	AppendAsChildren;
	ДобавитьКакДочерние;
	InsertAfter;
	ВставитьПосле;
	InsertBefore;
	ВставитьПеред;
	Replace;
	Заменить;
	ReplaceChildren;
	ЗаменитьДочерние;
}
declare type ПеречислениеДействиеПостроителяDOM = EnumDOMBuilderAction;
interface EnumDOMNodeFilterParameters {
	ShowAll;
	ОтображатьВсе;
	ShowElement;
	ОтображатьЭлемент;
	ShowAttribute;
	ОтображатьАтрибут;
	ShowText;
	ОтображатьТекст;
	ShowCDATASection;
	ОтображатьСекцииCDATA;
	ShowEntityReference;
	ОтображатьСсылкуНаСущность;
	ShowEntity;
	ОтображатьСущность;
	ShowProcessingInstruction;
	ОтображатьИнструкциюОбработки;
	ShowComment;
	ОтображатьКомментарий;
	ShowDocument;
	ОтображатьДокумент;
	ShowDocumentType;
	ОтображатьОпределениеТипаДокумента;
	ShowDocumentFragment;
	ОтображатьФрагментДокумента;
	ShowNotation;
	ОтображатьНотацию;
}
declare type ПеречислениеПараметрыОтбораУзловDOM = EnumDOMNodeFilterParameters;
interface EnumXSComponentType {
	Annotation;
	Аннотация;
	AppInfo;
	ИнформацияПриложения;
	Documentation;
	Документация;
	IdentityConstraintDefinition;
	ОпределениеОграниченияИдентичности;
	AttributeDeclaration;
	ОбъявлениеАтрибута;
	ElementDeclaration;
	ОбъявлениеЭлемента;
	NotationDeclaration;
	ОбъявлениеНотации;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	ComplexTypeDefinition;
	ОпределениеСоставногоТипа;
	AttributeGroupDefinition;
	ОпределениеГруппыАтрибутов;
	ModelGroupDefinition;
	ОпределениеГруппыМодели;
	Particle;
	Фрагмент;
	XPathDefinition;
	ОпределениеXPath;
	TotalDigitsFacet;
	ФасетОбщегоКоличестваРазрядов;
	FractionDigitsFacet;
	ФасетКоличестваРазрядовДробнойЧасти;
	LengthFacet;
	ФасетДлины;
	MinLengthFacet;
	ФасетМинимальнойДлины;
	MaxLengthFacet;
	ФасетМаксимальнойДлины;
	MinExclusiveFacet;
	МинимальноИсключающийФасет;
	MinInclusiveFacet;
	МинимальноВключающийФасет;
	MaxExclusiveFacet;
	МаксимальноИсключающийФасет;
	MaxInclusiveFacet;
	МаксимальноВключающийФасет;
	EnumerationFacet;
	ФасетПеречисления;
	PatternFacet;
	ФасетОбразца;
	WhitespaceFacet;
	ФасетПробельныхСимволов;
	Import;
	Импорт;
	Redefine;
	Переопределение;
	Include;
	Включение;
	Wildcard;
	Маска;
	ModelGroup;
	ГруппаМодели;
	AttributeUse;
	ИспользованиеАтрибута;
	Schema;
	Схема;
}
declare type ПеречислениеТипКомпонентыXS = EnumXSComponentType;
interface EnumXSAttributeUseCategory {
	Optional;
	Необязательно;
	Prohibited;
	Запрещено;
	Required;
	Обязательно;
}
declare type ПеречислениеКатегорияИспользованияАтрибутаXS = EnumXSAttributeUseCategory;
interface EnumXSForm {
	Qualified;
	Квалифицированная;
	Unqualified;
	Неквалифицированная;
}
declare type ПеречислениеФормаПредставленияXS = EnumXSForm;
interface EnumXSConstraint {
	Default;
	ПоУмолчанию;
	Fixed;
	Фиксированное;
}
declare type ПеречислениеОграничениеЗначенияXS = EnumXSConstraint;
interface EnumXSDisallowedSubstitutions {
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	Substitution;
	Подстановка;
	All;
	Все;
}
declare type ПеречислениеНедопустимыеПодстановкиXS = EnumXSDisallowedSubstitutions;
interface EnumXSSubstitutionGroupExclusions {
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	All;
	Все;
}
declare type ПеречислениеИсключенияГруппПодстановкиXS = EnumXSSubstitutionGroupExclusions;
interface EnumXSIdentityConstraintCategory {
	Key;
	Ключ;
	KeyRef;
	СсылкаНаКлюч;
	Unique;
	Уникальность;
}
declare type ПеречислениеКатегорияОграниченияИдентичностиXS = EnumXSIdentityConstraintCategory;
interface EnumXSXPathVariety {
	Selector;
	Селектор;
	Field;
	Поле;
}
declare type ПеречислениеВариантXPathXS = EnumXSXPathVariety;
interface EnumXSSimpleFinal {
	List;
	Список;
	Union;
	Объединение;
	Restriction;
	Ограничение;
	All;
	Все;
}
declare type ПеречислениеЗавершенностьПростогоТипаXS = EnumXSSimpleFinal;
interface EnumXSComplexFinal {
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	All;
	Все;
}
declare type ПеречислениеЗавершенностьСоставногоТипаXS = EnumXSComplexFinal;
interface EnumXSSchemaFinal {
	List;
	Список;
	Union;
	Объединение;
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	All;
	Все;
}
declare type ПеречислениеЗавершенностьСхемыXS = EnumXSSchemaFinal;
interface EnumXSSimpleTypeVariety {
	Atomic;
	Атомарная;
	List;
	Список;
	Union;
	Объединение;
}
declare type ПеречислениеВариантПростогоТипаXS = EnumXSSimpleTypeVariety;
interface EnumXSWhitespaceHandling {
	Preserve;
	Сохранять;
	Replace;
	Заменять;
	Collapse;
	Сворачивать;
}
declare type ПеречислениеОбработкаПробельныхСимволовXS = EnumXSWhitespaceHandling;
interface EnumXSProcessContents {
	Strict;
	Строгая;
	Skip;
	Пропустить;
	Lax;
	Слабая;
}
declare type ПеречислениеОбработкаСодержимогоXS = EnumXSProcessContents;
interface EnumXSNamespaceConstraintCategory {
	Any;
	Любое;
	Not;
	Кроме;
	Set;
	Набор;
}
declare type ПеречислениеКатегорияОграниченияПространствИменXS = EnumXSNamespaceConstraintCategory;
interface EnumXSCompositor {
	All;
	Все;
	Choice;
	Выбор;
	Sequence;
	Последовательность;
}
declare type ПеречислениеВидГруппыМоделиXS = EnumXSCompositor;
interface EnumXSDerivationMethod {
	Extension;
	Расширение;
	Restriction;
	Ограничение;
}
declare type ПеречислениеМетодНаследованияXS = EnumXSDerivationMethod;
interface EnumXSProhibitedSubstitutions {
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	All;
	Все;
}
declare type ПеречислениеЗапрещенныеПодстановкиXS = EnumXSProhibitedSubstitutions;
interface EnumXSContentModel {
	Simple;
	Простая;
	Complex;
	Составная;
}
declare type ПеречислениеМодельСодержимогоXS = EnumXSContentModel;
interface EnumXMLCanonicalizationType {
	XMLCanonicalization;
	КаноническийXML;
	XMLCanonicalizationWithComments;
	КаноническийXMLСКомментариями;
	XMLExclusiveCanonicalization;
	ИсключающийКаноническийXML;
	XMLExclusiveCanonicalizationWithComments;
	ИсключающийКаноническийXMLСКомментариями;
	XMLCanonicalization1_1;
	КаноническийXML1_1;
	XMLCanonicalization1_1WithComments;
	КаноническийXML1_1СКомментариями;
}
declare type ПеречислениеТипКаноническогоXML = EnumXMLCanonicalizationType;
interface EnumDOMXPathResultType {
	Any;
	Любой;
	Number;
	Число;
	String;
	Строка;
	Boolean;
	Булево;
	UnorderedNodeIterator;
	НеупорядоченныйИтераторУзлов;
	OrderedNodeIterator;
	УпорядоченныйИтераторУзлов;
	UnorderedNodeSnapshot;
	НеупорядоченныйСнимокУзлов;
	OrderedNodeSnapshot;
	УпорядоченныйСнимокУзлов;
	AnyUnorderedNode;
	ЛюбойНеупорядоченныйУзел;
	FirstOrderedNode;
	ПервыйУпорядоченныйУзел;
}
declare type ПеречислениеТипРезультатаDOMXPath = EnumDOMXPathResultType;
interface XMLDataType {
	TypeName: string;
	ИмяТипа: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
}
declare type ТипДанныхXML = XMLDataType;
declare var XMLNodeType: EnumXMLNodeType;
declare var ТипУзлаXML: EnumXMLNodeType;
declare var XMLTypeAssignment: EnumXMLTypeAssignment;
declare var НазначениеТипаXML: EnumXMLTypeAssignment;
declare var XMLAttributeType: EnumXMLAttributeType;
declare var ТипАтрибутаXML: EnumXMLAttributeType;
declare var XMLSpace: EnumXMLSpace;
declare var ПробельныеСимволыXML: EnumXMLSpace;
declare var XMLValidationType: EnumXMLValidationType;
declare var ТипПроверкиXML: EnumXMLValidationType;
declare var DOMNodeType: EnumDOMNodeType;
declare var ТипУзлаDOM: EnumDOMNodeType;
declare var DOMDocumentPosition: EnumDOMDocumentPosition;
declare var ПозицияВДокументеDOM: EnumDOMDocumentPosition;
declare var DOMBuilderAction: EnumDOMBuilderAction;
declare var ДействиеПостроителяDOM: EnumDOMBuilderAction;
declare var DOMNodeFilterParameters: EnumDOMNodeFilterParameters;
declare var ПараметрыОтбораУзловDOM: EnumDOMNodeFilterParameters;
declare var XSComponentType: EnumXSComponentType;
declare var ТипКомпонентыXS: EnumXSComponentType;
declare var XSAttributeUseCategory: EnumXSAttributeUseCategory;
declare var КатегорияИспользованияАтрибутаXS: EnumXSAttributeUseCategory;
declare var XSForm: EnumXSForm;
declare var ФормаПредставленияXS: EnumXSForm;
declare var XSConstraint: EnumXSConstraint;
declare var ОграничениеЗначенияXS: EnumXSConstraint;
declare var XSDisallowedSubstitutions: EnumXSDisallowedSubstitutions;
declare var НедопустимыеПодстановкиXS: EnumXSDisallowedSubstitutions;
declare var XSSubstitutionGroupExclusions: EnumXSSubstitutionGroupExclusions;
declare var ИсключенияГруппПодстановкиXS: EnumXSSubstitutionGroupExclusions;
declare var XSIdentityConstraintCategory: EnumXSIdentityConstraintCategory;
declare var КатегорияОграниченияИдентичностиXS: EnumXSIdentityConstraintCategory;
declare var XSXPathVariety: EnumXSXPathVariety;
declare var ВариантXPathXS: EnumXSXPathVariety;
declare var XSSimpleFinal: EnumXSSimpleFinal;
declare var ЗавершенностьПростогоТипаXS: EnumXSSimpleFinal;
declare var XSComplexFinal: EnumXSComplexFinal;
declare var ЗавершенностьСоставногоТипаXS: EnumXSComplexFinal;
declare var XSSchemaFinal: EnumXSSchemaFinal;
declare var ЗавершенностьСхемыXS: EnumXSSchemaFinal;
declare var XSSimpleTypeVariety: EnumXSSimpleTypeVariety;
declare var ВариантПростогоТипаXS: EnumXSSimpleTypeVariety;
declare var XSWhitespaceHandling: EnumXSWhitespaceHandling;
declare var ОбработкаПробельныхСимволовXS: EnumXSWhitespaceHandling;
declare var XSProcessContents: EnumXSProcessContents;
declare var ОбработкаСодержимогоXS: EnumXSProcessContents;
declare var XSNamespaceConstraintCategory: EnumXSNamespaceConstraintCategory;
declare var КатегорияОграниченияПространствИменXS: EnumXSNamespaceConstraintCategory;
declare var XSCompositor: EnumXSCompositor;
declare var ВидГруппыМоделиXS: EnumXSCompositor;
declare var XSDerivationMethod: EnumXSDerivationMethod;
declare var МетодНаследованияXS: EnumXSDerivationMethod;
declare var XSProhibitedSubstitutions: EnumXSProhibitedSubstitutions;
declare var ЗапрещенныеПодстановкиXS: EnumXSProhibitedSubstitutions;
declare var XSContentModel: EnumXSContentModel;
declare var МодельСодержимогоXS: EnumXSContentModel;
declare var XMLCanonicalizationType: EnumXMLCanonicalizationType;
declare var ТипКаноническогоXML: EnumXMLCanonicalizationType;
declare var DOMXPathResultType: EnumDOMXPathResultType;
declare var ТипРезультатаDOMXPath: EnumDOMXPathResultType;
declare function XMLString(... params): string;
declare function XMLСтрока(... params): string;
declare function XMLValue(... params);
declare function XMLЗначение(... params);
declare function XMLType(... params): XMLDataType;
declare function XMLТип(... params): XMLDataType;
declare function XMLTypeOf(... params): XMLDataType;
declare function XMLТипЗнч(... params): XMLDataType;
declare function FromXMLType(... params);
declare function ИзXMLТипа(... params);
declare function WriteXML(... params): void;
declare function ЗаписатьXML(... params): void;
declare function ReadXML(... params);
declare function ПрочитатьXML(... params);
declare function GetXMLType(... params): XMLDataType;
declare function ПолучитьXMLТип(... params): XMLDataType;
declare function CanReadXML(... params): boolean;
declare function ВозможностьЧтенияXML(... params): boolean;
declare function FindDisallowedXMLCharacters(... params);
declare function НайтиНедопустимыеСимволыXML(... params);
interface EnumXMLForm {
	Attribute;
	Атрибут;
	Element;
	Элемент;
	Text;
	Текст;
}
declare type ПеречислениеФормаXML = EnumXMLForm;
interface EnumXDTOFacetType {
	Length;
	Длина;
	MinLength;
	МинДлина;
	MaxLength;
	МаксДлина;
	Pattern;
	Образец;
	Enumeration;
	Перечисление;
	Whitespace;
	ПробельныеСимволы;
	MinInclusive;
	МинВключающее;
	MinExclusive;
	МинИсключающее;
	MaxInclusive;
	МаксВключающее;
	MaxExclusive;
	МаксИсключающее;
	TotalDigits;
	РазрядовВсего;
	FractionDigits;
	РазрядовДробнойЧасти;
}
declare type ПеречислениеВидФасетаXDTO = EnumXDTOFacetType;
interface XDTOFacetType {
}
interface XDTOFacet {
	Type: XDTOFacetType;
	Вид: XDTOFacetType;
	Value: string;
	Значение: string;
}
interface XDTOFacetCollection {
	Enumerations: XDTOFacetCollection;
	Перечисления: XDTOFacetCollection;
	Patterns: XDTOFacetCollection;
	Образцы: XDTOFacetCollection;
	Count(): number;
	Количество(): number;
	Get(... params): XDTOFacet;
	Получить(... params): XDTOFacet;
}
interface XDTOValueTypeCollection {
	Count(): number;
	Количество(): number;
	Get(... params): XDTOValueType;
	Получить(... params): XDTOValueType;
}
interface XDTOValueType {
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	BaseType: XDTOValueType;
	БазовыйТип: XDTOValueType;
	Facets: XDTOFacetCollection;
	Фасеты: XDTOFacetCollection;
	MemberTypes: XDTOValueTypeCollection;
	ТипыЧленовОбъединения: XDTOValueTypeCollection;
	ListItemType: XDTOValueType;
	ТипЭлементаСписка: XDTOValueType;
	Validate(... params): void;
	Проверить(... params): void;
	IsDescendant(... params): boolean;
	ЭтоПотомок(... params): boolean;
}
interface XDTOObjectType {
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	BaseType: XDTOValueType;
	БазовыйТип: XDTOValueType;
	Open: boolean;
	Открытый: boolean;
	Abstract: boolean;
	Абстрактный: boolean;
	Mixed: boolean;
	Смешанный: boolean;
	Ordered: boolean;
	Упорядоченный: boolean;
	Sequenced: boolean;
	Последовательный: boolean;
	Properties: XDTOPropertyCollection;
	Свойства: XDTOPropertyCollection;
	Validate(... params): void;
	Проверить(... params): void;
	IsDescendant(... params): boolean;
	ЭтоПотомок(... params): boolean;
}
interface XDTOSequence {
	Owner: XDTODataObject;
	Владелец: XDTODataObject;
	Count(): number;
	Количество(): number;
	GetProperty(... params): XDTOProperty;
	ПолучитьСвойство(... params): XDTOProperty;
	GetValue(... params);
	ПолучитьЗначение(... params);
	GetXDTOValue(... params);
	ПолучитьЗначениеXDTO(... params);
	GetText(... params);
	ПолучитьТекст(... params);
	SetValue(... params): void;
	УстановитьЗначение(... params): void;
	Add(... params): void;
	Добавить(... params): void;
	Insert(... params): void;
	Вставить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
}
interface XDTOList {
	Owner: XDTODataObject;
	Владелец: XDTODataObject;
	OwningProperty: XDTOProperty;
	ВладеющееСвойство: XDTOProperty;
	Count(): number;
	Количество(): number;
	Get(... params);
	Получить(... params);
	GetXDTO(... params);
	ПолучитьXDTO(... params);
	Set(... params);
	Установить(... params);
	Add(... params);
	Добавить(... params);
	Insert(... params);
	Вставить(... params);
	Delete(... params);
	Удалить(... params);
	Clear(): void;
	Очистить(): void;
}
interface XDTODataObject {
	Type(): XDTOObjectType;
	Тип(): XDTOObjectType;
	Owner(): XDTODataObject;
	Владелец(): XDTODataObject;
	OwningProperty(): XDTOProperty;
	ВладеющееСвойство(): XDTOProperty;
	Sequence(): XDTOSequence;
	Последовательность(): XDTOSequence;
	Properties(): XDTOPropertyCollection;
	Свойства(): XDTOPropertyCollection;
	Set(... params): void;
	Установить(... params): void;
	Get(... params);
	Получить(... params);
	GetXDTO(... params);
	ПолучитьXDTO(... params);
	GetList(... params): XDTOList;
	ПолучитьСписок(... params): XDTOList;
	Unset(... params): void;
	Сбросить(... params): void;
	IsSet(... params): boolean;
	Установлено(... params): boolean;
	Validate(): void;
	Проверить(): void;
	Add(... params): XDTOProperty;
	Добавить(... params): XDTOProperty;
}
interface XDTODataValueCollection {
	Count(): number;
	Количество(): number;
	Get(... params): XDTODataValue;
	Получить(... params): XDTODataValue;
}
interface XDTODataValue {
	LexicalValue: string;
	ЛексическоеЗначение: string;
	Value;
	Значение;
	List: XDTODataValueCollection;
	Список: XDTODataValueCollection;
	Type(): XDTOValueType;
	Тип(): XDTOValueType;
}
interface XMLForm {
}
interface XDTOProperty {
	OwnerType: XDTOObjectType;
	ТипВладелец: XDTOObjectType;
	OwnerObject: XDTODataObject;
	ОбъектВладелец: XDTODataObject;
	Name: string;
	Имя: string;
	Type: XDTOValueType | XDTOObjectType;
	Тип: XDTOValueType | XDTOObjectType;
	LowerBound: number;
	НижняяГраница: number;
	UpperBound: number;
	ВерхняяГраница: number;
	Nillable: boolean;
	ВозможноПустое: boolean;
	DefaultValue: XDTODataValue;
	ЗначениеПоУмолчанию: XDTODataValue;
	Fixed: boolean;
	Фиксированное: boolean;
	Form: XMLForm;
	Форма: XMLForm;
	LocalName: string;
	ЛокальноеИмя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Qualified: boolean;
	Квалифицированное: boolean;
}
interface XDTOPropertyCollection {
	Count(): number;
	Количество(): number;
	Get(... params): XDTOProperty;
	Получить(... params): XDTOProperty;
}
interface XDTOPackage {
	NamespaceURI: string;
	URIПространстваИмен: string;
	RootProperties: XDTOPropertyCollection;
	КорневыеСвойства: XDTOPropertyCollection;
	Dependencies: XDTOPackageCollection;
	Зависимости: XDTOPackageCollection;
	ElementFormQualified: boolean;
	КвалифицированнаяФормаЭлемента: boolean;
	AttributeFormQualified: boolean;
	КвалифицированнаяФормаАтрибута: boolean;
	Count(): number;
	Количество(): number;
	Get(... params): XDTOValueType | XDTOObjectType;
	Получить(... params): XDTOValueType | XDTOObjectType;
}
interface XDTOPackageCollection {
	Count(): number;
	Количество(): number;
	Get(... params): XDTOPackage;
	Получить(... params): XDTOPackage;
}
interface XSComponentType {
}
interface XSComponentFixedList {
	Count(): number;
	Количество(): number;
	Get(... params);
	Получить(... params);
	Contains(... params): boolean;
	Содержит(... params): boolean;
}
interface DOMNodeType {
}
interface DOMDocumentConfiguration {
	ParameterNames;
	ИменаПараметров;
	SetParameter(... params): void;
	УстановитьПараметр(... params): void;
	GetParameter(... params);
	ПолучитьПараметр(... params);
	CanSetParameter(... params): boolean;
	ВозможноУстановитьПараметр(... params): boolean;
}
declare type КонфигурацияДокументаDOM = DOMDocumentConfiguration;
interface DOMDocumentPosition {
}
interface DOMElementList {
	Count(): number;
	Количество(): number;
	Item(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Элемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
interface DOMNodeFilter {
	ShowAll: boolean;
	ОтображатьВсе: boolean;
	ShowElement: boolean;
	ОтображатьЭлемент: boolean;
	ShowAttribute: boolean;
	ОтображатьАтрибут: boolean;
	ShowText: boolean;
	ОтображатьТекст: boolean;
	ShowCDATASection: boolean;
	ОтображатьСекцииCDATA: boolean;
	ShowEntityReference: boolean;
	ОтображатьСсылкуНаСущность: boolean;
	ShowEntity: boolean;
	ОтображатьСущность: boolean;
	ShowProcessingInstruction: boolean;
	ОтображатьИнструкциюОбработки: boolean;
	ShowComment: boolean;
	ОтображатьКомментарий: boolean;
	ShowDocument: boolean;
	ОтображатьДокумент: boolean;
	ShowDocumentType: boolean;
	ОтображатьОпределениеТипаДокумента: boolean;
	ShowDocumentFragment: boolean;
	ОтображатьФрагментДокумента: boolean;
	ShowNotation: boolean;
	ОтображатьНотацию: boolean;
}
declare type ФильтрУзловDOM = DOMNodeFilter;
interface DOMNodeIterator {
	Root: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Корень: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Filter: DOMNodeFilter;
	Фильтр: DOMNodeFilter;
	ExpandEntityReference: boolean;
	РаскрыватьСсылкиНаСущности: boolean;
	NextNode(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	СледующийУзел(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	PreviousNode(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПредыдущийУзел(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Detach(): void;
	Отсоединить(): void;
}
declare type ИтераторУзловDOM = DOMNodeIterator;
interface DOMTreeWalker {
	Root: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Корень: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Filter: DOMNodeFilter;
	Фильтр: DOMNodeFilter;
	ExpandEntityReference: boolean;
	РаскрыватьСсылкиНаСущности: boolean;
	CurrentNode;
	ТекущийУзел;
	ParentNode(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	РодительскийУзел(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	FirstChild(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПервыйДочерний(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	LastChild(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПоследнийДочерний(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	PreviousSibling(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПредыдущийСоседний(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	NextSibling(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	СледующийСоседний(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	PreviousNode(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПредыдущийУзел(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	NextNode(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	СледующийУзел(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
declare type ОбходДереваDOM = DOMTreeWalker;
interface DOMXPathResultType {
}
interface XPathResult {
	ResultType: DOMXPathResultType;
	ТипРезультата: DOMXPathResultType;
	NumberValue: number;
	ЧисловоеЗначение: number;
	StringValue: string;
	СтроковоеЗначение: string;
	BooleanValue: boolean;
	БулевоЗначение: boolean;
	SingleNodeValue: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ОдиночныйУзелЗначение: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	InvalidIteratorState: boolean;
	НеверноеСостояниеИтератора: boolean;
	SnapshotLength: number;
	РазмерСнимка: number;
	IterateNext(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПолучитьСледующий(): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	SnapshotItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ЭлементСнимка(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
interface XPathExpression {
	Evaluate(... params): XPathResult;
	Вычислить(... params): XPathResult;
}
interface DOMNamespaceResolver {
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
}
declare type РазыменовательПространствИменDOM = DOMNamespaceResolver;
interface DOMDocument {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	DocType: DOMDocumentType;
	ОпределениеТипаДокумента: DOMDocumentType;
	DocumentElement: DOMElement;
	ЭлементДокумента: DOMElement;
	InputEncoding: string;
	КодировкаИсточника: string;
	StrictErrorChecking: boolean;
	СтрогаяПроверкаОшибок: boolean;
	DocumentURI: string;
	URIДокумента: string;
	XMLEncoding: string;
	КодировкаXML: string;
	Standalone: boolean;
	Автономный: boolean;
	XMLVersion: string;
	ВерсияXML: string;
	DOMConfig: DOMDocumentConfiguration;
	КонфигурацияDOM: DOMDocumentConfiguration;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	CreateElement(... params): DOMElement;
	СоздатьЭлемент(... params): DOMElement;
	CreateTextNode(... params): DOMText;
	СоздатьТекстовыйУзел(... params): DOMText;
	CreateComment(... params): DOMComment;
	СоздатьКомментарий(... params): DOMComment;
	CreateAttribute(... params): DOMAttribute;
	СоздатьАтрибут(... params): DOMAttribute;
	GetElementByTagName(... params): DOMElementList;
	ПолучитьЭлементыПоИмени(... params): DOMElementList;
	ImportNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ИмпортироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	GetElementById(... params): DOMElement;
	ПолучитьЭлементПоИдентификатору(... params): DOMElement;
	AdoptNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	АдаптироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	NormalizeDocument(): void;
	НормализоватьДокумент(): void;
	RenameNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПереименоватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	CreateNodeIterator(... params): DOMNodeIterator;
	СоздатьИтераторУзлов(... params): DOMNodeIterator;
	CreateTreeWalker(... params): DOMTreeWalker;
	СоздатьОбходДерева(... params): DOMTreeWalker;
	CreateDocumentFragment(): DOMDocumentFragment;
	СоздатьФрагментДокумента(): DOMDocumentFragment;
	CreateProcessingInstruction(... params): DOMProcessingInstruction;
	СоздатьИнструкциюОбработки(... params): DOMProcessingInstruction;
	CreateCDATASection(... params): DOMCDATASection;
	СоздатьСекциюCDATA(... params): DOMCDATASection;
	CreateEntityReference(... params): DOMEntityReference;
	СоздатьСсылкуНаСущность(... params): DOMEntityReference;
	CreateXPathExpression(... params): XPathExpression;
	СоздатьВыражениеXPath(... params): XPathExpression;
	CreateNSResolver(... params): DOMNamespaceResolver;
	СоздатьРазыменовательПИ(... params): DOMNamespaceResolver;
	EvaluateXPathExpression(... params): XPathResult;
	ВычислитьВыражениеXPath(... params): XPathResult;
}
declare type ДокументDOM = DOMDocument;
interface DOMNotation {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	PublicId: string;
	ПубличныйИдентификатор: string;
	SystemId: string;
	СистемныйИдентификатор: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
}
interface DOMAttributeMap {
	Count(): number;
	Количество(): number;
	GetNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПолучитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	SetNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	УстановитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	RemoveNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	УдалитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Item(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Элемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
interface DOMProcessingInstruction {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	Target: string;
	Цель: string;
	Data: string;
	Данные: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
}
interface DOMComment {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	Data: string;
	Данные: string;
	Length: number;
	Размер: number;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	SubstringData(... params): string;
	ВыбратьДанные(... params): string;
	AppendData(... params): void;
	ДобавитьДанные(... params): void;
	InsertData(... params): void;
	ВставитьДанные(... params): void;
	DeleteData(... params): void;
	УдалитьДанные(... params): void;
	ReplaceData(... params): void;
	ЗаменитьДанные(... params): void;
}
interface DOMText {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	Data: string;
	Данные: string;
	Length: number;
	Размер: number;
	IsElementContentWhitespace: boolean;
	ЭтоПробельныеСимволыЭлемента: boolean;
	WholeText: string;
	ПолныйТекст: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	SubstringData(... params): string;
	ВыбратьДанные(... params): string;
	AppendData(... params): void;
	ДобавитьДанные(... params): void;
	InsertData(... params): void;
	ВставитьДанные(... params): void;
	DeleteData(... params): void;
	УдалитьДанные(... params): void;
	ReplaceData(... params): void;
	ЗаменитьДанные(... params): void;
	SplitText(... params): DOMText;
	РазделитьТекст(... params): DOMText;
	ReplaceWholeText(... params): DOMText;
	ЗаменитьПолныйТекст(... params): DOMText;
}
interface DOMCDATASection {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	Data: string;
	Данные: string;
	Length: number;
	Размер: number;
	IsElementContentWhitespace: boolean;
	ЭтоПробельныеСимволыЭлемента: boolean;
	WholeText: string;
	ПолныйТекст: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	SubstringData(... params): string;
	ВыбратьДанные(... params): string;
	AppendData(... params): void;
	ДобавитьДанные(... params): void;
	InsertData(... params): void;
	ВставитьДанные(... params): void;
	DeleteData(... params): void;
	УдалитьДанные(... params): void;
	ReplaceData(... params): void;
	ЗаменитьДанные(... params): void;
	SplitText(... params): DOMText;
	РазделитьТекст(... params): DOMText;
	ReplaceWholeText(... params): DOMText;
	ЗаменитьПолныйТекст(... params): DOMText;
}
interface DOMNodeList {
	Count(): number;
	Количество(): number;
	Item(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Элемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
interface DOMEntityMap {
	Count(): number;
	Количество(): number;
	GetNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПолучитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	SetNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	УстановитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	RemoveNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	УдалитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Item(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Элемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
interface DOMNotationMap {
	Count(): number;
	Количество(): number;
	GetNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПолучитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	SetNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	УстановитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	RemoveNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	УдалитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Item(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Элемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
interface DOMDocumentType {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	Name: string;
	Имя: string;
	Entities: DOMEntityMap;
	Сущности: DOMEntityMap;
	Notations: DOMNotationMap;
	Нотации: DOMNotationMap;
	PublicId: string;
	ПубличныйИдентификатор: string;
	SystemId: string;
	СистемныйИдентификатор: string;
	InternalSubset: string;
	ВнутреннееПодмножество: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
}
declare type ОпределениеТипаДокументаDOM = DOMDocumentType;
interface DOMDocumentFragment {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
}
interface DOMEntityReference {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
}
interface DOMEntity {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	PublicId: string;
	ПубличныйИдентификатор: string;
	SystemId: string;
	СистемныйИдентификатор: string;
	NotationName: string;
	ИмяНотации: string;
	InputEncoding: string;
	КодировкаИсточника: string;
	XMLEncoding: string;
	КодировкаXML: string;
	XMLVersion: string;
	ВерсияXML: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
}
interface DOMAttribute {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	Name: string;
	Имя: string;
	Specified: boolean;
	Указан: boolean;
	Value: string;
	Значение: string;
	OwnerElement: DOMElement;
	ЭлементВладелец: DOMElement;
	IsId: boolean;
	ЯвляетсяИдентификатором: boolean;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
}
interface Map {
	Count(): number;
	Количество(): number;
	Insert(... params): void;
	Вставить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Get(... params);
	Получить(... params);
}
declare type Соответствие = Map;
interface DOMElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface XSForm {
}
interface XSSchemaFinalUnion {
	List;
	Список;
	Union;
	Объединение;
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	All;
	Все;
	Values(): ArrayV8;
	Значения(): ArrayV8;
}
declare type ОбъединениеЗавершенностиСхемыXS = XSSchemaFinalUnion;
interface XSProhibitedSubstitutionsUnion {
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	All;
	Все;
	Values(): ArrayV8;
	Значения(): ArrayV8;
}
declare type ОбъединениеЗапрещенныхПодстановокXS = XSProhibitedSubstitutionsUnion;
interface XSComponentList {
	Count(): number;
	Количество(): number;
	Get(... params);
	Получить(... params);
	Insert(... params): void;
	Вставить(... params): void;
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params);
	Удалить(... params);
	Clear(): void;
	Очистить(): void;
	Set(... params): void;
	Установить(... params): void;
	Contains(... params): boolean;
	Содержит(... params): boolean;
}
interface XSNamedComponentMap {
	Count(): number;
	Количество(): number;
	Get(... params);
	Получить(... params);
}
interface XSSimpleTypeVariety {
}
interface XSAnnotation {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Content: XSComponentFixedList;
	Состав: XSComponentFixedList;
	AppInfos: XSComponentFixedList;
	ИнформацияДляПриложения: XSComponentFixedList;
	Documentations: XSComponentFixedList;
	Документация: XSComponentFixedList;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type АннотацияXS = XSAnnotation;
interface XMLExpandedName {
	NamespaceURI: string;
	URIПространстваИмен: string;
	LocalName: string;
	ЛокальноеИмя: string;
}
declare type РасширенноеИмяXML = XMLExpandedName;
interface XMLExpandedNameList {
	Count(): number;
	Количество(): number;
	Get(... params): XMLExpandedName;
	Получить(... params): XMLExpandedName;
	Insert(... params): void;
	Вставить(... params): void;
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Set(... params): void;
	Установить(... params): void;
}
interface XSSimpleFinalUnion {
	List;
	Список;
	Union;
	Объединение;
	Restriction;
	Ограничение;
	All;
	Все;
	Values(): ArrayV8;
	Значения(): ArrayV8;
}
declare type ОбъединениеЗавершенностиПростогоТипаXS = XSSimpleFinalUnion;
interface XSSimpleTypeDefinition {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	RootType;
	КорневойТип;
	BaseType;
	БазовыйТип;
	Variety: XSSimpleTypeVariety;
	Вариант: XSSimpleTypeVariety;
	VarietyAnnotation: XSAnnotation;
	АннотацияВарианта: XSAnnotation;
	BaseTypeName: XMLExpandedName;
	ИмяБазовогоТипа: XMLExpandedName;
	BaseTypeDefinition: XSSimpleTypeDefinition;
	ОпределениеБазовогоТипа: XSSimpleTypeDefinition;
	PrimitiveTypeDefinition: XSSimpleTypeDefinition;
	ОпределениеПримитивногоТипа: XSSimpleTypeDefinition;
	ItemTypeName: XMLExpandedName;
	ИмяТипаЭлемента: XMLExpandedName;
	ItemTypeDefinition: XSSimpleTypeDefinition;
	ОпределениеТипаЭлемента: XSSimpleTypeDefinition;
	MemberTypeNames: XMLExpandedNameList;
	ИменаТиповОбъединения: XMLExpandedNameList;
	MemberTypeDefinitions: XSComponentList;
	ОпределенияТиповОбъединения: XSComponentList;
	Final: XSSimpleFinalUnion;
	Завершенность: XSSimpleFinalUnion;
	Facets: XSComponentList;
	Фасеты: XSComponentList;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
	IsCircular(): boolean;
	ЭтоОпределениеЗациклено(): boolean;
}
declare type ОпределениеПростогоТипаXS = XSSimpleTypeDefinition;
interface XSContentModel {
}
interface XSDerivationMethod {
}
interface XSComplexFinalUnion {
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	All;
	Все;
	Values(): ArrayV8;
	Значения(): ArrayV8;
}
declare type ОбъединениеЗавершенностиСоставногоТипаXS = XSComplexFinalUnion;
interface XSProcessContents {
}
interface XSNamespaceConstraintCategory {
}
interface XSWildcard {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	ProcessContents: XSProcessContents;
	ВидОбработкиСодержимого: XSProcessContents;
	LexicalNamespaceConstraint: string;
	ЛексическоеЗначениеОграниченияПространствИмен: string;
	NamespaceConstraintCategory: XSNamespaceConstraintCategory;
	КатегорияОграниченияПространствИмен: XSNamespaceConstraintCategory;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
	NamespaceConstraint(): ArrayV8;
	ОграничениеПространствИмен(): ArrayV8;
	Allow(... params): boolean;
	Допускает(... params): boolean;
	IsWildcardSubset(... params): boolean;
	ЭтаМаскаПодмножество(... params): boolean;
}
declare type МаскаXS = XSWildcard;
interface XSComplexTypeDefinition {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	RootType;
	КорневойТип;
	BaseType;
	БазовыйТип;
	ContentModel: XSContentModel;
	МодельСодержимого: XSContentModel;
	DerivationMethod: XSDerivationMethod;
	МетодНаследования: XSDerivationMethod;
	DerivationAnnotation: XSAnnotation;
	АннотацияНаследования: XSAnnotation;
	Final: XSComplexFinalUnion;
	Завершенность: XSComplexFinalUnion;
	Content;
	Содержимое;
	BaseTypeDefinition: XSSimpleTypeDefinition;
	ОпределениеБазовогоТипа: XSSimpleTypeDefinition;
	Facets: XSComponentList;
	Фасеты: XSComponentList;
	ContentModelAnnotation: XSAnnotation;
	АннотацияМоделиСодержимого: XSAnnotation;
	Abstract: boolean;
	Абстрактный: boolean;
	Mixed: boolean;
	Смешанный: boolean;
	Block: XSProhibitedSubstitutionsUnion;
	Блокировка: XSProhibitedSubstitutionsUnion;
	ProhibitedSubstitutions: XSProhibitedSubstitutionsUnion;
	ЗапрещенныеПодстановки: XSProhibitedSubstitutionsUnion;
	BaseTypeName: XMLExpandedNameList;
	ИмяБазовогоТипа: XMLExpandedNameList;
	AttributeWildcard: XSWildcard;
	МаскаАтрибутов: XSWildcard;
	Attributes: XSComponentList;
	Атрибуты: XSComponentList;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
	IsCircular(): boolean;
	ЭтоОпределениеЗациклено(): boolean;
	AttributeUses(): XSComponentFixedList;
	ИспользованиеАтрибутов(): XSComponentFixedList;
}
declare type ОпределениеСоставногоТипаXS = XSComplexTypeDefinition;
interface XSConstraint {
}
interface XSDisallowedSubstitutionsUnion {
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	Substitution;
	Подстановка;
	All;
	Все;
	Values(): ArrayV8;
	Значения(): ArrayV8;
}
declare type ОбъединениеНедопустимыхПодстановкиXS = XSDisallowedSubstitutionsUnion;
interface XSSubstitutionGroupExclusionsUnion {
	Extension;
	Расширение;
	Restriction;
	Ограничение;
	All;
	Все;
	Values(): ArrayV8;
	Значения(): ArrayV8;
}
declare type ОбъединениеИсключенийГруппПодстановкиXS = XSSubstitutionGroupExclusionsUnion;
interface XSElementDeclaration {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Value;
	Значение;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	Constraint: XSConstraint;
	Ограничение: XSConstraint;
	Form: XSForm;
	Форма: XSForm;
	IsGlobal: boolean;
	ЭтоГлобальноеОбъявление: boolean;
	Reference: XMLExpandedName;
	Ссылка: XMLExpandedName;
	IsReference: boolean;
	ЭтоСсылка: boolean;
	Scope;
	ОбластьВидимости;
	TypeName: XMLExpandedName;
	ИмяТипа: XMLExpandedName;
	AnonymousTypeDefinition;
	АнонимноеОпределениеТипа;
	Nillable: boolean;
	ВозможноПустой: boolean;
	Abstract: boolean;
	Абстрактный: boolean;
	Block: XSDisallowedSubstitutionsUnion;
	Блокировка: XSDisallowedSubstitutionsUnion;
	DisallowedSubstitutions: XSDisallowedSubstitutionsUnion;
	НедопустимыеПодстановки: XSDisallowedSubstitutionsUnion;
	Final: XSSubstitutionGroupExclusionsUnion;
	Завершенность: XSSubstitutionGroupExclusionsUnion;
	SubstitutionGroupExclusions: XSSubstitutionGroupExclusionsUnion;
	ИсключенияГруппПодстановки: XSSubstitutionGroupExclusionsUnion;
	IdentityConstraints: XSComponentList;
	ОграниченияИдентичности: XSComponentList;
	SubstitutionGroupAffiliation: XMLExpandedName;
	ПрисоединениеКГруппеПодстановки: XMLExpandedName;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
	ResolveReference();
	РазрешитьСсылку();
	TypeDefinition();
	ОпределениеТипа();
	IsCircular(): boolean;
	ЭтоОбъявлениеЗациклено(): boolean;
}
declare type ОбъявлениеЭлементаXS = XSElementDeclaration;
interface XSAttributeDeclaration {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Value;
	Значение;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	Constraint: XSConstraint;
	Ограничение: XSConstraint;
	Form: XSForm;
	Форма: XSForm;
	IsGlobal: boolean;
	ЭтоГлобальноеОбъявление: boolean;
	Reference: XMLExpandedName;
	Ссылка: XMLExpandedName;
	IsReference: boolean;
	ЭтоСсылка: boolean;
	Scope;
	ОбластьВидимости;
	TypeName: XMLExpandedName;
	ИмяТипа: XMLExpandedName;
	AnonymousTypeDefinition;
	АнонимноеОпределениеТипа;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
	ResolveReference();
	РазрешитьСсылку();
	TypeDefinition();
	ОпределениеТипа();
}
declare type ОбъявлениеАтрибутаXS = XSAttributeDeclaration;
interface XSCompositor {
}
interface XSModelGroup {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Compositor: XSCompositor;
	ВидГруппы: XSCompositor;
	Particles: XSComponentList;
	Фрагменты: XSComponentList;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ГруппаМоделиXS = XSModelGroup;
interface XSModelGroupDefinition {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	IsReference: boolean;
	ЭтоСсылка: boolean;
	Reference: XMLExpandedName;
	Ссылка: XMLExpandedName;
	ModelGroup: XSModelGroup;
	ГруппаМодели: XSModelGroup;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
	IsCircular(): boolean;
	ЭтоОпределениеЗациклено(): boolean;
	ResolveReference(): XSModelGroupDefinition;
	РазрешитьСсылку(): XSModelGroupDefinition;
}
declare type ОпределениеГруппыМоделиXS = XSModelGroupDefinition;
interface XSAttributeGroupDefinition {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	IsReference: boolean;
	ЭтоСсылка: boolean;
	Reference: XMLExpandedName;
	Ссылка: XMLExpandedName;
	Wildcard: XSWildcard;
	Маска: XSWildcard;
	Content: XSComponentList;
	Содержимое: XSComponentList;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
	IsCircular(): boolean;
	ЭтоОпределениеЗациклено(): boolean;
	ResolveReference(): XSModelGroupDefinition;
	РазрешитьСсылку(): XSModelGroupDefinition;
	AttributeUses(): XSComponentFixedList;
	ИспользованиеАтрибутов(): XSComponentFixedList;
}
declare type ОпределениеГруппыАтрибутовXS = XSAttributeGroupDefinition;
interface XMLSchema {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	DOMDocument: DOMDocument;
	ДокументDOM: DOMDocument;
	SchemaLocation: string;
	РасположениеСхемы: string;
	TargetNamespace: string;
	ПространствоИмен: string;
	AttributeFormDefault: XSForm;
	ФормаАтрибутовПоУмолчанию: XSForm;
	ElementFormDefault: XSForm;
	ФормаЭлементовПоУмолчанию: XSForm;
	FinalDefault: XSSchemaFinalUnion;
	ЗавершенностьПоУмолчанию: XSSchemaFinalUnion;
	BlockDefault: XSProhibitedSubstitutionsUnion;
	БлокировкаПоУмолчанию: XSProhibitedSubstitutionsUnion;
	Version: string;
	Версия: string;
	Lang;
	Язык;
	Content: XSComponentList;
	Содержимое: XSComponentList;
	Directives: XSComponentList;
	Директивы: XSComponentList;
	TypeDefinitions: XSNamedComponentMap;
	ОпределенияТипов: XSNamedComponentMap;
	AttributeDeclarations: XSNamedComponentMap;
	ОбъявленияАтрибутов: XSNamedComponentMap;
	ElementDeclarations: XSNamedComponentMap;
	ОбъявленияЭлементов: XSNamedComponentMap;
	NotationDeclarations: XSNamedComponentMap;
	ОбъявленияНотаций: XSNamedComponentMap;
	AttributeGroupDefinitions: XSNamedComponentMap;
	ОпределенияГруппАтрибутов: XSNamedComponentMap;
	ModelGroupDefinitions: XSNamedComponentMap;
	ОпределенияГруппМоделей: XSNamedComponentMap;
	IdentityConstraintDefinitions: XSNamedComponentMap;
	ОпределенияОграниченийИдентичности: XSNamedComponentMap;
	Annotations: XSComponentFixedList;
	Аннотации: XSComponentFixedList;
	SchemaForSchemaPrefix: string;
	ПрефиксСхемыДляСхемыXML: string;
	SchemaForSchemaNamespaceURI: string;
	URIПространстваИменСхемыДляСхемыXML: string;
	SchemaForSchema: XMLSchema;
	СхемаДляСхемыXML: XMLSchema;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
	ResolveTypeDefinition(... params): XSSimpleTypeDefinition | XSComplexTypeDefinition;
	РазрешитьОпределениеТипа(... params): XSSimpleTypeDefinition | XSComplexTypeDefinition;
	ResolveElementDeclaration(... params): XSElementDeclaration;
	РазрешитьОбъявлениеЭлемента(... params): XSElementDeclaration;
	ResolveAttributeDeclaration(... params): XSAttributeDeclaration;
	РазрешитьОбъявлениеАтрибута(... params): XSAttributeDeclaration;
	ResolveAttributeGroupDefinition(... params): XSAttributeGroupDefinition;
	РазрешитьОпределениеГруппыАтрибутов(... params): XSAttributeGroupDefinition;
	ResolveModelGroupDefinition(... params): XSModelGroupDefinition;
	РазрешитьОпределениеГруппыМоделей(... params): XSModelGroupDefinition;
}
declare type СхемаXML = XMLSchema;
interface XMLSchemaSet {
	Count(): number;
	Количество(): number;
	Get(... params): XMLSchema;
	Получить(... params): XMLSchema;
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): XMLSchema;
	Удалить(... params): XMLSchema;
	Validate(... params): boolean;
	Проверить(... params): boolean;
}
declare type НаборСхемXML = XMLSchemaSet;
interface XDTOFactory {
	Packages: XDTOPackageCollection;
	Пакеты: XDTOPackageCollection;
	Type(... params): XDTOValueType | XDTOObjectType;
	Тип(... params): XDTOValueType | XDTOObjectType;
	Create(... params): XDTODataObject | XDTODataValue;
	Создать(... params): XDTODataObject | XDTODataValue;
	Cast(... params): XDTODataValue;
	Привести(... params): XDTODataValue;
	WriteXML(... params): void;
	ЗаписатьXML(... params): void;
	ReadXML(... params);
	ПрочитатьXML(... params);
	ExportXMLSchema(... params): XMLSchemaSet;
	ЭкспортСхемыXML(... params): XMLSchemaSet;
	ExportXDTOModel(... params): XDTODataObject;
	ЭкспортМоделиXDTO(... params): XDTODataObject;
	ReadJSON(... params);
	ПрочитатьJSON(... params);
	WriteJSON(... params): void;
	ЗаписатьJSON(... params): void;
}
declare type ФабрикаXDTO = XDTOFactory;
interface XDTOSerializer {
	Factory: XDTOFactory;
	Фабрика: XDTOFactory;
	XMLString(... params): string;
	XMLСтрока(... params): string;
	XMLValue(... params);
	XMLЗначение(... params);
	XMLType(... params): XMLDataType;
	XMLТип(... params): XMLDataType;
	XMLTypeOf(... params): XMLDataType;
	XMLТипЗнч(... params): XMLDataType;
	FromXMLType(... params);
	ИзXMLТипа(... params);
	WriteXML(... params): void;
	ЗаписатьXML(... params): void;
	ReadXML(... params);
	ПрочитатьXML(... params);
	GetXMLType(... params);
	ПолучитьXMLТип(... params);
	CanReadXML(... params): boolean;
	ВозможностьЧтенияXML(... params): boolean;
	WriteXDTO(... params): XDTODataObject | XDTODataValue;
	ЗаписатьXDTO(... params): XDTODataObject | XDTODataValue;
	ReadXDTO(... params);
	ПрочитатьXDTO(... params);
	WriteJSON(... params): void;
	ЗаписатьJSON(... params): void;
	ReadJSON(... params);
	ПрочитатьJSON(... params);
}
declare type СериализаторXDTO = XDTOSerializer;
declare var XMLForm: EnumXMLForm;
declare var ФормаXML: EnumXMLForm;
declare var XDTOFacetType: EnumXDTOFacetType;
declare var ВидФасетаXDTO: EnumXDTOFacetType;
declare var XDTOFactory: XDTOFactory;
declare var ФабрикаXDTO: XDTOFactory;
declare var XDTOSerializer: XDTOSerializer;
declare var СериализаторXDTO: XDTOSerializer;
declare function ImportXDTOModel(... params): XDTODataObject;
declare function ИмпортМоделиXDTO(... params): XDTODataObject;
declare function CreateXDTOFactory(... params): XDTOFactory;
declare function СоздатьФабрикуXDTO(... params): XDTOFactory;
interface EnumFileCompareMethod {
	TextDocument;
	ТекстовыйДокумент;
	SpreadsheetDocument;
	ТабличныйДокумент;
	Binary;
	Двоичное;
}
declare type ПеречислениеСпособСравненияФайлов = EnumFileCompareMethod;
declare var FileCompareMethod: EnumFileCompareMethod;
declare var СпособСравненияФайлов: EnumFileCompareMethod;
interface EnumFileDialogMode {
	Open;
	Открытие;
	Save;
	Сохранение;
	ChooseDirectory;
	ВыборКаталога;
}
declare type ПеречислениеРежимДиалогаВыбораФайла = EnumFileDialogMode;
declare var FileDialogMode: EnumFileDialogMode;
declare var РежимДиалогаВыбораФайла: EnumFileDialogMode;
declare function InstallCryptoExtension(): void;
declare function УстановитьРасширениеРаботыСКриптографией(): void;
declare function BeginInstallCryptoExtension(... params): void;
declare function НачатьУстановкуРасширенияРаботыСКриптографией(... params): void;
declare function AttachCryptoExtension(): boolean;
declare function ПодключитьРасширениеРаботыСКриптографией(): boolean;
declare function BeginAttachingCryptoExtension(... params): void;
declare function НачатьПодключениеРасширенияРаботыСКриптографией(... params): void;
interface EnumVerticalAlign {
	Top;
	Верх;
	Center;
	Центр;
	Bottom;
	Низ;
}
declare type ПеречислениеВертикальноеПоложение = EnumVerticalAlign;
interface EnumHorizontalAlign {
	Left;
	Лево;
	Center;
	Центр;
	Right;
	Право;
	Justify;
	ПоШирине;
	Auto;
	Авто;
}
declare type ПеречислениеГоризонтальноеПоложение = EnumHorizontalAlign;
interface EnumPageOrientation {
	Portrait;
	Портрет;
	Landscape;
	Ландшафт;
}
declare type ПеречислениеОриентацияСтраницы = EnumPageOrientation;
interface EnumPictureSize {
	RealSize;
	РеальныйРазмер;
	Stretch;
	Растянуть;
	Proportionally;
	Пропорционально;
	Tile;
	Черепица;
	AutoSize;
	АвтоРазмер;
	RealSizeIgnoreScale;
	РеальныйРазмерБезУчетаМасштаба;
	AutoSizeIgnoreScale;
	АвтоРазмерБезУчетаМасштаба;
}
declare type ПеречислениеРазмерКартинки = EnumPictureSize;
interface EnumPictureFormat {
	UnknownFormat;
	НеизвестныйФормат;
	BMP;
	GIF;
	Icon;
	JPEG;
	PNG;
	TIFF;
	EMF;
	WMF;
	SVG;
}
declare type ПеречислениеФорматКартинки = EnumPictureFormat;
interface EnumAllowedLength {
	Fixed;
	Фиксированная;
	Variable;
	Переменная;
}
declare type ПеречислениеДопустимаяДлина = EnumAllowedLength;
interface EnumAllowedSign {
	Any;
	Любой;
	Nonnegative;
	Неотрицательный;
}
declare type ПеречислениеДопустимыйЗнак = EnumAllowedSign;
interface EnumDateFractions {
	Date;
	Дата;
	Time;
	Время;
	DateTime;
	ДатаВремя;
}
declare type ПеречислениеЧастиДаты = EnumDateFractions;
interface EnumRoundMode {
	Round15as10;
	Окр15как10;
	Round15as20;
	Окр15как20;
}
declare type ПеречислениеРежимОкругления = EnumRoundMode;
interface Chars {
	CR;
	ВК;
	LF;
	ПС;
	FF;
	ПФ;
	Tab;
	Таб;
	VTab;
	ВТаб;
	NBSp;
	НПП;
}
interface EnumSortDirection {
	Asc;
	Возр;
	Desc;
	Убыв;
}
declare type ПеречислениеНаправлениеСортировки = EnumSortDirection;
interface EnumTextEncoding {
	UTF16;
	UTF8;
	ANSI;
	OEM;
	System;
	Системная;
}
declare type ПеречислениеКодировкаТекста = EnumTextEncoding;
interface EnumUseOutput {
	Auto;
	Авто;
	Enable;
	Разрешить;
	Disable;
	Запретить;
}
declare type ПеречислениеИспользованиеВывода = EnumUseOutput;
interface EnumPrintDialogUseMode {
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеРежимИспользованияДиалогаПечати = EnumPrintDialogUseMode;
interface EnumFontType {
	Absolute;
	Абсолютный;
	StyleItem;
	ЭлементСтиля;
	WindowsFont;
	WindowsШрифт;
	AutoFont;
	АвтоШрифт;
}
declare type ПеречислениеВидШрифта = EnumFontType;
interface EnumBorderType {
	Absolute;
	Абсолютная;
	StyleItem;
	ЭлементСтиля;
}
declare type ПеречислениеВидРамки = EnumBorderType;
interface EnumControlBorderType {
	WithoutBorder;
	БезРамки;
	Double;
	Двойная;
	Single;
	Одинарная;
	Embossed;
	Выпуклая;
	Indented;
	Вдавленная;
	Underline;
	Подчеркивание;
	DoubleUnderline;
	ДвойноеПодчеркивание;
	Rounded;
	Скругленная;
	Overline;
	ЧертаСверху;
}
declare type ПеречислениеТипРамкиЭлементаУправления = EnumControlBorderType;
interface WebColors {
	White: Color;
	Белый: Color;
	Snow: Color;
	Белоснежный: Color;
	HoneyDew: Color;
	Роса: Color;
	MintCream: Color;
	МятныйКрем: Color;
	Azure: Color;
	Лазурный: Color;
	AliceBlue: Color;
	АкварельноСиний: Color;
	GhostWhite: Color;
	ПризрачноБелый: Color;
	WhiteSmoke: Color;
	ДымчатоБелый: Color;
	SeaShell: Color;
	Перламутровый: Color;
	Beige: Color;
	Бежевый: Color;
	OldLace: Color;
	СтароеКружево: Color;
	Cream: Color;
	Кремовый: Color;
	FloralWhite: Color;
	ЦветокБелый: Color;
	Ivory: Color;
	СлоноваяКость: Color;
	AntiqueWhite: Color;
	АнтикБелый: Color;
	Linen: Color;
	Льняной: Color;
	LavenderBlush: Color;
	ГолубойСКраснымОттенком: Color;
	MistyRose: Color;
	ТусклоРозовый: Color;
	Gainsboro: Color;
	СеребристоСерый: Color;
	LightGray: Color;
	СветлоСерый: Color;
	Silver: Color;
	Серебряный: Color;
	DarkGray: Color;
	ТемноСерый: Color;
	MediumGray: Color;
	НейтральноСерый: Color;
	Gray: Color;
	Серый: Color;
	DimGray: Color;
	ТусклоСерый: Color;
	LightSlateGray: Color;
	СветлоГрифельноСерый: Color;
	SlateGray: Color;
	ГрифельноСерый: Color;
	DarkSlateGray: Color;
	ТемноГрифельноСерый: Color;
	Black: Color;
	Черный: Color;
	IndianRed: Color;
	Киноварь: Color;
	LightCoral: Color;
	СветлоКоралловый: Color;
	Salmon: Color;
	Лосось: Color;
	DarkSalmon: Color;
	ЛососьТемный: Color;
	LightSalmon: Color;
	ЛососьСветлый: Color;
	Crimson: Color;
	Малиновый: Color;
	Red: Color;
	Красный: Color;
	FireBrick: Color;
	Кирпичный: Color;
	DarkRed: Color;
	ТемноКрасный: Color;
	Pink: Color;
	Розовый: Color;
	LightPink: Color;
	СветлоРозовый: Color;
	HotPink: Color;
	ТеплоРозовый: Color;
	DeepPink: Color;
	НасыщенноРозовый: Color;
	MediumVioletRed: Color;
	НейтральноФиолетовоКрасный: Color;
	VioletRed: Color;
	КрасноФиолетовый: Color;
	PaleVioletRed: Color;
	БледноКрасноФиолетовый: Color;
	Coral: Color;
	Коралловый: Color;
	Tomato: Color;
	Томатный: Color;
	OrangeRed: Color;
	ОранжевоКрасный: Color;
	DarkOrange: Color;
	ТемноОранжевый: Color;
	Orange: Color;
	Оранжевый: Color;
	Gold: Color;
	Золотой: Color;
	Yellow: Color;
	Желтый: Color;
	LightYellow: Color;
	СветлоЖелтый: Color;
	LemonChiffon: Color;
	Лимонный: Color;
	LightGoldenRodYellow: Color;
	СветлоЖелтыйЗолотистый: Color;
	PapayaWhip: Color;
	ТопленоеМолоко: Color;
	Moccasin: Color;
	ЗамшаСветлый: Color;
	PeachPuff: Color;
	Персиковый: Color;
	PaleGoldenrod: Color;
	БледноЗолотистый: Color;
	Khaki: Color;
	Хаки: Color;
	DarkKhaki: Color;
	ХакиТемный: Color;
	Lavender: Color;
	БледноЛиловый: Color;
	Thistle: Color;
	БледноСиреневый: Color;
	Plum: Color;
	Сливовый: Color;
	Violet: Color;
	Фиолетовый: Color;
	Orchid: Color;
	Орхидея: Color;
	Fuchsia: Color;
	Фуксия: Color;
	Magenta: Color;
	Фуксин: Color;
	MediumOrchid: Color;
	ОрхидеяНейтральный: Color;
	MediumPurple: Color;
	НейтральноПурпурный: Color;
	BlueViolet: Color;
	СинеФиолетовый: Color;
	DarkViolet: Color;
	ТемноФиолетовый: Color;
	DarkOrchid: Color;
	ОрхидеяТемный: Color;
	DarkMagenta: Color;
	ФуксинТемный: Color;
	Purple: Color;
	Пурпурный: Color;
	Indigo: Color;
	Индиго: Color;
	LightSlateBlue: Color;
	СветлоГрифельноСиний: Color;
	SlateBlue: Color;
	ГрифельноСиний: Color;
	DarkSlateBlue: Color;
	ТемноГрифельноСиний: Color;
	MediumSlateBlue: Color;
	НейтральноГрифельноСиний: Color;
	GreenYellow: Color;
	ЗеленоЖелтый: Color;
	Chartreuse: Color;
	ЗеленоватоЖелтый: Color;
	LawnGreen: Color;
	ЗеленаяЛужайка: Color;
	Lime: Color;
	ЗеленоватоЛимонный: Color;
	LimeGreen: Color;
	ЛимонноЗеленый: Color;
	PaleGreen: Color;
	БледноЗеленый: Color;
	LightGreen: Color;
	СветлоЗеленый: Color;
	MediumSpringGreen: Color;
	НейтральноВесеннеЗеленый: Color;
	SpringGreen: Color;
	ВесеннеЗеленый: Color;
	MediumSeaGreen: Color;
	ЦветМорскойВолныНейтральный: Color;
	Seagreen: Color;
	ЦветМорскойВолны: Color;
	ForestGreen: Color;
	ЗеленыйЛес: Color;
	Green: Color;
	Зеленый: Color;
	MediumGreen: Color;
	НейтральноЗеленый: Color;
	DarkGreen: Color;
	ТемноЗеленый: Color;
	YellowGreen: Color;
	ЖелтоЗеленый: Color;
	Olivedrab: Color;
	ТусклоОливковый: Color;
	Olive: Color;
	Оливковый: Color;
	DarkOliveGreen: Color;
	ТемноОливковоЗеленый: Color;
	MediumAquaMarine: Color;
	НейтральноАквамариновый: Color;
	DarkSeaGreen: Color;
	ЦветМорскойВолныТемный: Color;
	LightSeaGreen: Color;
	ЦветМорскойВолныСветлый: Color;
	DarkCyan: Color;
	ЦианТемный: Color;
	Teal: Color;
	ЦианНейтральный: Color;
	Aqua: Color;
	ЦианАкварельный: Color;
	Cyan: Color;
	Циан: Color;
	LightCyan: Color;
	ЦианСветлый: Color;
	PaleTurquoise: Color;
	БледноБирюзовый: Color;
	Aquamarine: Color;
	Аквамарин: Color;
	Turquoise: Color;
	Бирюзовый: Color;
	MediumTurquoise: Color;
	НейтральноБирюзовый: Color;
	DarkTurquoise: Color;
	ТемноБирюзовый: Color;
	CadetBlue: Color;
	СероСиний: Color;
	SteelBlue: Color;
	СинийСоСтальнымОттенком: Color;
	LightSteelBlue: Color;
	ГолубойСоСтальнымОттенком: Color;
	PowderBlue: Color;
	СинийСПороховымОттенком: Color;
	LightBlue: Color;
	Голубой: Color;
	SkyBlue: Color;
	НебесноГолубой: Color;
	LightSkyBlue: Color;
	СветлоНебесноГолубой: Color;
	DeepSkyBlue: Color;
	НасыщенноНебесноГолубой: Color;
	DodgerBlue: Color;
	СинеСерый: Color;
	CornFlowerBlue: Color;
	Васильковый: Color;
	RoyalBlue: Color;
	КоролевскиГолубой: Color;
	Blue: Color;
	Синий: Color;
	MediumBlue: Color;
	НейтральноСиний: Color;
	DarkBlue: Color;
	ТемноСиний: Color;
	Navy: Color;
	Ультрамарин: Color;
	MidnightBlue: Color;
	ПолночноСиний: Color;
	CornSilk: Color;
	ШелковыйОттенок: Color;
	BlanchedAlmond: Color;
	БледноМиндальный: Color;
	Bisque: Color;
	СветлоКоричневый: Color;
	NavajoWhite: Color;
	НавахоБелый: Color;
	Wheat: Color;
	Пшеничный: Color;
	BurlyWood: Color;
	Древесный: Color;
	Tan: Color;
	РыжеватоКоричневый: Color;
	RosyBrown: Color;
	РозовоКоричневый: Color;
	SandyBrown: Color;
	ПесочноКоричневый: Color;
	LightGoldenRod: Color;
	СветлоЗолотистый: Color;
	Goldenrod: Color;
	Золотистый: Color;
	DarkGoldenRod: Color;
	ТемноЗолотистый: Color;
	Peru: Color;
	НейтральноКоричневый: Color;
	Chocolate: Color;
	Шоколадный: Color;
	SaddleBrown: Color;
	КожаноКоричневый: Color;
	Sienna: Color;
	Охра: Color;
	Brown: Color;
	Коричневый: Color;
	Maroon: Color;
	ТемноБордовый: Color;
}
interface WindowsColors {
	ScrollBar: Color;
	ПолосаПрокрутки: Color;
	Desktop: Color;
	РабочийСтол: Color;
	ActiveTitleBar: Color;
	ЗаголовокАктивногоОкна: Color;
	InactiveTitleBar: Color;
	ЗаголовокНеактивногоОкна: Color;
	MenuBar: Color;
	СтрокаМеню: Color;
	WindowBackground: Color;
	ФонОкна: Color;
	WindowFrame: Color;
	РамкаОкна: Color;
	MenuItemText: Color;
	ТекстПунктаМеню: Color;
	WindowText: Color;
	ТекстОкна: Color;
	ActiveTitleBarText: Color;
	ТекстЗаголовкаАктивногоОкна: Color;
	ActiveBorder: Color;
	ГраницаАктивногоОкна: Color;
	InactiveBorder: Color;
	ГраницаНеактивногоОкна: Color;
	ApplicationWorkspace: Color;
	РабочаяОбластьПриложения: Color;
	Highlight: Color;
	Подсвеченный: Color;
	HighlightText: Color;
	ТекстПодсвеченный: Color;
	ButtonFace: Color;
	Кнопка: Color;
	ButtonShadow: Color;
	ТеньКнопки: Color;
	DisabledText: Color;
	ТекстНедоступный: Color;
	ButtonText: Color;
	ТекстКнопки: Color;
	InactiveTitleBarText: Color;
	ТекстЗаголовкаНеактивногоОкна: Color;
	ButtonHighlight: Color;
	КнопкаПодсвеченная: Color;
	ButtonDarkShadow: Color;
	ТеньКнопкиТемная: Color;
	ButtonLightShadow: Color;
	ТеньКнопкиСветлая: Color;
	ToolTipText: Color;
	ТекстПодсказки: Color;
	ToolTip: Color;
	Подсказка: Color;
	HotLight: Color;
	GradientActiveCaption: Color;
	ЗаголовокАктивногоОкнаГрадиент: Color;
	GradientInactiveCaption: Color;
	ЗаголовокНеактивногоОкнаГрадиент: Color;
	MiddleGradientActiveCaption: Color;
	ЗаголовокАктивногоОкнаГрадиентСредний: Color;
	MiddleGradientInactiveCaption: Color;
	ЗаголовокНеактивногоОкнаГрадиентСредний: Color;
}
interface EnumColorType {
	Absolute;
	Абсолютный;
	StyleItem;
	ЭлементСтиля;
	WebColor;
	WebЦвет;
	WindowsColor;
	WindowsЦвет;
	AutoColor;
	АвтоЦвет;
}
declare type ПеречислениеВидЦвета = EnumColorType;
interface WindowsFonts {
	DefaultGUIFont: Font;
	ШрифтДиалоговИМеню: Font;
	OEMFixedFont: Font;
	OEMШрифтМоноширинный: Font;
	ANSIFixedFont: Font;
	ANSIШрифтМоноширинный: Font;
	ANSIVariableFont: Font;
	ANSIШрифтПропорциональный: Font;
	SystemFont: Font;
	СистемныйШрифт: Font;
}
interface EnumPictureType {
	Empty;
	Пустая;
	FromLib;
	ИзБиблиотеки;
	Absolute;
	Абсолютная;
}
declare type ПеречислениеВидКартинки = EnumPictureType;
interface EnumFillChecking {
	DontCheck;
	НеПроверять;
	ShowError;
	ВыдаватьОшибку;
}
declare type ПеречислениеПроверкаЗаполнения = EnumFillChecking;
interface EnumStandardBeginningDateVariant {
	Custom;
	ПроизвольнаяДата;
	BeginningOfThisDay;
	НачалоЭтогоДня;
	BeginningOfThisWeek;
	НачалоЭтойНедели;
	BeginningOfThisTenDays;
	НачалоЭтойДекады;
	BeginningOfThisMonth;
	НачалоЭтогоМесяца;
	BeginningOfThisQuarter;
	НачалоЭтогоКвартала;
	BeginningOfThisHalfYear;
	НачалоЭтогоПолугодия;
	BeginningOfThisYear;
	НачалоЭтогоГода;
	BeginningOfLastDay;
	НачалоПрошлогоДня;
	BeginningOfLastWeek;
	НачалоПрошлойНедели;
	BeginningOfLastTenDays;
	НачалоПрошлойДекады;
	BeginningOfLastMonth;
	НачалоПрошлогоМесяца;
	BeginningOfLastQuarter;
	НачалоПрошлогоКвартала;
	BeginningOfLastHalfYear;
	НачалоПрошлогоПолугодия;
	BeginningOfLastYear;
	НачалоПрошлогоГода;
	BeginningOfNextDay;
	НачалоСледующегоДня;
	BeginningOfNextWeek;
	НачалоСледующейНедели;
	BeginningOfNextTenDays;
	НачалоСледующейДекады;
	BeginningOfNextMonth;
	НачалоСледующегоМесяца;
	BeginningOfNextQuarter;
	НачалоСледующегоКвартала;
	BeginningOfNextHalfYear;
	НачалоСледующегоПолугодия;
	BeginningOfNextYear;
	НачалоСледующегоГода;
}
declare type ПеречислениеВариантСтандартнойДатыНачала = EnumStandardBeginningDateVariant;
interface EnumStandardPeriodVariant {
	Custom;
	ПроизвольныйПериод;
	Today;
	Сегодня;
	ThisWeek;
	ЭтаНеделя;
	ThisTenDays;
	ЭтаДекада;
	ThisMonth;
	ЭтотМесяц;
	ThisQuarter;
	ЭтотКвартал;
	ThisHalfYear;
	ЭтоПолугодие;
	ThisYear;
	ЭтотГод;
	FromBeginningOfThisWeek;
	СНачалаЭтойНедели;
	FromBeginningOfThisTenDays;
	СНачалаЭтойДекады;
	FromBeginningOfThisMonth;
	СНачалаЭтогоМесяца;
	FromBeginningOfThisQuarter;
	СНачалаЭтогоКвартала;
	FromBeginningOfThisHalfYear;
	СНачалаЭтогоПолугодия;
	FromBeginningOfThisYear;
	СНачалаЭтогоГода;
	Yesterday;
	Вчера;
	LastWeek;
	ПрошлаяНеделя;
	LastTenDays;
	ПрошлаяДекада;
	LastMonth;
	ПрошлыйМесяц;
	LastQuarter;
	ПрошлыйКвартал;
	LastHalfYear;
	ПрошлоеПолугодие;
	LastYear;
	ПрошлыйГод;
	LastWeekTillSameWeekDay;
	ПрошлаяНеделяДоТакогоЖеДняНедели;
	LastTenDaysTillSameDayNumber;
	ПрошлаяДекадаДоТакогоЖеНомераДня;
	LastMonthTillSameDate;
	ПрошлыйМесяцДоТакойЖеДаты;
	LastQuarterTillSameDate;
	ПрошлыйКварталДоТакойЖеДаты;
	LastHalfYearTillSameDate;
	ПрошлоеПолугодиеДоТакойЖеДаты;
	LastYearTillSameDate;
	ПрошлыйГодДоТакойЖеДаты;
	Tomorrow;
	Завтра;
	NextWeek;
	СледующаяНеделя;
	NextTenDays;
	СледующаяДекада;
	NextMonth;
	СледующийМесяц;
	NextQuarter;
	СледующийКвартал;
	NextHalfYear;
	СледующееПолугодие;
	NextYear;
	СледующийГод;
	NextWeekTillSameWeekDay;
	СледующаяНеделяДоТакогоЖеДняНедели;
	NextTenDaysTillSameDayNumber;
	СледующаяДекадаДоТакогоЖеНомераДня;
	NextMonthTillSameDate;
	СледующийМесяцДоТакойЖеДаты;
	NextQuarterTillSameDate;
	СледующийКварталДоТакойЖеДаты;
	NextHalfYearTillSameDate;
	СледующееПолугодиеДоТакойЖеДаты;
	NextYearTillSameDate;
	СледующийГодДоТакойЖеДаты;
	TillEndOfThisWeek;
	ДоКонцаЭтойНедели;
	TillEndOfThisTenDays;
	ДоКонцаЭтойДекады;
	TillEndOfThisMonth;
	ДоКонцаЭтогоМесяца;
	TillEndOfThisQuarter;
	ДоКонцаЭтогоКвартала;
	TillEndOfThisHalfYear;
	ДоКонцаЭтогоПолугодия;
	TillEndOfThisYear;
	ДоКонцаЭтогоГода;
	Last7Days;
	Последние7Дней;
	Next7Days;
	Следующие7Дней;
	Month;
	Месяц;
}
declare type ПеречислениеВариантСтандартногоПериода = EnumStandardPeriodVariant;
interface EnumPlatformType {
	Windows_x86;
	Windows_x86_64;
	Linux_x86;
	Linux_x86_64;
	MacOS_x86;
	MacOS_x86_64;
}
declare type ПеречислениеТипПлатформы = EnumPlatformType;
interface EnumSizeChangeMode {
	Normal;
	Обычный;
	QuickChange;
	БыстроеИзменение;
}
declare type ПеречислениеРежимИзмененияРазмера = EnumSizeChangeMode;
interface EnumDuplexPrintingType {
	None;
	Нет;
	FlipPagesLeft;
	ПереворотВлево;
	FlipPagesUp;
	ПереворотВверх;
	UsePrinterSettings;
	ИспользоватьНастройкиПринтера;
}
declare type ПеречислениеТипДвустороннейПечати = EnumDuplexPrintingType;
interface EnumPagePlacementAlternation {
	Auto;
	Авто;
	DontUse;
	НеИспользовать;
	MirrorOnLeft;
	ЗеркальноСлева;
	MirrorOnTop;
	ЗеркальноСверху;
}
declare type ПеречислениеЧередованиеРасположенияСтраниц = EnumPagePlacementAlternation;
interface EnumTextPositionRelativeToPicture {
	Left;
	Слева;
	Right;
	Справа;
	Top;
	Сверху;
	Bottom;
	Снизу;
	OnTop;
	Поверх;
	Auto;
	Авто;
}
declare type ПеречислениеПоложениеТекстаОтносительноКартинки = EnumTextPositionRelativeToPicture;
interface EnumMainClientApplicationWindowMode {
	Normal;
	Обычный;
	Workplace;
	РабочееМесто;
	FullscreenWorkplace;
	ПолноэкранноеРабочееМесто;
	Kiosk;
	Киоск;
}
declare type ПеречислениеРежимОсновногоОкнаКлиентскогоПриложения = EnumMainClientApplicationWindowMode;
interface EnumSearchDirection {
	FromBegin;
	СНачала;
	FromEnd;
	СКонца;
}
declare type ПеречислениеНаправлениеПоиска = EnumSearchDirection;
declare var VerticalAlign: EnumVerticalAlign;
declare var ВертикальноеПоложение: EnumVerticalAlign;
declare var HorizontalAlign: EnumHorizontalAlign;
declare var ГоризонтальноеПоложение: EnumHorizontalAlign;
declare var PageOrientation: EnumPageOrientation;
declare var ОриентацияСтраницы: EnumPageOrientation;
declare var PictureSize: EnumPictureSize;
declare var РазмерКартинки: EnumPictureSize;
declare var PictureFormat: EnumPictureFormat;
declare var ФорматКартинки: EnumPictureFormat;
declare var AllowedLength: EnumAllowedLength;
declare var ДопустимаяДлина: EnumAllowedLength;
declare var AllowedSign: EnumAllowedSign;
declare var ДопустимыйЗнак: EnumAllowedSign;
declare var DateFractions: EnumDateFractions;
declare var ЧастиДаты: EnumDateFractions;
declare var RoundMode: EnumRoundMode;
declare var РежимОкругления: EnumRoundMode;
declare var Chars: Chars;
declare var Символы: Chars;
declare var SortDirection: EnumSortDirection;
declare var НаправлениеСортировки: EnumSortDirection;
declare var TextEncoding: EnumTextEncoding;
declare var КодировкаТекста: EnumTextEncoding;
declare var UseOutput: EnumUseOutput;
declare var ИспользованиеВывода: EnumUseOutput;
declare var PrintDialogUseMode: EnumPrintDialogUseMode;
declare var РежимИспользованияДиалогаПечати: EnumPrintDialogUseMode;
declare var FontType: EnumFontType;
declare var ВидШрифта: EnumFontType;
declare var BorderType: EnumBorderType;
declare var ВидРамки: EnumBorderType;
declare var ControlBorderType: EnumControlBorderType;
declare var ТипРамкиЭлементаУправления: EnumControlBorderType;
declare var WebColors: WebColors;
declare var WebЦвета: WebColors;
declare var WindowsColors: WindowsColors;
declare var WindowsЦвета: WindowsColors;
declare var ColorType: EnumColorType;
declare var ВидЦвета: EnumColorType;
declare var WindowsFonts: WindowsFonts;
declare var WindowsШрифты: WindowsFonts;
declare var PictureType: EnumPictureType;
declare var ВидКартинки: EnumPictureType;
declare var FillChecking: EnumFillChecking;
declare var ПроверкаЗаполнения: EnumFillChecking;
declare var StandardBeginningDateVariant: EnumStandardBeginningDateVariant;
declare var ВариантСтандартнойДатыНачала: EnumStandardBeginningDateVariant;
declare var StandardPeriodVariant: EnumStandardPeriodVariant;
declare var ВариантСтандартногоПериода: EnumStandardPeriodVariant;
declare var PlatformType: EnumPlatformType;
declare var ТипПлатформы: EnumPlatformType;
declare var SizeChangeMode: EnumSizeChangeMode;
declare var РежимИзмененияРазмера: EnumSizeChangeMode;
declare var Key: EnumKey;
declare var Клавиша: EnumKey;
declare var DuplexPrintingType: EnumDuplexPrintingType;
declare var ТипДвустороннейПечати: EnumDuplexPrintingType;
declare var PagePlacementAlternation: EnumPagePlacementAlternation;
declare var ЧередованиеРасположенияСтраниц: EnumPagePlacementAlternation;
declare var TextPositionRelativeToPicture: EnumTextPositionRelativeToPicture;
declare var ПоложениеТекстаОтносительноКартинки: EnumTextPositionRelativeToPicture;
declare var MainClientApplicationWindowMode: EnumMainClientApplicationWindowMode;
declare var РежимОсновногоОкнаКлиентскогоПриложения: EnumMainClientApplicationWindowMode;
declare var SearchDirection: EnumSearchDirection;
declare var НаправлениеПоиска: EnumSearchDirection;
declare function FillPropertyValues(... params): void;
declare function ЗаполнитьЗначенияСвойств(... params): void;
declare function Base64Value(... params);
declare function Base64Значение(... params);
declare function Base64String(... params);
declare function Base64Строка(... params);
declare function ValueIsFilled(... params): boolean;
declare function ЗначениеЗаполнено(... params): boolean;
declare function StrFind(... params): number;
declare function СтрНайти(... params): number;
declare function StrTemplate(... params): string;
declare function СтрШаблон(... params): string;
declare function StrCompare(... params): number;
declare function СтрСравнить(... params): number;
declare function StrStartsWith(... params): boolean;
declare function СтрНачинаетсяС(... params): boolean;
declare function StrEndsWith(... params): boolean;
declare function СтрЗаканчиваетсяНа(... params): boolean;
declare function StrSplit(... params): ArrayV8;
declare function СтрРазделить(... params): ArrayV8;
declare function StrConcat(... params): string;
declare function СтрСоединить(... params): string;
interface CollaborationSystemUserID {
}
interface CollaborationSystemConversation {
	ID;
	Идентификатор;
	Title;
	Заголовок;
	ConversationContext;
	КонтекстОбсуждения;
	Members;
	Участники;
	Write(): void;
	Записать(): void;
}
interface CollaborationSystemMessage {
	ID;
	Идентификатор;
	Date;
	Дата;
	Author;
	Автор;
	Recipients;
	Получатели;
	Text;
	Текст;
	Write(): void;
	Записать(): void;
}
interface CollaborationSystemUser {
	ID;
	Идентификатор;
	Name;
	Имя;
	FullName;
	ПолноеИмя;
	Picture;
	Картинка;
	Email;
	АдресЭлектроннойПочты;
	PhoneNumber;
	НомерТелефона;
	Write(): void;
	Записать(): void;
}
interface CollaborationSystemInfoBaseRegistrationData {
}
interface CollaborationSystemManager {
	InfoBaseRegistered(): boolean;
	ИнформационнаяБазаЗарегистрирована(): boolean;
	CurrentUserID(): CollaborationSystemUserID;
	ИдентификаторТекущегоПользователя(): CollaborationSystemUserID;
	CreateConversation(): CollaborationSystemConversation;
	СоздатьОбсуждение(): CollaborationSystemConversation;
	GetConversations(... params): ArrayV8;
	ПолучитьОбсуждения(... params): ArrayV8;
	CreateMessage(... params): CollaborationSystemMessage;
	СоздатьСообщение(... params): CollaborationSystemMessage;
	GetMessages(... params): ArrayV8;
	ПолучитьСообщения(... params): ArrayV8;
	GetInfoBaseUserID(... params): UUID;
	ПолучитьИдентификаторПользователяИнформационнойБазы(... params): UUID;
	GetUserID(... params): CollaborationSystemUserID;
	ПолучитьИдентификаторПользователя(... params): CollaborationSystemUserID;
	GetUser(... params): CollaborationSystemUser;
	ПолучитьПользователя(... params): CollaborationSystemUser;
	GetConversation(... params): CollaborationSystemConversation;
	ПолучитьОбсуждение(... params): CollaborationSystemConversation;
	SetWatchMode(... params): void;
	УстановитьРежимНаблюдения(... params): void;
	GetWatchMode(... params): boolean;
	ПолучитьРежимНаблюдения(... params): boolean;
	GetCurrentUserNotifications(): ArrayV8;
	ПолучитьОповещенияТекущегоПользователя(): ArrayV8;
	GetInfoBaseRegistrationData(): CollaborationSystemInfoBaseRegistrationData;
	ПолучитьДанныеРегистрацииИнформационнойБазы(): CollaborationSystemInfoBaseRegistrationData;
	SetInfoBaseRegistrationData(... params): void;
	УстановитьДанныеРегистрацииИнформационнойБазы(... params): void;
	BeginInfoBaseRegistration(... params): void;
	НачатьРегистрациюИнформационнойБазы(... params): void;
	BeginInfoBaseUnregistration(... params): void;
	НачатьОтменуРегистрацииИнформационнойБазы(... params): void;
}
declare type МенеджерСистемыВзаимодействия = CollaborationSystemManager;
interface Orientation {
}
interface CommandBarButtonAlignment {
}
interface CommandBar {
	Buttons;
	Кнопки;
	Orientation: Orientation;
	Ориентация: Orientation;
	AutoFill: boolean;
	АвтоЗаполнение: boolean;
	Secondary: boolean;
	Вспомогательная: boolean;
	ButtonsAlignment: CommandBarButtonAlignment;
	ВыравниваниеКнопок: CommandBarButtonAlignment;
	Enabled;
	Доступность;
	Transparent;
	ПрозрачныйФон;
	Font;
	Шрифт;
	Border;
	Рамка;
	BorderColor;
	ЦветРамки;
	BackColor;
	ЦветФона;
	ButtonBackColor;
	ЦветФонаКнопки;
	ButtonTextColor;
	ЦветТекстаКнопки;
	ToolTip;
	Подсказка;
}
declare type КоманднаяПанель = CommandBar;
interface DendrogramItemCollection {
	Insert(... params): DendrogramItem;
	Вставить(... params): DendrogramItem;
	Add(): DendrogramItem;
	Добавить(): DendrogramItem;
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	Get(... params): DendrogramItem;
	Получить(... params): DendrogramItem;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface DendrogramItem {
	Value: DendrogramItem;
	Значение: DendrogramItem;
	Details: DendrogramItemCollection;
	Расшифровка: DendrogramItemCollection;
	Text;
	Текст;
}
interface DendrogramLink {
	FirstItem: DendrogramItem;
	ПервыйЭлемент: DendrogramItem;
	SecondItem: DendrogramItem;
	ВторойЭлемент: DendrogramItem;
	Distance: number;
	Расстояние: number;
}
interface HTMLTableElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Align: string;
	Выравнивание: string;
	BgColor: string;
	ЦветФона: string;
	Border: string;
	Рамка: string;
	CellPadding: string;
	ОтступДоЯчейки: string;
	CellSpacing: string;
	РасстояниеМеждуЯчейками: string;
	Frame: string;
	Фрейм: string;
	Rules: string;
	Линии: string;
	Summary: string;
	Сводка: string;
	Width: string;
	Ширина: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	GetRows(): Map;
	ПолучитьСтроки(): Map;
	GetTBodies();
	ПолучитьТелоТаблицы();
	CreateTHead();
	СоздатьЗаголовокТаблицы();
	DeleteTHead(): void;
	УдалитьЗаголовокТаблицы(): void;
	CreateTFoot();
	СоздатьПодвалТаблицы();
	DeleteTFoot(): void;
	УдалитьПодвалТаблицы(): void;
	CreateCaption();
	СоздатьЗаголовок();
	DeleteCaption(): void;
	УдалитьЗаголовок(): void;
	InsertRow(... params);
	ВставитьСтроку(... params);
	DeleteRow(... params): void;
	УдалитьСтроку(... params): void;
}
interface EnumGraphicalSchemaGridDrawMode {
	None;
	НеРисовать;
	Dots;
	Точки;
	Chess;
	ШахматнаяСетка;
	Lines;
	Линии;
}
declare type ПеречислениеРежимОтрисовкиСеткиГрафическойСхемы = EnumGraphicalSchemaGridDrawMode;
interface EnumContactDataEmailAddressType {
	Work;
	Рабочий;
	Home;
	Домашний;
	Mobile;
	Мобильный;
	Other;
	Другой;
}
declare type ПеречислениеТипАдресаЭлектроннойПочтыДанныхКонтакта = EnumContactDataEmailAddressType;
interface QuerySchemaJoinType {
}
interface QuerySchemaExpression {
	ContainsAggregateFunction(): boolean;
	СодержитАгрегатнуюФункцию(): boolean;
	ValueType(): TypeDescription;
	ТипЗначения(): TypeDescription;
}
declare type ВыражениеСхемыЗапроса = QuerySchemaExpression;
interface QuerySchemaQuerySourceJoin {
	JoinType: QuerySchemaJoinType;
	ТипСоединения: QuerySchemaJoinType;
	Source: QuerySchemaSource;
	Источник: QuerySchemaSource;
	Condition: QuerySchemaExpression;
	Условие: QuerySchemaExpression;
}
interface QuerySchemaQuerySourceJoins {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): QuerySchemaQuerySourceJoin;
	Индекс(... params): QuerySchemaQuerySourceJoin;
	Add(... params): boolean;
	Добавить(... params): boolean;
	Get(... params): QuerySchemaQuerySourceJoin;
	Получить(... params): QuerySchemaQuerySourceJoin;
	Delete(... params): void;
	Удалить(... params): void;
	FindByName(... params): QuerySchemaQuerySourceJoin;
	НайтиПоИмени(... params): QuerySchemaQuerySourceJoin;
	FindByAlias(... params): QuerySchemaQuerySourceJoin;
	НайтиПоПсевдониму(... params): QuerySchemaQuerySourceJoin;
}
interface QuerySchemaTableParameter {
	Expression: QuerySchemaExpression;
	Выражение: QuerySchemaExpression;
}
interface QuerySchemaTableParameters {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): QuerySchemaTableParameter;
	Получить(... params): QuerySchemaTableParameter;
	Find(... params): QuerySchemaTableParameter;
	Найти(... params): QuerySchemaTableParameter;
}
interface QuerySchemaAvailableNestedTable {
	Fields: QuerySchemaAvailableFields;
	Поля: QuerySchemaAvailableFields;
	Name: string;
	Имя: string;
}
interface QuerySchemaFieldRole {
	Dimension: boolean;
	Измерение: boolean;
	Resource: boolean;
	Ресурс: boolean;
}
interface QuerySchemaAvailableField {
	Fields: QuerySchemaAvailableFields;
	Поля: QuerySchemaAvailableFields;
	Name: string;
	Имя: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Role: QuerySchemaFieldRole;
	Роль: QuerySchemaFieldRole;
}
interface QuerySchemaAvailableFields {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): QuerySchemaAvailableNestedTable | QuerySchemaAvailableField;
	Получить(... params): QuerySchemaAvailableNestedTable | QuerySchemaAvailableField;
	Delete(... params): void;
	Удалить(... params): void;
	Add(... params): void;
	Добавить(... params): void;
	Insert(... params);
	Вставить(... params);
	Find(... params): QuerySchemaAvailableNestedTable | QuerySchemaAvailableField;
	Найти(... params): QuerySchemaAvailableNestedTable | QuerySchemaAvailableField;
}
interface QuerySchemaTable {
	Parameters: QuerySchemaTableParameters;
	Параметры: QuerySchemaTableParameters;
	AvailableFields: QuerySchemaAvailableFields;
	ДоступныеПоля: QuerySchemaAvailableFields;
	TableName: string;
	ИмяТаблицы: string;
	Alias: string;
	Псевдоним: string;
}
interface QuerySchemaNestedQuery {
	Query: QuerySchemaSelectQuery;
	Запрос: QuerySchemaSelectQuery;
	Alias: string;
	Псевдоним: string;
	AvailableFields: QuerySchemaAvailableFields;
	ДоступныеПоля: QuerySchemaAvailableFields;
}
interface QuerySchemaSource {
	Joins: QuerySchemaQuerySourceJoins;
	Соединения: QuerySchemaQuerySourceJoins;
	Source: QuerySchemaTable | QuerySchemaNestedQuery | any;
	Источник: QuerySchemaTable | QuerySchemaNestedQuery | any;
}
interface QuerySchemaSources {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): QuerySchemaSource;
	Добавить(... params): QuerySchemaSource;
	Get(... params): QuerySchemaSource;
	Получить(... params): QuerySchemaSource;
	Delete(... params): void;
	Удалить(... params): void;
	Replace(... params): void;
	Заменить(... params): void;
	FindByName(... params): QuerySchemaSource;
	НайтиПоИмени(... params): QuerySchemaSource;
	FindByAlias(... params): QuerySchemaSource;
	НайтиПоПсевдониму(... params): QuerySchemaSource;
	GetRootSources(): QuerySchemaSources;
	ПолучитьКорневыеИсточники(): QuerySchemaSources;
}
interface QuerySchemaExpressions {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): void;
	Добавить(... params): void;
	Get(... params): QuerySchemaExpression;
	Получить(... params): QuerySchemaExpression;
	Set(... params): void;
	Установить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Find(... params): QuerySchemaExpression;
	Найти(... params): QuerySchemaExpression;
}
interface QuerySchemaNestedTable {
	Fields: QuerySchemaExpressions;
	Поля: QuerySchemaExpressions;
	Name: string;
	Имя: string;
}
interface QuerySchemaFields {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): QuerySchemaNestedTable | QuerySchemaExpression;
	Добавить(... params): QuerySchemaNestedTable | QuerySchemaExpression;
	Get(... params): QuerySchemaNestedTable | QuerySchemaExpression;
	Получить(... params): QuerySchemaNestedTable | QuerySchemaExpression;
	Set(... params): void;
	Установить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Find(... params): QuerySchemaNestedTable | QuerySchemaExpression;
	Найти(... params): QuerySchemaNestedTable | QuerySchemaExpression;
}
interface QuerySchemaTableForUpdate {
	TableName: string;
	ИмяТаблицы: string;
}
interface QuerySchemaTablesForUpdate {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): QuerySchemaTableForUpdate;
	Добавить(... params): QuerySchemaTableForUpdate;
	Get(... params): QuerySchemaTableForUpdate;
	Получить(... params): QuerySchemaTableForUpdate;
	Delete(... params): void;
	Удалить(... params): void;
	Find(... params): QuerySchemaTableForUpdate;
	Найти(... params): QuerySchemaTableForUpdate;
}
interface QuerySchemaUnionType {
}
interface QuerySchemaSelectOperator {
	Sources: QuerySchemaSources;
	Источники: QuerySchemaSources;
	SelectedFields: QuerySchemaFields;
	ВыбираемыеПоля: QuerySchemaFields;
	TablesForUpdate: QuerySchemaTablesForUpdate;
	ТаблицыДляИзменения: QuerySchemaTablesForUpdate;
	UnionType: QuerySchemaUnionType;
	ТипОбъединения: QuerySchemaUnionType;
	Group: QuerySchemaExpressions;
	Группировка: QuerySchemaExpressions;
	Filter: QuerySchemaExpressions;
	Отбор: QuerySchemaExpressions;
	RetrievedRecordsCount: number;
	КоличествоПолучаемыхЗаписей: number;
	SelectDistinct: boolean;
	ВыбиратьРазличные: boolean;
	SelectForUpdate: boolean;
	ВыбиратьДляИзменения: boolean;
	Presentation(): string;
	Представление(): string;
}
interface QuerySchemaOperators {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): QuerySchemaSelectOperator;
	Добавить(... params): QuerySchemaSelectOperator;
	Get(... params): QuerySchemaSelectOperator;
	Получить(... params): QuerySchemaSelectOperator;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
}
interface QuerySchemaColumnFields {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): QuerySchemaNestedTable | QuerySchemaExpression;
	Получить(... params): QuerySchemaNestedTable | QuerySchemaExpression;
	Set(... params): void;
	Установить(... params): void;
}
interface QuerySchemaNestedTableColumn {
	Columns: QuerySchemaColumns;
	Колонки: QuerySchemaColumns;
	Fields: QuerySchemaColumnFields;
	Поля: QuerySchemaColumnFields;
	Alias: string;
	Псевдоним: string;
}
interface QuerySchemaColumn {
	Fields: QuerySchemaColumnFields;
	Поля: QuerySchemaColumnFields;
	Alias: string;
	Псевдоним: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
}
interface QuerySchemaColumns {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): QuerySchemaNestedTableColumn | QuerySchemaColumn;
	Получить(... params): QuerySchemaNestedTableColumn | QuerySchemaColumn;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Find(... params): QuerySchemaNestedTableColumn | QuerySchemaColumn;
	Найти(... params): QuerySchemaNestedTableColumn | QuerySchemaColumn;
}
interface QuerySchemaOrderDirection {
}
interface QuerySchemaOrderExpression {
	Direction: QuerySchemaOrderDirection;
	Направление: QuerySchemaOrderDirection;
	Item: QuerySchemaExpression | QuerySchemaColumn;
	Элемент: QuerySchemaExpression | QuerySchemaColumn;
}
interface QuerySchemaOrderExpressions {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): QuerySchemaOrderExpression;
	Добавить(... params): QuerySchemaOrderExpression;
	Get(... params): QuerySchemaOrderExpression;
	Получить(... params): QuerySchemaOrderExpression;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Find(... params): QuerySchemaOrderExpression;
	Найти(... params): QuerySchemaOrderExpression;
}
interface QuerySchemaIndexExpression {
	Expression: QuerySchemaColumn;
	Выражение: QuerySchemaColumn;
}
interface QuerySchemaIndexExpressions {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): QuerySchemaIndexExpression;
	Добавить(... params): QuerySchemaIndexExpression;
	Get(... params): QuerySchemaIndexExpression;
	Получить(... params): QuerySchemaIndexExpression;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Find(... params): QuerySchemaIndexExpression;
	Найти(... params): QuerySchemaIndexExpression;
}
interface QuerySchemaAvailableTablesGroup {
	Content: QuerySchemaAvailableTables;
	Состав: QuerySchemaAvailableTables;
	Presentation: string;
	Представление: string;
}
interface QuerySchemaAvailableTableParameterType {
}
interface QuerySchemaAvailableTableParameter {
	ParameterType: QuerySchemaAvailableTableParameterType;
	ТипПараметра: QuerySchemaAvailableTableParameterType;
	AvailableFields: QuerySchemaAvailableFields;
	ДоступныеПоля: QuerySchemaAvailableFields;
	Name: string;
	Имя: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Variants: FixedArray;
	Варианты: FixedArray;
}
interface QuerySchemaAvailableTableParameters {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): QuerySchemaAvailableTableParameter;
	Получить(... params): QuerySchemaAvailableTableParameter;
	Find(... params): QuerySchemaAvailableTableParameter;
	Найти(... params): QuerySchemaAvailableTableParameter;
}
interface QuerySchemaAvailableTable {
	Fields: QuerySchemaAvailableFields;
	Поля: QuerySchemaAvailableFields;
	Parameters: QuerySchemaAvailableTableParameters;
	Параметры: QuerySchemaAvailableTableParameters;
	Name: string;
	Имя: string;
}
interface QuerySchemaAvailableTables {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): QuerySchemaAvailableTablesGroup | QuerySchemaAvailableTable;
	Получить(... params): QuerySchemaAvailableTablesGroup | QuerySchemaAvailableTable;
	Find(... params): QuerySchemaAvailableTablesGroup | QuerySchemaAvailableTable | QuerySchemaAvailableNestedTable;
	Найти(... params): QuerySchemaAvailableTablesGroup | QuerySchemaAvailableTable | QuerySchemaAvailableNestedTable;
}
interface QuerySchemaTotalCalculationFieldType {
}
interface QuerySchemaPeriodAdditionType {
}
interface QuerySchemaTotalCalculationField {
	TotalCalculationFieldType: QuerySchemaTotalCalculationFieldType;
	ТипКонтрольнойТочки: QuerySchemaTotalCalculationFieldType;
	PeriodAdditionType: QuerySchemaPeriodAdditionType;
	ТипДополненияПериодами: QuerySchemaPeriodAdditionType;
	PeriodAdditionBegin: string;
	НачалоПериодаДополнения: string;
	PeriodAdditionEnd: string;
	КонецПериодаДополнения: string;
	Expression: QuerySchemaExpression | QuerySchemaColumn;
	Выражение: QuerySchemaExpression | QuerySchemaColumn;
	ColumnName: string;
	ИмяКолонки: string;
}
interface QuerySchemaTotalCalculationFields {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): QuerySchemaTotalCalculationField;
	Добавить(... params): QuerySchemaTotalCalculationField;
	Get(... params): QuerySchemaTotalCalculationField;
	Получить(... params): QuerySchemaTotalCalculationField;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	FindByColumnName(... params): QuerySchemaTotalCalculationField;
	НайтиПоИмениКолонки(... params): QuerySchemaTotalCalculationField;
	FindByExpression(... params): QuerySchemaTotalCalculationField;
	НайтиПоВыражению(... params): QuerySchemaTotalCalculationField;
}
interface QuerySchemaTotalExpression {
	Expression: QuerySchemaExpression;
	Выражение: QuerySchemaExpression;
	Field: QuerySchemaColumn;
	Поле: QuerySchemaColumn;
}
interface QuerySchemaTotalExpressions {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): void;
	Добавить(... params): void;
	Get(... params): QuerySchemaTotalExpression;
	Получить(... params): QuerySchemaTotalExpression;
	Delete(... params): void;
	Удалить(... params): void;
	FindByField(... params): QuerySchemaTotalExpression;
	НайтиПоПолю(... params): QuerySchemaTotalExpression;
	FindByExpression(... params): QuerySchemaTotalExpression;
	НайтиПоВыражению(... params): QuerySchemaTotalExpression;
}
interface QuerySchemaSelectQuery {
	Operators: QuerySchemaOperators;
	Операторы: QuerySchemaOperators;
	Columns: QuerySchemaColumns;
	Колонки: QuerySchemaColumns;
	Order: QuerySchemaOrderExpressions;
	Порядок: QuerySchemaOrderExpressions;
	Index: QuerySchemaIndexExpressions;
	Индекс: QuerySchemaIndexExpressions;
	AvailableTables: QuerySchemaAvailableTables;
	ДоступныеТаблицы: QuerySchemaAvailableTables;
	TotalCalculationFields: QuerySchemaTotalCalculationFields;
	КонтрольныеТочкиИтогов: QuerySchemaTotalCalculationFields;
	TotalExpressions: QuerySchemaTotalExpressions;
	ВыраженияИтогов: QuerySchemaTotalExpressions;
	SelectAllowed: boolean;
	ВыбиратьРазрешенные: boolean;
	PlacementTable: string;
	ТаблицаДляПомещения: string;
	AutoOrder: boolean;
	Автопорядок: boolean;
	Overall: boolean;
	ОбщиеИтоги: boolean;
	Presentation(): string;
	Представление(): string;
	GetQueryText(): string;
	ПолучитьТекстЗапроса(): string;
	SetQueryText(... params): void;
	УстановитьТекстЗапроса(... params): void;
}
interface QuerySchemaTableDropQuery {
	TableName: string;
	ИмяТаблицы: string;
}
interface QuerySchemaQueryBatch {
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(... params): QuerySchemaSelectQuery | QuerySchemaTableDropQuery;
	Добавить(... params): QuerySchemaSelectQuery | QuerySchemaTableDropQuery;
	Get(... params): QuerySchemaSelectQuery | QuerySchemaTableDropQuery;
	Получить(... params): QuerySchemaSelectQuery | QuerySchemaTableDropQuery;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	AddCopy(... params): QuerySchemaSelectQuery | QuerySchemaTableDropQuery;
	ДобавитьКопию(... params): QuerySchemaSelectQuery | QuerySchemaTableDropQuery;
}
interface XSMaxLengthFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Fixed: boolean;
	Фиксированный: boolean;
	Value: string;
	Значение: string;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетМаксимальнойДлиныXS = XSMaxLengthFacet;
interface EnumDataCompositionComparisonType {
	Equal;
	Равно;
	NotEqual;
	НеРавно;
	Less;
	Меньше;
	LessOrEqual;
	МеньшеИлиРавно;
	Greater;
	Больше;
	GreaterOrEqual;
	БольшеИлиРавно;
	Contains;
	Содержит;
	InList;
	ВСписке;
	InListByHierarchy;
	ВСпискеПоИерархии;
	InHierarchy;
	ВИерархии;
	NotContains;
	НеСодержит;
	NotInList;
	НеВСписке;
	NotInListByHierarchy;
	НеВСпискеПоИерархии;
	NotInHierarchy;
	НеВИерархии;
	Filled;
	Заполнено;
	NotFilled;
	НеЗаполнено;
	BeginsWith;
	НачинаетсяС;
	NotBeginsWith;
	НеНачинаетсяС;
	Like;
	Подобно;
	NotLike;
	НеПодобно;
}
declare type ПеречислениеВидСравненияКомпоновкиДанных = EnumDataCompositionComparisonType;
interface AppearanceSettingItem {
	Use: boolean;
	Использование: boolean;
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Value: TypeDescription;
	Значение: TypeDescription;
}
interface DataCompositionTemplateDataSource {
	Name: string;
	Имя: string;
	Type: string;
	Тип: string;
	ConnectionString: string;
	СтрокаСоединения: string;
}
interface DataCompositionTemplateDataSources {
	Add(): DataCompositionTemplateDataSource;
	Добавить(): DataCompositionTemplateDataSource;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionTemplateDataSource;
	Найти(... params): DataCompositionTemplateDataSource;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateDataSource;
	Вставить(... params): DataCompositionTemplateDataSource;
	Get(... params): DataCompositionTemplateDataSource;
	Получить(... params): DataCompositionTemplateDataSource;
}
interface DataCompositionTemplateDataSetField {
	DataPath: string;
	ПутьКДанным: string;
	Name: string;
	Имя: string;
	Role: DataCompositionDataSetFieldRole;
	Роль: DataCompositionDataSetFieldRole;
}
interface DataCompositionTemplateDataSetFields {
	Add(): DataCompositionTemplateDataSetField;
	Добавить(): DataCompositionTemplateDataSetField;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionTemplateDataSetField;
	Найти(... params): DataCompositionTemplateDataSetField;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateDataSetField;
	Вставить(... params): DataCompositionTemplateDataSetField;
	Get(... params): DataCompositionTemplateDataSetField;
	Получить(... params): DataCompositionTemplateDataSetField;
}
interface DataCompositionTemplateNestedDataSet {
	Name: string;
	Имя: string;
	Filter: string;
	Отбор: string;
	Fields: DataCompositionTemplateDataSetFields;
	Поля: DataCompositionTemplateDataSetFields;
	DataPath: string;
	ПутьКДанным: string;
}
interface DataCompositionTemplateNestedDataSets {
	Add(): DataCompositionTemplateNestedDataSet;
	Добавить(): DataCompositionTemplateNestedDataSet;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionTemplateNestedDataSet;
	Найти(... params): DataCompositionTemplateNestedDataSet;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateNestedDataSet;
	Вставить(... params): DataCompositionTemplateNestedDataSet;
	Get(... params): DataCompositionTemplateNestedDataSet;
	Получить(... params): DataCompositionTemplateNestedDataSet;
}
interface DataCompositionTemplateDataSetUnion {
	Name: string;
	Имя: string;
	Filter: string;
	Отбор: string;
	Fields: DataCompositionTemplateDataSetFields;
	Поля: DataCompositionTemplateDataSetFields;
	NestedDataSets: DataCompositionTemplateNestedDataSets;
	ВложенныеНаборыДанных: DataCompositionTemplateNestedDataSets;
	Items: DataCompositionTemplateDataSets;
	Элементы: DataCompositionTemplateDataSets;
}
interface DataCompositionTemplateParameterValue {
	Name: string;
	Имя: string;
	Value;
	Значение;
}
interface DataCompositionTemplateParameterValues {
	Add(): DataCompositionTemplateParameterValue;
	Добавить(): DataCompositionTemplateParameterValue;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionTemplateParameterValue;
	Найти(... params): DataCompositionTemplateParameterValue;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateParameterValue;
	Вставить(... params): DataCompositionTemplateParameterValue;
	Get(... params): DataCompositionTemplateParameterValue;
	Получить(... params): DataCompositionTemplateParameterValue;
}
interface DataCompositionTemplateDataSetQuery {
	Name: string;
	Имя: string;
	Filter: string;
	Отбор: string;
	Fields: DataCompositionTemplateDataSetFields;
	Поля: DataCompositionTemplateDataSetFields;
	NestedDataSets: DataCompositionTemplateNestedDataSets;
	ВложенныеНаборыДанных: DataCompositionTemplateNestedDataSets;
	DataSource: string;
	ИсточникДанных: string;
	Query: string;
	Запрос: string;
	ParameterValues: DataCompositionTemplateParameterValues;
	ЗначенияПараметров: DataCompositionTemplateParameterValues;
}
interface DataCompositionTemplateDataSetObject {
	Name: string;
	Имя: string;
	Filter: string;
	Отбор: string;
	Fields: DataCompositionTemplateDataSetFields;
	Поля: DataCompositionTemplateDataSetFields;
	NestedDataSets: DataCompositionTemplateNestedDataSets;
	ВложенныеНаборыДанных: DataCompositionTemplateNestedDataSets;
	DataSource: string;
	ИсточникДанных: string;
	ObjectName: string;
	ИмяОбъекта: string;
}
interface DataCompositionTemplateDataSets {
	Add(... params): DataCompositionTemplateDataSetUnion | DataCompositionTemplateDataSetQuery | DataCompositionTemplateDataSetObject;
	Добавить(... params): DataCompositionTemplateDataSetUnion | DataCompositionTemplateDataSetQuery | DataCompositionTemplateDataSetObject;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionTemplateDataSetUnion | DataCompositionTemplateDataSetQuery | DataCompositionTemplateDataSetObject;
	Найти(... params): DataCompositionTemplateDataSetUnion | DataCompositionTemplateDataSetQuery | DataCompositionTemplateDataSetObject;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateDataSetUnion | DataCompositionTemplateDataSetQuery | DataCompositionTemplateDataSetObject;
	Вставить(... params): DataCompositionTemplateDataSetUnion | DataCompositionTemplateDataSetQuery | DataCompositionTemplateDataSetObject;
	Get(... params): DataCompositionTemplateDataSetUnion | DataCompositionTemplateDataSetQuery | DataCompositionTemplateDataSetObject;
	Получить(... params): DataCompositionTemplateDataSetUnion | DataCompositionTemplateDataSetQuery | DataCompositionTemplateDataSetObject;
}
interface DataCompositionDataSetsLinkType {
}
interface DataCompositionTemplateDataSetLink {
	SourceDataSet: string;
	НаборДанныхИсточник: string;
	DestinationDataSet: string;
	НаборДанныхПриемник: string;
	SourceExpression: string;
	ВыражениеИсточник: string;
	DestinationExpression: string;
	ВыражениеПриемник: string;
	Parameter: string;
	Параметр: string;
	ParameterListAllowed: boolean;
	РазрешенСписокПараметров: boolean;
	LinkConditionExpression: string;
	УсловиеСвязи: string;
	StartExpression: string;
	НачальноеВыражение: string;
	LinkType: DataCompositionDataSetsLinkType;
	ТипСвязи: DataCompositionDataSetsLinkType;
}
interface DataCompositionTemplateDataSetLinks {
	Add(): DataCompositionTemplateDataSetLink;
	Добавить(): DataCompositionTemplateDataSetLink;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateDataSetLink;
	Вставить(... params): DataCompositionTemplateDataSetLink;
	Get(... params): DataCompositionTemplateDataSetLink;
	Получить(... params): DataCompositionTemplateDataSetLink;
}
interface DataCompositionTemplateAreaTemplateDefinition {
	Name: string;
	Имя: string;
	Template;
	Макет;
	Parameters: DataCompositionAreaParameters;
	Параметры: DataCompositionAreaParameters;
}
interface DataCompositionTemplateAreaTemplateDefinitions {
	Add(): DataCompositionTemplateAreaTemplateDefinition;
	Добавить(): DataCompositionTemplateAreaTemplateDefinition;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionTemplateAreaTemplateDefinition;
	Найти(... params): DataCompositionTemplateAreaTemplateDefinition;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateAreaTemplateDefinition;
	Вставить(... params): DataCompositionTemplateAreaTemplateDefinition;
	Get(... params): DataCompositionTemplateAreaTemplateDefinition;
	Получить(... params): DataCompositionTemplateAreaTemplateDefinition;
}
interface DataCompositionTemplateAreaTemplate {
	Template: string;
	Макет: string;
}
interface DataCompositionTotalPlacement {
}
interface DataCompositionTemplateTableHierarchicalGroup {
}
interface DataCompositionTemplateTableBodyTemplate {
	GroupTemplate: string;
	МакетГруппировки: string;
	Template: string;
	Макет: string;
}
interface DataCompositionTemplateTableBodyTemplates {
	Add(): DataCompositionTemplateTableBodyTemplate;
	Добавить(): DataCompositionTemplateTableBodyTemplate;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateTableBodyTemplate;
	Вставить(... params): DataCompositionTemplateTableBodyTemplate;
	Get(... params): DataCompositionTemplateTableBodyTemplate;
	Получить(... params): DataCompositionTemplateTableBodyTemplate;
}
interface DataCompositionTemplateTableGroupTemplate {
	Template: string;
	Макет: string;
	ResourceTemplate: DataCompositionTemplateTableBodyTemplates;
	МакетРесурсов: DataCompositionTemplateTableBodyTemplates;
	ResourceTotalTemplate: string;
	МакетИтоговРесурсов: string;
}
interface DataCompositionTemplateTableRecords {
	ID: string;
	Идентификатор: string;
	Name: string;
	Имя: string;
	DataSet: string;
	НаборДанных: string;
	DataSets: ArrayV8;
	НаборыДанных: ArrayV8;
	RequiredDataSets: ArrayV8;
	ОбязательныеНаборыДанных: ArrayV8;
	RecordsFilter: string;
	ОтборЗаписей: string;
	GroupFilterWithHierarchy: string;
	ОтборГруппировокСИерархией: string;
	Order: DataCompositionOrderExpressions;
	Порядок: DataCompositionOrderExpressions;
	RecordsCount: number;
	КоличествоЗаписей: number;
	RecordsPercent: number;
	ПроцентЗаписей: number;
	HeaderTemplate: DataCompositionTemplateTableGroupTemplate;
	МакетШапки: DataCompositionTemplateTableGroupTemplate;
	FooterTemplate: DataCompositionTemplateTableGroupTemplate;
	МакетПодвала: DataCompositionTemplateTableGroupTemplate;
	Body: DataCompositionTemplateTableGroupBody;
	Тело: DataCompositionTemplateTableGroupBody;
}
interface DataCompositionTemplateTableHierarchicalRecords {
}
interface DataCompositionTemplatePeriodAddition {
	AdditionType: DataCompositionPeriodAdditionType;
	ТипДополнения: DataCompositionPeriodAdditionType;
	Begin;
	Начало;
	End;
	Конец;
}
interface DataCompositionTemplateGroupingItem {
	Expression: string;
	Выражение: string;
	GroupType: DataCompositionGroupType;
	ТипГруппировки: DataCompositionGroupType;
	HierarchyDataSet: string;
	НаборДанныхИерархии: string;
	PeriodAddition: DataCompositionTemplatePeriodAddition;
	ДополнениеПериода: DataCompositionTemplatePeriodAddition;
	FieldName: string;
	ИмяПоля: string;
	ResourceGroup: boolean;
	ГруппировкаРесурса: boolean;
}
interface DataCompositionTemplateGrouping {
	Add(): DataCompositionTemplateGroupingItem;
	Добавить(): DataCompositionTemplateGroupingItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateGroupingItem;
	Вставить(... params): DataCompositionTemplateGroupingItem;
	Get(... params): DataCompositionTemplateGroupingItem;
	Получить(... params): DataCompositionTemplateGroupingItem;
}
interface DataCompositionTemplateTableGroup {
	ID: string;
	Идентификатор: string;
	Name: string;
	Имя: string;
	Group: DataCompositionTemplateGrouping;
	Группировка: DataCompositionTemplateGrouping;
	RecordsFilter: string;
	ОтборЗаписей: string;
	GroupFilter: string;
	ОтборГруппировок: string;
	GroupFilterWithHierarchy: string;
	ОтборГруппировокСИерархией: string;
	GroupFilterHierarchyOnly: string;
	ОтборГруппировокТолькоИерархия: string;
	Order: DataCompositionOrderExpressions;
	Порядок: DataCompositionOrderExpressions;
	HierarchicalOrder: DataCompositionOrderExpressions;
	ИерархическийПорядок: DataCompositionOrderExpressions;
	RecordsCount: number;
	КоличествоЗаписей: number;
	RecordsPercent: number;
	ПроцентЗаписей: number;
	HeaderTemplate: DataCompositionTemplateTableGroupTemplate;
	МакетШапки: DataCompositionTemplateTableGroupTemplate;
	FooterTemplate: DataCompositionTemplateTableGroupTemplate;
	МакетПодвала: DataCompositionTemplateTableGroupTemplate;
	Body: DataCompositionTemplateTableGroupBody;
	Тело: DataCompositionTemplateTableGroupBody;
	HierarchicalBody: DataCompositionTemplateTableGroupBody;
	ТелоИерархии: DataCompositionTemplateTableGroupBody;
}
interface DataCompositionTemplateTableGroupBody {
	Add(... params): DataCompositionTemplateTableHierarchicalGroup | DataCompositionTemplateTableRecords | DataCompositionTemplateTableGroupTemplate | DataCompositionTemplateTableHierarchicalRecords | DataCompositionTemplateTableGroup;
	Добавить(... params): DataCompositionTemplateTableHierarchicalGroup | DataCompositionTemplateTableRecords | DataCompositionTemplateTableGroupTemplate | DataCompositionTemplateTableHierarchicalRecords | DataCompositionTemplateTableGroup;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateTableHierarchicalGroup | DataCompositionTemplateTableRecords | DataCompositionTemplateTableGroupTemplate | DataCompositionTemplateTableHierarchicalRecords | DataCompositionTemplateTableGroup;
	Вставить(... params): DataCompositionTemplateTableHierarchicalGroup | DataCompositionTemplateTableRecords | DataCompositionTemplateTableGroupTemplate | DataCompositionTemplateTableHierarchicalRecords | DataCompositionTemplateTableGroup;
	Get(... params): DataCompositionTemplateTableHierarchicalGroup | DataCompositionTemplateTableRecords | DataCompositionTemplateTableGroupTemplate | DataCompositionTemplateTableHierarchicalRecords | DataCompositionTemplateTableGroup;
	Получить(... params): DataCompositionTemplateTableHierarchicalGroup | DataCompositionTemplateTableRecords | DataCompositionTemplateTableGroupTemplate | DataCompositionTemplateTableHierarchicalRecords | DataCompositionTemplateTableGroup;
}
interface DataCompositionTemplateTable {
	ID: string;
	Идентификатор: string;
	Name: string;
	Имя: string;
	HeaderTemplate: string;
	МакетШапки: string;
	RowsTotalTemplate: string;
	МакетИтоговСтрок: string;
	ColumnsTotalTemplate: string;
	МакетИтоговКолонок: string;
	OverallsTemplate: string;
	МакетОбщихИтогов: string;
	RowsTotalPlacement: DataCompositionTotalPlacement;
	РасположениеИтоговСтрок: DataCompositionTotalPlacement;
	ColumnsTotalPlacement: DataCompositionTotalPlacement;
	РасположениеИтоговКолонок: DataCompositionTotalPlacement;
	Columns: DataCompositionTemplateTableGroupBody;
	Колонки: DataCompositionTemplateTableGroupBody;
	Rows: DataCompositionTemplateTableGroupBody;
	Строки: DataCompositionTemplateTableGroupBody;
}
interface DataCompositionTemplateHierarchicalGroup {
}
interface DataCompositionTemplateRecords {
	ID: string;
	Идентификатор: string;
	Name: string;
	Имя: string;
	DataSet: string;
	НаборДанных: string;
	DataSets: ArrayV8;
	НаборыДанных: ArrayV8;
	RequiredDataSets: ArrayV8;
	ОбязательныеНаборыДанных: ArrayV8;
	RecordsFilter: string;
	ОтборЗаписей: string;
	GroupFilterWithHierarchy: string;
	ОтборГруппировокСИерархией: string;
	Order: DataCompositionOrderExpressions;
	Порядок: DataCompositionOrderExpressions;
	RecordsCount: number;
	КоличествоЗаписей: number;
	RecordsPercent: number;
	ПроцентЗаписей: number;
	HeaderTemplate: string;
	МакетШапки: string;
	FooterTemplate: string;
	МакетПодвала: string;
	Body: DataCompositionTemplateBody;
	Тело: DataCompositionTemplateBody;
}
interface DataCompositionTemplateGroup {
	ID: string;
	Идентификатор: string;
	Name: string;
	Имя: string;
	Group: DataCompositionTemplateGrouping;
	Группировка: DataCompositionTemplateGrouping;
	RecordsFilter: string;
	ОтборЗаписей: string;
	GroupFilter: string;
	ОтборГруппировок: string;
	GroupFilterWithHierarchy: string;
	ОтборГруппировокСИерархией: string;
	GroupFilterHierarchyOnly: string;
	ОтборГруппировокТолькоИерархия: string;
	Order: DataCompositionOrderExpressions;
	Порядок: DataCompositionOrderExpressions;
	HierarchicalOrder: DataCompositionOrderExpressions;
	ИерархическийПорядок: DataCompositionOrderExpressions;
	RecordsCount: number;
	КоличествоЗаписей: number;
	RecordsPercent: number;
	ПроцентЗаписей: number;
	HeaderTemplate: string;
	МакетШапки: string;
	FooterTemplate: string;
	МакетПодвала: string;
	Body: DataCompositionTemplateBody;
	Тело: DataCompositionTemplateBody;
	HierarchicalBody: DataCompositionTemplateBody;
	ТелоИерархии: DataCompositionTemplateBody;
}
interface DataCompositionTemplateHierarchicalRecords {
}
interface DataCompositionTemplateChartGroupTemplate {
	Template: string;
	Макет: string;
	ResourceTemplate: DataCompositionTemplateTableBodyTemplates;
	МакетРесурсов: DataCompositionTemplateTableBodyTemplates;
}
interface DataCompositionTemplateChartHierarchicalGroup {
}
interface DataCompositionTemplateChartGroupBody {
	Add(... params): DataCompositionTemplateChartGroupTemplate | DataCompositionTemplateChartGroup | DataCompositionTemplateChartHierarchicalGroup;
	Добавить(... params): DataCompositionTemplateChartGroupTemplate | DataCompositionTemplateChartGroup | DataCompositionTemplateChartHierarchicalGroup;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateChartGroupTemplate | DataCompositionTemplateChartGroup | DataCompositionTemplateChartHierarchicalGroup;
	Вставить(... params): DataCompositionTemplateChartGroupTemplate | DataCompositionTemplateChartGroup | DataCompositionTemplateChartHierarchicalGroup;
	Get(... params): DataCompositionTemplateChartGroupTemplate | DataCompositionTemplateChartGroup | DataCompositionTemplateChartHierarchicalGroup;
	Получить(... params): DataCompositionTemplateChartGroupTemplate | DataCompositionTemplateChartGroup | DataCompositionTemplateChartHierarchicalGroup;
}
interface DataCompositionTemplateChartGroup {
	ID: string;
	Идентификатор: string;
	Name: string;
	Имя: string;
	Group: DataCompositionTemplateGrouping;
	Группировка: DataCompositionTemplateGrouping;
	RecordsFilter: string;
	ОтборЗаписей: string;
	GroupFilter: string;
	ОтборГруппировок: string;
	GroupFilterWithHierarchy: string;
	ОтборГруппировокСИерархией: string;
	GroupFilterHierarchyOnly: string;
	ОтборГруппировокТолькоИерархия: string;
	Order: DataCompositionOrderExpressions;
	Порядок: DataCompositionOrderExpressions;
	HierarchicalOrder: DataCompositionOrderExpressions;
	ИерархическийПорядок: DataCompositionOrderExpressions;
	RecordsCount: number;
	КоличествоЗаписей: number;
	RecordsPercent: number;
	ПроцентЗаписей: number;
	Body: DataCompositionTemplateChartGroupBody;
	Тело: DataCompositionTemplateChartGroupBody;
	HierarchicalBody: DataCompositionTemplateChartGroupBody;
	ТелоИерархии: DataCompositionTemplateChartGroupBody;
}
interface DataCompositionTemplateChartGroups {
	Add(): DataCompositionTemplateChartGroup;
	Добавить(): DataCompositionTemplateChartGroup;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateChartGroup;
	Вставить(... params): DataCompositionTemplateChartGroup;
	Get(... params): DataCompositionTemplateChartGroup;
	Получить(... params): DataCompositionTemplateChartGroup;
}
interface DataCompositionTemplateChart {
	ID: string;
	Идентификатор: string;
	Name: string;
	Имя: string;
	Template: string;
	Макет: string;
	ResourceTemplate: string;
	МакетРесурсов: string;
	Points: DataCompositionTemplateChartGroups;
	Точки: DataCompositionTemplateChartGroups;
	Series: DataCompositionTemplateChartGroups;
	Серии: DataCompositionTemplateChartGroups;
}
interface DataCompositionTemplateBody {
	Add(... params): DataCompositionTemplateAreaTemplate | DataCompositionTemplateTable | DataCompositionTemplateHierarchicalGroup | DataCompositionTemplateRecords | DataCompositionTemplateNestedObject | DataCompositionTemplateGroup | DataCompositionTemplateHierarchicalRecords | DataCompositionTemplateChart;
	Добавить(... params): DataCompositionTemplateAreaTemplate | DataCompositionTemplateTable | DataCompositionTemplateHierarchicalGroup | DataCompositionTemplateRecords | DataCompositionTemplateNestedObject | DataCompositionTemplateGroup | DataCompositionTemplateHierarchicalRecords | DataCompositionTemplateChart;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateAreaTemplate | DataCompositionTemplateTable | DataCompositionTemplateHierarchicalGroup | DataCompositionTemplateRecords | DataCompositionTemplateNestedObject | DataCompositionTemplateGroup | DataCompositionTemplateHierarchicalRecords | DataCompositionTemplateChart;
	Вставить(... params): DataCompositionTemplateAreaTemplate | DataCompositionTemplateTable | DataCompositionTemplateHierarchicalGroup | DataCompositionTemplateRecords | DataCompositionTemplateNestedObject | DataCompositionTemplateGroup | DataCompositionTemplateHierarchicalRecords | DataCompositionTemplateChart;
	Get(... params): DataCompositionTemplateAreaTemplate | DataCompositionTemplateTable | DataCompositionTemplateHierarchicalGroup | DataCompositionTemplateRecords | DataCompositionTemplateNestedObject | DataCompositionTemplateGroup | DataCompositionTemplateHierarchicalRecords | DataCompositionTemplateChart;
	Получить(... params): DataCompositionTemplateAreaTemplate | DataCompositionTemplateTable | DataCompositionTemplateHierarchicalGroup | DataCompositionTemplateRecords | DataCompositionTemplateNestedObject | DataCompositionTemplateGroup | DataCompositionTemplateHierarchicalRecords | DataCompositionTemplateChart;
}
interface DataCompositionTemplate {
	DataSources: DataCompositionTemplateDataSources;
	ИсточникиДанных: DataCompositionTemplateDataSources;
	DataSets: DataCompositionTemplateDataSets;
	НаборыДанных: DataCompositionTemplateDataSets;
	DataSetLinks: DataCompositionTemplateDataSetLinks;
	СвязиНаборовДанных: DataCompositionTemplateDataSetLinks;
	ParameterValues: DataCompositionTemplateParameterValues;
	ЗначенияПараметров: DataCompositionTemplateParameterValues;
	Templates: DataCompositionTemplateAreaTemplateDefinitions;
	Макеты: DataCompositionTemplateAreaTemplateDefinitions;
	Body: DataCompositionTemplateBody;
	Тело: DataCompositionTemplateBody;
}
declare type МакетКомпоновкиДанных = DataCompositionTemplate;
interface DataCompositionTemplateNestedObject {
	ID: string;
	Идентификатор: string;
	DataComposition: DataCompositionTemplate;
	КомпоновкаДанных: DataCompositionTemplate;
	ParameterValues: DataCompositionTemplateParameterValues;
	ЗначенияПараметров: DataCompositionTemplateParameterValues;
	Name: string;
	Имя: string;
}
interface ChartMarkerType {
}
interface ChartTrendlineApproximationType {
}
interface ChartTrendlineFactor {
}
interface StockChartUsedPointValue {
}
interface ChartLabelLocation {
}
interface ChartLabelArea {
	Location: ChartLabelLocation;
	Положение: ChartLabelLocation;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Font: Font;
	Шрифт: Font;
	TextColor: Color;
	ЦветТекста: Color;
	BackColor: Color;
	ЦветФона: Color;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	Marker: ChartMarkerType;
	Маркер: ChartMarkerType;
}
interface ChartTrendline {
	ApproximationType: ChartTrendlineApproximationType;
	ТипАппроксимации: ChartTrendlineApproximationType;
	ApproximationDegree: number;
	ПорядокАппроксимации: number;
	Line: Line;
	Линия: Line;
	Color: Color;
	Цвет: Color;
	Factor: ChartTrendlineFactor;
	Фактор: ChartTrendlineFactor;
	StockChartUsedPointValue: StockChartUsedPointValue;
	ИспользуемоеЗначениеТочкиБиржевойДиаграммы: StockChartUsedPointValue;
	Text: string;
	Текст: string;
	ShowInLegend: boolean;
	ОтображатьВЛегенде: boolean;
	ShowEquation: boolean;
	ОтображатьУравнение: boolean;
	ShowDeterminationFactor: boolean;
	ОтображатьКоэффициентДетерминации: boolean;
	Marker: ChartMarkerType;
	Маркер: ChartMarkerType;
	Details;
	Расшифровка;
	EquationArea: ChartLabelArea;
	ОбластьУравнения: ChartLabelArea;
}
interface ChartTrendlines {
	Insert(... params): ChartTrendline;
	Вставить(... params): ChartTrendline;
	Add(): ChartTrendline;
	Добавить(): ChartTrendline;
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): ChartTrendline;
	Получить(... params): ChartTrendline;
	Delete(... params): boolean;
	Удалить(... params): boolean;
}
interface ShowInChartLegend {
}
interface ShowInChart {
}
interface ChartSeries {
	Text: string;
	Текст: string;
	Color: Color;
	Цвет: Color;
	Line: Line;
	Линия: Line;
	Marker: ChartMarkerType;
	Маркер: ChartMarkerType;
	Separate: boolean;
	Раздвигать: boolean;
	Indicator: boolean;
	Индикатор: boolean;
	Details;
	Расшифровка;
	SummarySeries: boolean;
	СводнаяСерия: boolean;
	ColorPriority: boolean;
	ПриоритетЦвета: boolean;
	Value;
	Значение;
	Trendlines: ChartTrendlines;
	ЛинииТренда: ChartTrendlines;
	ShowGraphicalDataRepresentationInChartLegend: ShowInChartLegend;
	ОтображатьГрафическоеПредставлениеДанныхВЛегендеДиаграммы: ShowInChartLegend;
	ShowGraphicalDataRepresentationInChart: ShowInChart;
	ОтображатьГрафическоеПредставлениеДанныхВДиаграмме: ShowInChart;
	Pure(): void;
	Пустой(): void;
}
interface PlannerItemScheduleDialog {
	Schedule: PlannerItemScheduleDialog;
	Расписание: PlannerItemScheduleDialog;
	DoModal(): boolean;
	ОткрытьМодально(): boolean;
	Show(... params): void;
	Показать(... params): void;
}
declare type ДиалогРасписанияЭлементаПланировщика = PlannerItemScheduleDialog;
interface GraphicalSchemaItemSubBusinessProcess {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Border;
	Рамка;
	Value;
	Значение;
}
interface CommandGroupCategory {
}
interface XSLTransform {
	LoadFromFile(... params): void;
	ЗагрузитьИзФайла(... params): void;
	LoadFromString(... params): void;
	ЗагрузитьИзСтроки(... params): void;
	LoadFromNode(... params): void;
	ЗагрузитьИзУзла(... params): void;
	Clear(): void;
	Очистить(): void;
	AddParameter(... params): void;
	ДобавитьПараметр(... params): void;
	RemoveParameter(... params): void;
	УдалитьПараметр(... params): void;
	TransformFromFile(... params): string;
	ПреобразоватьИзФайла(... params): string;
	TransformFromString(... params): string;
	ПреобразоватьИзСтроки(... params): string;
	TransformFromNode(... params): string;
	ПреобразоватьИзУзла(... params): string;
	LoadXSLStylesheet(... params): void;
	ЗагрузитьТаблицуСтилейXSL(... params): void;
	LoadXSLStylesheetFromFile(... params): void;
	ЗагрузитьТаблицуСтилейXSLИзФайла(... params): void;
	LoadXSLStylesheetFromString(... params): void;
	ЗагрузитьТаблицуСтилейXSLИзСтроки(... params): void;
	LoadXSLStylesheetFromNode(... params): void;
	ЗагрузитьТаблицуСтилейXSLИзУзла(... params): void;
	Transform(... params): string;
	Преобразовать(... params): string;
}
declare type ПреобразованиеXSL = XSLTransform;
interface EnumChartBoundaryDetectionMethod {
	AutoDetect;
	АвтоОпределение;
	UseValue;
	ИспользоватьЗначение;
	UseValueWithLimitations;
	ИспользоватьЗначениеСОграничением;
}
declare type ПеречислениеСпособОпределенияОграничивающегоЗначенияДиаграммы = EnumChartBoundaryDetectionMethod;
interface DataCompositionResultValueCollectionOutputProcessor {
	ShowOutputPercent: boolean;
	ОтображатьПроцентВывода: boolean;
	SetObject(... params): void;
	УстановитьОбъект(... params): void;
	BeginOutput(): void;
	НачатьВывод(): void;
	OutputItem(... params): void;
	ВывестиЭлемент(... params): void;
	Output(... params): ValueTable | ValueTree;
	Вывести(... params): ValueTable | ValueTree;
	EndOutput(): ValueTable | ValueTree;
	ЗакончитьВывод(): ValueTable | ValueTree;
}
declare type ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = DataCompositionResultValueCollectionOutputProcessor;
interface AdditionalShowMode {
}
interface FormTextDecoration {
	Hyperlink: boolean;
	Гиперссылка: boolean;
	HorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложение: ItemHorizontalLocation;
	VerticalAlign: ItemVerticalAlign;
	ВертикальноеПоложение: ItemVerticalAlign;
	TitleHeight;
	ВысотаЗаголовка;
	BackColor: Color;
	ЦветФона: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Border: Border;
	Рамка: Border;
}
interface SystemInfo {
	OSVersion: string;
	ВерсияОС: string;
	Processor: string;
	Процессор: string;
	RAM: number;
	ОперативнаяПамять: number;
	AppVersion: string;
	ВерсияПриложения: string;
	PlatformType: EnumPlatformType;
	ТипПлатформы: EnumPlatformType;
	UserAgentInformation: string;
	ИнформацияПрограммыПросмотра: string;
	ClientID: UUID;
	ИдентификаторКлиента: UUID;
}
declare type СистемнаяИнформация = SystemInfo;
interface JSONLineBreak {
}
interface JSONCharactersEscapeMode {
}
interface JSONWriterSettings {
	NewLines: JSONLineBreak;
	ПереносСтрок: JSONLineBreak;
	PaddingSymbols: string;
	СимволыОтступа: string;
	UseDoubleQuotes: boolean;
	ИспользоватьДвойныеКавычки: boolean;
	EscapeCharacters: JSONCharactersEscapeMode;
	ЭкранированиеСимволов: JSONCharactersEscapeMode;
	EscapeAngleBrackets: boolean;
	ЭкранироватьУгловыеСкобки: boolean;
	EscapeLineTerminators: boolean;
	ЭкранироватьРазделителиСтрок: boolean;
	EscapeAmpersand: boolean;
	ЭкранироватьАмперсанд: boolean;
	EscapeSingleQuotes: boolean;
	ЭкранироватьОдинарныеКавычки: boolean;
	EscapeSlash: boolean;
	ЭкранироватьСлеш: boolean;
}
declare type ПараметрыЗаписиJSON = JSONWriterSettings;
interface EnumSpecialTextInputMode {
	Auto;
	Авто;
	None;
	Нет;
	DigitsAndPunctuation;
	ЦифрыИПунктуация;
	URL;
	Email;
	PhoneNumber;
	НомерТелефона;
	Digits;
	Цифры;
}
declare type ПеречислениеСпециальныйРежимВводаТекста = EnumSpecialTextInputMode;
interface HTMLPreElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Width: string;
	Ширина: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface DataCompositionDetailsItems {
	Add(... params);
	Добавить(... params);
	Count();
	Количество();
	IndexOf(... params);
	Индекс(... params);
	Get(... params);
	Получить(... params);
}
interface DataCompositionDetailsData {
	Settings: DataCompositionSettings;
	Настройки: DataCompositionSettings;
	Items: DataCompositionDetailsItems;
	Элементы: DataCompositionDetailsItems;
}
declare type ДанныеРасшифровкиКомпоновкиДанных = DataCompositionDetailsData;
interface TestedFormButton {
	TitleText: string;
	ТекстЗаголовка: string;
	Name: string;
	Имя: string;
	Type: EnumFormButtonType;
	Вид: EnumFormButtonType;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
	GetToolTipText(): string;
	ПолучитьТекстПодсказки(): string;
	CurrentVisible(): boolean;
	ТекущаяВидимость(): boolean;
	CurrentEnable(): boolean;
	ТекущаяДоступность(): boolean;
	CurrentReadOnly(): boolean;
	ТекущееТолькоПросмотр(): boolean;
	GetContextMenu(): TestedFormGroup;
	ПолучитьКонтекстноеМеню(): TestedFormGroup;
	GetCommandBar(): TestedFormGroup;
	ПолучитьКоманднуюПанель(): TestedFormGroup;
	Click(): void;
	Нажать(): void;
}
interface TestedForm {
	TitleText: string;
	ТекстЗаголовка: string;
	FormName: string;
	ИмяФормы: string;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
	GetCurrentItem(): string;
	ПолучитьТекущийЭлемент(): string;
	FindDefaultButton(): TestedFormButton;
	НайтиКнопкуПоУмолчанию(): TestedFormButton;
	CurrentModified(): boolean;
	ТекущаяМодифицированность(): boolean;
	GotoNextItem(): void;
	ПерейтиКСледующемуЭлементу(): void;
	GotoPreviousItem(): void;
	ПерейтиКПредыдущемуЭлементу(): void;
	WaitForClosing(... params): boolean;
	ОжидатьЗакрытие(... params): boolean;
	GetCommandBar(): TestedFormGroup;
	ПолучитьКоманднуюПанель(): TestedFormGroup;
	ExecuteChoiceFromList(... params): void;
	ВыполнитьВыборИзСписка(... params): void;
	ExecuteChoiceFromMenu(... params): void;
	ВыполнитьВыборИзМеню(... params): void;
}
interface TestedFormTable {
	TitleText: string;
	ТекстЗаголовка: string;
	Name: string;
	Имя: string;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
	GetToolTipText(): string;
	ПолучитьТекстПодсказки(): string;
	CurrentVisible(): boolean;
	ТекущаяВидимость(): boolean;
	CurrentEnable(): boolean;
	ТекущаяДоступность(): boolean;
	CurrentReadOnly(): boolean;
	ТекущееТолькоПросмотр(): boolean;
	GetContextMenu(): TestedFormGroup;
	ПолучитьКонтекстноеМеню(): TestedFormGroup;
	GetCommandBar(): TestedFormGroup;
	ПолучитьКоманднуюПанель(): TestedFormGroup;
	GetCurrentItem(): string;
	ПолучитьТекущийЭлемент(): string;
	GetCellText(... params);
	ПолучитьТекстЯчейки(... params);
	SetOrder(... params): void;
	УстановитьПорядок(... params): void;
	GotoNextItem(): void;
	ПерейтиКСледующемуЭлементу(): void;
	GotoPreviousItem(): void;
	ПерейтиКПредыдущемуЭлементу(): void;
	GoOneLevelUp(): void;
	ПерейтиНаУровеньВверх(): void;
	GoOneLevelDown(): void;
	ПерейтиНаУровеньВниз(): void;
	GotoNextRow(... params): void;
	ПерейтиКСледующейСтроке(... params): void;
	GotoPreviousRow(... params): void;
	ПерейтиКПредыдущейСтроке(... params): void;
	GotoFirstRow(... params): void;
	ПерейтиКПервойСтроке(... params): void;
	GotoLastRow(... params): void;
	ПерейтиКПоследнейСтроке(... params): void;
	GotoRow(... params): boolean;
	ПерейтиКСтроке(... params): boolean;
	CurrentModeIsEdit();
	ТекущийРежимРедактирование();
	ChangeRow(): void;
	ИзменитьСтроку(): void;
	EndEditRow(... params): void;
	ЗакончитьРедактированиеСтроки(... params): void;
	Choose(): void;
	Выбрать(): void;
	SelectAllRows(): void;
	ВыделитьВсеСтроки(): void;
	GetSelectedRows(): FixedArray;
	ПолучитьВыделенныеСтроки(): FixedArray;
	AddRow(): void;
	ДобавитьСтроку(): void;
	DeleteRow(): void;
	УдалитьСтроку(): void;
	SwitchRowDeleteMark(): void;
	ПереключитьПометкуУдаленияСтроки(): void;
	CanBeExpanded(): boolean;
	ВозможноРазвернуть(): boolean;
	Expanded(): boolean;
	Развернут(): boolean;
	Expand(... params): void;
	Развернуть(... params): void;
	Collapse(... params): void;
	Свернуть(... params): void;
}
interface TestedFormField {
	TitleText: string;
	ТекстЗаголовка: string;
	Name: string;
	Имя: string;
	Type: EnumFormFieldType;
	Вид: EnumFormFieldType;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
	GetToolTipText(): string;
	ПолучитьТекстПодсказки(): string;
	CurrentVisible(): boolean;
	ТекущаяВидимость(): boolean;
	CurrentEnable(): boolean;
	ТекущаяДоступность(): boolean;
	CurrentReadOnly(): boolean;
	ТекущееТолькоПросмотр(): boolean;
	GetContextMenu(): TestedFormGroup;
	ПолучитьКонтекстноеМеню(): TestedFormGroup;
	GetCommandBar(): TestedFormGroup;
	ПолучитьКоманднуюПанель(): TestedFormGroup;
	Clear(): void;
	Очистить(): void;
	Create(): void;
	Создать(): void;
	CancelEdit(): void;
	ОтменитьРедактирование(): void;
	Open(): void;
	Открыть(): void;
	StartChoosing(): void;
	Выбрать(): void;
	Click(): void;
	Нажать(): void;
	WriteContentToFile(): void;
	ЗаписатьСодержимоеВФайл(): void;
	StartChoosingFromChoiceList(): void;
	ВыбратьИзСпискаВыбора(): void;
	ExecuteChoiceFromChoiceList(... params): void;
	ВыполнитьВыборИзСпискаВыбора(... params): void;
	OpenDropList(): void;
	ОткрытьВыпадающийСписок(): void;
	CloseDropList(): void;
	ЗакрытьВыпадающийСписок(): void;
	ExecuteChoiceFromDropList(... params): void;
	ВыполнитьВыборИзВыпадающегоСписка(... params): void;
	DropListIsOpen(): boolean;
	ВыпадающийСписокОткрыт(): boolean;
	WaitForDropListGeneration(... params): boolean;
	ОжидатьФормированияВыпадающегоСписка(... params): boolean;
	IncreaseValue(): void;
	УвеличитьЗначение(): void;
	DecreaseValue(): void;
	УменьшитьЗначение(): void;
	SetCheck(): void;
	УстановитьОтметку(): void;
	GetEditText(): string;
	ПолучитьТекстРедактирования(): string;
	SelectOption(... params): void;
	ВыбратьВариант(... params): void;
	GotoValue(... params): void;
	ПерейтиКЗначению(... params): void;
	GotoNextMonth(): void;
	ПерейтиНаМесяцВперед(): void;
	GotoPreviousMonth(): void;
	ПерейтиНаМесяцНазад(): void;
	GotoNextYear(): void;
	ПерейтиНаГодВперед(): void;
	GotoPreviousYear(): void;
	ПерейтиНаГодНазад(): void;
	GotoDate(... params): void;
	ПерейтиКДате(... params): void;
	SetCurrentArea(... params);
	УстановитьТекущуюОбласть(... params);
	GetCurrentAreaAddress(): string;
	ПолучитьАдресТекущейОбласти(): string;
	GetCurrentAreaText(): string;
	ПолучитьТекстТекущейОбласти(): string;
	GetAreaText(... params): string;
	ПолучитьТекстОбласти(... params): string;
	BeginEditCurrentArea(): void;
	НачатьРедактированиеТекущейОбласти(): void;
	EndEditCurrentArea(... params): void;
	ЗакончитьРедактированиеТекущейОбласти(... params): void;
	CurrentModeIsEdit();
	ТекущийРежимРедактирование();
	GetCurrentAreaField(): TestedFormField;
	ПолучитьПолеТекущейОбласти(): TestedFormField;
	GetHTML(... params): void;
	ПолучитьHTML(... params): void;
	InputHTML(... params): void;
	ВвестиHTML(... params): void;
}
interface TestedFormGroup {
	TitleText: string;
	ТекстЗаголовка: string;
	Name: string;
	Имя: string;
	Type: EnumFormGroupType;
	Вид: EnumFormGroupType;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
	GetToolTipText(): string;
	ПолучитьТекстПодсказки(): string;
	CurrentVisible(): boolean;
	ТекущаяВидимость(): boolean;
	CurrentEnable(): boolean;
	ТекущаяДоступность(): boolean;
	CurrentReadOnly(): boolean;
	ТекущееТолькоПросмотр(): boolean;
	GetContextMenu(): TestedFormGroup;
	ПолучитьКонтекстноеМеню(): TestedFormGroup;
	GetCommandBar(): TestedFormGroup;
	ПолучитьКоманднуюПанель(): TestedFormGroup;
	Expand(): void;
	Развернуть(): void;
	Collapse(): void;
	Свернуть(): void;
	GetCurrentPage(): TestedFormGroup;
	ПолучитьТекущуюСтраницу(): TestedFormGroup;
}
interface TestedFormDecoration {
	TitleText: string;
	ТекстЗаголовка: string;
	Name: string;
	Имя: string;
	Type: EnumFormGroupType;
	Вид: EnumFormGroupType;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
	GetToolTipText(): string;
	ПолучитьТекстПодсказки(): string;
	CurrentVisible(): boolean;
	ТекущаяВидимость(): boolean;
	CurrentEnable(): boolean;
	ТекущаяДоступность(): boolean;
	CurrentReadOnly(): boolean;
	ТекущееТолькоПросмотр(): boolean;
	GetContextMenu(): TestedFormGroup;
	ПолучитьКонтекстноеМеню(): TestedFormGroup;
	GetCommandBar(): TestedFormGroup;
	ПолучитьКоманднуюПанель(): TestedFormGroup;
	Click(): void;
	Нажать(): void;
}
interface TestedWindowCommandInterface {
	TitleText: string;
	ТекстЗаголовка: string;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
}
interface TestedClientApplicationWindow {
	Caption: string;
	Заголовок: string;
	IsMain: boolean;
	Основное: boolean;
	HomePage: boolean;
	НачальнаяСтраница: boolean;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
	Close(): void;
	Закрыть(): void;
	GetCommandInterface(): TestedWindowCommandInterface;
	ПолучитьКомандныйИнтерфейс(): TestedWindowCommandInterface;
	ExecuteCommand(... params): void;
	ВыполнитьКоманду(... params): void;
	GetUserMessageTexts(): FixedArray;
	ПолучитьТекстыСообщенийПользователю(): FixedArray;
	CloseUserMessagesPanel(): void;
	ЗакрытьПанельСообщенийПользователю(): void;
	GotoStartPage(): void;
	ПерейтиКНачальнойСтранице(): void;
	GotoNextWindow(): void;
	ПерейтиКСледующемуОкну(): void;
	GotoPreviousWindow(): void;
	ПерейтиКПредыдущемуОкну(): void;
	ChooseUserMessage(... params): void;
	ВыбратьСообщениеПользователю(... params): void;
}
interface TestedApplication {
	Connect(): void;
	УстановитьСоединение(): void;
	Disconnect(): void;
	РазорватьСоединение(): void;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	WaitForObjectDisplayed(... params): boolean;
	ОжидатьОтображениеОбъекта(... params): boolean;
	GetActiveWindow(): TestedClientApplicationWindow;
	ПолучитьАктивноеОкно(): TestedClientApplicationWindow;
	GetCurrentErrorInfo(): ErrorInfo;
	ПолучитьТекущуюИнформациюОбОшибке(): ErrorInfo;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	StartUILogRecording(): void;
	НачатьЗаписьЖурналаДействийПользователя(): void;
	ResumeUILogRecording(): void;
	ПродолжитьЗаписьЖурналаДействийПользователя(): void;
	PauseUILogRecording(): void;
	ПриостановитьЗаписьЖурналаДействийПользователя(): void;
	CancelUILogRecording(): void;
	ПрерватьЗаписьЖурналаДействийПользователя(): void;
	FinishUILogRecording();
	ЗавершитьЗаписьЖурналаДействийПользователя();
	GetAccumulatedPerformanceIndicators(... params): Structure;
	ПолучитьНакопленныеПоказателиПроизводительности(... params): Structure;
	ClearAccumulatedPerformanceIndicators(): void;
	ОчиститьНакопленныеПоказателиПроизводительности(): void;
	SetFileDialogResult(... params): void;
	УстановитьРезультатДиалогаВыбораФайла(... params): void;
}
declare type ТестируемоеПриложение = TestedApplication;
interface EventLogAccessDeniedEventUseDescription {
	Object;
	Объект;
	LoggedFields;
	ПоляРегистрации;
}
declare type ОписаниеИспользованияСобытияОтказВДоступеЖурналаРегистрации = EventLogAccessDeniedEventUseDescription;
interface GraphicalSchemaShapes {
}
interface GraphicalSchemaItemDecoration {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Shape: GraphicalSchemaShapes;
	Фигура: GraphicalSchemaShapes;
}
interface ContactDataInstantMessagingAddressType {
}
interface ContactDataItemInstantMessaging {
	ContactDataItemInstantMessaging: string | ContactDataInstantMessagingAddressType;
	ЭлементДанныхКонтактаМгновенныеСообщения: string | ContactDataInstantMessagingAddressType;
	InstantMessagingType: string;
	ТипМгновенныхСообщений: string;
	ID: string;
	Идентификатор: string;
}
declare type ЭлементДанныхКонтактаМгновенныеСообщения = ContactDataItemInstantMessaging;
interface ColumnLocation {
}
interface ByteOrder {
}
interface PivotChartLegendArea {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	Scrolling: boolean;
	Прокрутка: boolean;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
}
interface FormattedDocumentBookmark {
}
interface ParagraphType {
}
interface FormattedDocumentText {
	BeginBookmark: FormattedDocumentBookmark;
	ЗакладкаНачала: FormattedDocumentBookmark;
	EndBookmark: FormattedDocumentBookmark;
	ЗакладкаКонца: FormattedDocumentBookmark;
	Parent: FormattedDocumentParagraph;
	Родитель: FormattedDocumentParagraph;
	Text: string;
	Текст: string;
	Font: Font;
	Шрифт: Font;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	URL: string;
	НавигационнаяСсылка: string;
}
interface FormattedDocumentLinefeed {
	BeginBookmark: FormattedDocumentBookmark;
	ЗакладкаНачала: FormattedDocumentBookmark;
	EndBookmark: FormattedDocumentBookmark;
	ЗакладкаКонца: FormattedDocumentBookmark;
	Parent: FormattedDocumentParagraph;
	Родитель: FormattedDocumentParagraph;
}
interface FormattedDocumentItemCollection {
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture | FormattedDocumentParagraph;
	Получить(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture | FormattedDocumentParagraph;
	Add(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture | FormattedDocumentParagraph;
	Добавить(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture | FormattedDocumentParagraph;
	Insert(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture | FormattedDocumentParagraph;
	Вставить(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture | FormattedDocumentParagraph;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
}
interface FormattedDocumentParagraph {
	BeginBookmark: FormattedDocumentBookmark;
	ЗакладкаНачала: FormattedDocumentBookmark;
	EndBookmark: FormattedDocumentBookmark;
	ЗакладкаКонца: FormattedDocumentBookmark;
	ParagraphType: ParagraphType;
	ТипПараграфа: ParagraphType;
	HorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложение: HorizontalAlign;
	Indent: number;
	Отступ: number;
	LineSpacing: number;
	МеждустрочныйИнтервал: number;
	Items: FormattedDocumentItemCollection;
	Элементы: FormattedDocumentItemCollection;
}
interface FormattedDocumentPicture {
	BeginBookmark: FormattedDocumentBookmark;
	ЗакладкаНачала: FormattedDocumentBookmark;
	EndBookmark: FormattedDocumentBookmark;
	ЗакладкаКонца: FormattedDocumentBookmark;
	Parent: FormattedDocumentParagraph;
	Родитель: FormattedDocumentParagraph;
	Picture: string | Picture;
	Картинка: string | Picture;
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	URL: string;
	НавигационнаяСсылка: string;
}
interface FixedMap {
	Count(): number;
	Количество(): number;
	Get(... params);
	Получить(... params);
}
declare type ФиксированноеСоответствие = FixedMap;
interface PlannerBackgroundInterval {
	Begin: Date;
	Начало: Date;
	End: Date;
	Конец: Date;
	Color: Color;
	Цвет: Color;
	DimensionValues: FixedMap;
	ЗначенияИзмерений: FixedMap;
}
declare type ИнтервалФонаПланировщика = PlannerBackgroundInterval;
interface PlannerBackgroundIntervalCollection {
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): PlannerBackgroundInterval;
	Получить(... params): PlannerBackgroundInterval;
	Add(... params): PlannerBackgroundInterval;
	Добавить(... params): PlannerBackgroundInterval;
	Insert(... params): PlannerBackgroundInterval;
	Вставить(... params): PlannerBackgroundInterval;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): PlannerBackgroundInterval;
	Найти(... params): PlannerBackgroundInterval;
}
declare type КоллекцияИнтерваловФонаПланировщика = PlannerBackgroundIntervalCollection;
interface FormItemOrientation {
}
interface ProgressBarSmoothingMode {
}
interface FormProgressBarField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	MinValue: number;
	МинимальноеЗначение: number;
	MaxValue: number;
	МаксимальноеЗначение: number;
	Orientation: FormItemOrientation;
	Ориентация: FormItemOrientation;
	Representation: ProgressBarSmoothingMode;
	Отображение: ProgressBarSmoothingMode;
	ShowPercent: boolean;
	ОтображатьПроценты: boolean;
	BorderColor: Color;
	ЦветРамки: Color;
}
interface InternetProxy {
	User: string;
	Пользователь: string;
	Password: string;
	Пароль: string;
	BypassProxyOnAddresses: ArrayV8;
	НеИспользоватьПроксиДляАдресов: ArrayV8;
	BypassProxyOnLocal: boolean;
	НеИспользоватьПроксиДляЛокальныхАдресов: boolean;
	Set(... params): void;
	Установить(... params): void;
	Server(... params): string;
	Сервер(... params): string;
	Port(... params): number;
	Порт(... params): number;
	UseOSAuthentication(... params);
	ИспользоватьАутентификациюОС(... params);
}
declare type ИнтернетПрокси = InternetProxy;
interface WindowsCertificationAuthorityCertificates {
}
declare type СертификатыУдостоверяющихЦентровWindows = WindowsCertificationAuthorityCertificates;
interface FileCertificationAuthorityCertificates {
	FileName: string;
	ИмяФайла: string;
}
declare type СертификатыУдостоверяющихЦентровФайл = FileCertificationAuthorityCertificates;
interface WindowsCertificateSelectMode {
}
interface WindowsClientCertificate {
	WindowsCertificateSelectMode: WindowsCertificateSelectMode;
	СпособВыбораСертификатаWindows: WindowsCertificateSelectMode;
}
declare type СертификатКлиентаWindows = WindowsClientCertificate;
interface FileClientCertificate {
	FileName: string;
	ИмяФайла: string;
}
declare type СертификатКлиентаФайл = FileClientCertificate;
interface OpenSSLSecureConnection {
	CertificationAuthorityCertificates: WindowsCertificationAuthorityCertificates | FileCertificationAuthorityCertificates;
	СертификатыУдостоверяющихЦентров: WindowsCertificationAuthorityCertificates | FileCertificationAuthorityCertificates;
	ClientCertificate: WindowsClientCertificate | FileClientCertificate;
	СертификатКлиента: WindowsClientCertificate | FileClientCertificate;
}
declare type ЗащищенноеСоединениеOpenSSL = OpenSSLSecureConnection;
interface FTPConnection {
	Host: string;
	Сервер: string;
	Port: number;
	Порт: number;
	User: string;
	Пользователь: string;
	Password: string;
	Пароль: string;
	Proxy: InternetProxy;
	Прокси: InternetProxy;
	PassiveMode: boolean;
	ПассивныйРежим: boolean;
	Timeout: number;
	Таймаут: number;
	IsSecure;
	Защищенное;
	SecureConnection: OpenSSLSecureConnection;
	ЗащищенноеСоединение: OpenSSLSecureConnection;
	Get(... params): void;
	Получить(... params): void;
	Put(... params): void;
	Записать(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Переместить(... params): void;
	CreateDirectory(... params): void;
	СоздатьКаталог(... params): void;
	GetCurrentDirectory(): string;
	ТекущийКаталог(): string;
	SetCurrentDirectory(... params): void;
	УстановитьТекущийКаталог(... params): void;
	FindFiles(... params): ArrayV8;
	НайтиФайлы(... params): ArrayV8;
}
declare type FTPСоединение = FTPConnection;
interface EnumAutoSeriesSeparation {
	None;
	Нет;
	All;
	Все;
	Maximum;
	Максимум;
	Minimum;
	Минимум;
}
declare type ПеречислениеАвтоРаздвижениеСерий = EnumAutoSeriesSeparation;
interface PredictionModelColumnType {
}
interface PredictionModelColumn {
	Name: string;
	Имя: string;
	ColumnType: PredictionModelColumnType;
	ТипКолонки: PredictionModelColumnType;
	DataPath: string;
	ПутьКДанным: string;
	Columns;
	Колонки;
	ExtendedParameters;
	ДополнительныеПараметры;
}
interface PredictionModelColumns {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): PredictionModelColumn;
	Найти(... params): PredictionModelColumn;
	Get(... params): PredictionModelColumn;
	Получить(... params): PredictionModelColumn;
}
interface PredictionModelInputColumnSetting {
	DataSourceColumn: PredictionModelColumn;
	КолонкаИсточникаДанных: PredictionModelColumn;
	PredictionModelColumn: PredictionModelColumn;
	КолонкаМоделиПрогноза: PredictionModelColumn;
}
interface PredictionModelInputColumnsSetting {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): PredictionModelInputColumnSetting;
	Найти(... params): PredictionModelInputColumnSetting;
	Get(... params): PredictionModelInputColumnSetting;
	Получить(... params): PredictionModelInputColumnSetting;
}
interface PredictionModelAssociationRules {
	DataSource;
	ИсточникДанных;
	Columns: PredictionModelColumns;
	Колонки: PredictionModelColumns;
	InputColumnsSetting: PredictionModelInputColumnsSetting;
	НастройкаВходныхКолонок: PredictionModelInputColumnsSetting;
	ResultColumns;
	КолонкиРезультата;
	Rules: FixedArray;
	Правила: FixedArray;
	Execute(): ValueTable;
	Выполнить(): ValueTable;
}
interface EventLogEntryTransactionMode {
}
interface DataAnalysisParametersControl {
	Name: string;
	Имя: string;
	Enabled: boolean;
	Доступность: boolean;
}
interface ChartLabelType {
}
interface DataCompositionValueCollectionTemplateGenerator {
}
interface ApplicationFormsOpenningMode {
}
interface DOMCanonicalization {
	Canonicalize(... params): void;
	Канонизировать(... params): void;
}
declare type КаноническийDOM = DOMCanonicalization;
interface GeographicalSchemaLineObjectSegments {
	Count(): number;
	Количество(): number;
	Get(... params): GeographicalSchemaLineObjectSegments;
	Получить(... params): GeographicalSchemaLineObjectSegments;
	Add(): GeographicalSchemaLineObjectSegments;
	Добавить(): GeographicalSchemaLineObjectSegments;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
}
interface EnumMessageStatus {
	WithoutStatus;
	БезСтатуса;
	Ordinary;
	Обычное;
	Information;
	Информация;
	Attention;
	Внимание;
	Important;
	Важное;
	VeryImportant;
	ОченьВажное;
}
declare type ПеречислениеСтатусСообщения = EnumMessageStatus;
interface EnumDataCompositionGroupPlacement {
	None;
	Нет;
	Begin;
	Начало;
	End;
	Конец;
	BeginAndEnd;
	НачалоИКонец;
}
declare type ПеречислениеРасположениеГруппировкиКомпоновкиДанных = EnumDataCompositionGroupPlacement;
interface GeographicalSchemaLineType {
}
interface EnumAddInType {
	COM;
	Native;
}
declare type ПеречислениеТипВнешнейКомпоненты = EnumAddInType;
interface ContactDataAddressType {
}
interface EnumFileOpenMode {
	Create;
	Создать;
	CreateNew;
	СоздатьНовый;
	Open;
	Открыть;
	OpenOrCreate;
	ОткрытьИлиСоздать;
	Truncate;
	Обрезать;
	Append;
	Дописать;
}
declare type ПеречислениеРежимОткрытияФайла = EnumFileOpenMode;
interface DataCompositionTemplateComposer {
	Execute(... params): DataCompositionTemplate;
	Выполнить(... params): DataCompositionTemplate;
}
declare type КомпоновщикМакетаКомпоновкиДанных = DataCompositionTemplateComposer;
interface ContactDataURLType {
}
interface CommandBarButtons {
	Count();
	Количество();
	Add(... params);
	Добавить(... params);
	Insert(... params);
	Вставить(... params);
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	IndexOf(... params);
	Индекс(... params);
	Find(... params);
	Найти(... params);
	Get(... params);
	Получить(... params);
}
interface CommandBarButton {
	Name: string;
	Имя: string;
	ButtonType;
	ТипКнопки;
	ModifiesData: boolean;
	ИзменяетДанные: boolean;
	Enabled: boolean;
	Доступность: boolean;
	Check: boolean;
	Пометка: boolean;
	Action;
	Действие;
	Text: string;
	Текст: string;
	ToolTip: string;
	Подсказка: string;
	Description: string;
	Пояснение: string;
	Picture: Picture;
	Картинка: Picture;
	Representation;
	Отображение;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
	Buttons: CommandBarButtons;
	Кнопки: CommandBarButtons;
	DefaultButton: boolean;
	КнопкаПоУмолчанию: boolean;
	ButtonOrder;
	ПорядокКнопок;
}
interface FormPagesRepresentation {
}
interface FormPagesState {
}
interface FormPages {
	PagesRepresentation: FormPagesRepresentation;
	ОтображениеСтраниц: FormPagesRepresentation;
	CurrentPage: FormGroup;
	ТекущаяСтраница: FormGroup;
	CurrentPagesState: FormPagesState;
	ТекущееСостояниеСтраниц: FormPagesState;
}
interface PrintSettings {
	PageSize: string;
	РазмерСтраницы: string;
}
declare type НастройкиПечати = PrintSettings;
interface ChartSplineMode {
}
interface DynamicListCellAppearance {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
}
interface DynamicListCellAppearances {
	Count(): number;
	Количество(): number;
	Get(... params): DynamicListCellAppearance;
	Получить(... params): DynamicListCellAppearance;
}
interface DataCompositionAvailableParameterUseRestriction {
	Parameter: DataCompositionParameter;
	Параметр: DataCompositionParameter;
	Enabled: boolean;
	Доступность: boolean;
}
interface DataCompositionExpression {
}
declare type ВыражениеКомпоновкиДанных = DataCompositionExpression;
interface XMLNodeType {
}
interface XMLSpace {
}
interface XMLNamespaceContext {
	DefaultNamespace: string;
	ПространствоИменПоУмолчанию: string;
	Depth: number;
	Глубина: number;
	NamespaceURIs(): ArrayV8;
	URIПространствИмен(): ArrayV8;
	NamespaceMappings(): Map;
	СоответствияПространствИмен(): Map;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	Prefixes(... params): ArrayV8;
	Префиксы(... params): ArrayV8;
}
declare type КонтекстПространствИменXML = XMLNamespaceContext;
interface XMLValidationType {
}
interface XMLReaderSettings {
	Version: string;
	Версия: string;
	Lang: string;
	Язык: string;
	Space: XMLSpace;
	ПробельныеСимволы: XMLSpace;
	ValidationType: XMLValidationType;
	ТипПроверкиПравильности: XMLValidationType;
	IgnoreXMLDeclaration: boolean;
	ИгнорироватьОбъявлениеXML: boolean;
	IgnoreDocumentType: boolean;
	ИгнорироватьТипДокумента: boolean;
	IgnoreProcessingInstructions: boolean;
	ИгнорироватьИнструкцииОбработки: boolean;
	IgnoreComments: boolean;
	ИгнорироватьКомментарии: boolean;
	IgnoreWhitespace: boolean;
	ИгнорироватьПробельныеСимволы: boolean;
	CDATASectionAsText: boolean;
	СекцииCDATAКакТекст: boolean;
	UseIgnorableWhitespace: boolean;
	ИспользоватьИгнорируемыеПробельныеСимволы: boolean;
}
declare type ПараметрыЧтенияXML = XMLReaderSettings;
interface XMLAttributeType {
}
interface XMLReader {
	NodeType: XMLNodeType;
	ТипУзла: XMLNodeType;
	Name: string;
	Имя: string;
	LocalName: string;
	ЛокальноеИмя: string;
	Prefix: string;
	Префикс: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Value: string;
	Значение: string;
	XMLEncoding: string;
	КодировкаXML: string;
	InputEncoding: string;
	КодировкаИсточника: string;
	XMLVersion: string;
	ВерсияXML: string;
	Standalone: boolean;
	Автономный: boolean;
	BaseURI: string;
	БазовыйURI: string;
	HasName: boolean;
	ИмеетИмя: boolean;
	SystemId: string;
	СистемныйИдентификатор: string;
	PublicId: string;
	ПубличныйИдентификатор: string;
	NotationName: string;
	ИмяНотации: string;
	HasValue: boolean;
	ИмеетЗначение: boolean;
	IsWhitespace: boolean;
	ЭтоПробельныеСимволы: boolean;
	IsCharacters: boolean;
	ЭтоСимвольныеДанные: boolean;
	Space: XMLSpace;
	ПробельныеСимволы: XMLSpace;
	Lang: string;
	Язык: string;
	NamespaceContext: XMLNamespaceContext;
	КонтекстПространствИмен: XMLNamespaceContext;
	IsDefaultAttribute: boolean;
	ЭтоАтрибутПоУмолчанию: boolean;
	Settings: XMLReaderSettings;
	Параметры: XMLReaderSettings;
	IgnoreWhitespace: boolean;
	ИгнорироватьПробелы: boolean;
	Read(): boolean;
	Прочитать(): boolean;
	ReadAttribute(): boolean;
	ПрочитатьАтрибут(): boolean;
	AttributeCount(): number;
	КоличествоАтрибутов(): number;
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	LookupNamespaceURI(... params);
	НайтиURIПространстваИмен(... params);
	AttributeName(... params): string;
	ИмяАтрибута(... params): string;
	AttributePrefix(... params): string;
	ПрефиксАтрибута(... params): string;
	AttributeLocalName(... params): string;
	ЛокальноеИмяАтрибута(... params): string;
	AttributeNamespaceURI(... params): string;
	URIПространстваИменАтрибута(... params): string;
	AttributeValue(... params): string;
	ЗначениеАтрибута(... params): string;
	AttributeType(... params): XMLAttributeType;
	ТипАтрибута(... params): XMLAttributeType;
	FirstAttribute(): boolean;
	ПервыйАтрибут(): boolean;
	NextAttribute(): boolean;
	СледующийАтрибут(): boolean;
	Skip(): void;
	Пропустить(): void;
	MoveToContent(... params): XMLNodeType;
	ПерейтиКСодержимому(... params): XMLNodeType;
	FirstDeclaration(): boolean;
	ПервоеОбъявление(): boolean;
	NextDeclaration(): boolean;
	СледующееОбъявление(): boolean;
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	SetString(... params): void;
	УстановитьСтроку(... params): void;
	Close(): void;
	Закрыть(): void;
	OpenStream(... params): void;
	ОткрытьПоток(... params): void;
}
declare type ЧтениеXML = XMLReader;
interface EnumGeographicalSchemaLineType {
	None;
	НетЛинии;
	Solid;
	Сплошная;
	Dotted;
	Точечная;
	Dashed;
	Пунктир;
	DashDotted;
	ПунктирТочка;
	DashDottedDotted;
	ПунктирТочкаТочка;
}
declare type ПеречислениеТипЛинииГеографическойСхемы = EnumGeographicalSchemaLineType;
interface EnumGaugeChartValuesScaleLabelsLocation {
	AtScale;
	НаШкале;
	InsideScale;
	ВнутриШкалы;
}
declare type ПеречислениеПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = EnumGaugeChartValuesScaleLabelsLocation;
interface DataCompositionTemplateGenerator {
}
interface SaveFormDataInSettings {
}
interface ChartSeriesOrderInLegend {
}
interface XBaseKey {
}
interface XBaseEncoding {
}
interface XBaseIndex {
	Name: string;
	Имя: string;
	Expression: string;
	Выражение: string;
	Unique: boolean;
	Уникальность: boolean;
	Desc: boolean;
	Убыв: boolean;
	Filter: string;
	Фильтр: string;
}
interface XBaseField {
	Name: string;
	Имя: string;
	Type: string;
	Тип: string;
	Length: number;
	Длина: number;
	Precision: number;
	Точность: number;
}
interface XBaseFieldsCollection {
	Count(): number;
	Количество(): number;
	Add(... params): void;
	Добавить(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): XBaseField;
	Найти(... params): XBaseField;
	Get(... params): XBaseField;
	Получить(... params): XBaseField;
}
interface XBaseIndexesCollection {
	Count(): number;
	Количество(): number;
	Add(... params): void;
	Добавить(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): XBaseIndex;
	Найти(... params): XBaseIndex;
	Get(... params): XBaseIndex;
	Получить(... params): XBaseIndex;
}
interface XBase {
	key: XBaseKey;
	ключ: XBaseKey;
	AutoSave: boolean;
	АвтоСохранение: boolean;
	ShowDeleted: boolean;
	ОтображатьУдаленные: boolean;
	Encoding: XBaseEncoding;
	Кодировка: XBaseEncoding;
	CurrentIndex: XBaseIndex;
	ТекущийИндекс: XBaseIndex;
	fields: XBaseFieldsCollection;
	поля: XBaseFieldsCollection;
	indexes: XBaseIndexesCollection;
	индексы: XBaseIndexesCollection;
	CreateFile(... params): void;
	СоздатьФайл(... params): void;
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	IsOpen(): boolean;
	Открыта(): boolean;
	CloseFile(): void;
	ЗакрытьФайл(): void;
	Zap(): void;
	ОчиститьФайл(): void;
	Pack(): void;
	Сжать(): void;
	Reindex(): void;
	Переиндексировать(): void;
	First(): boolean;
	Первая(): boolean;
	Last(): boolean;
	Последняя(): boolean;
	Next(): boolean;
	Следующая(): boolean;
	Prev(): boolean;
	Предыдущая(): boolean;
	RecNo(): number;
	НомерЗаписи(): number;
	GoTo(... params): boolean;
	Перейти(... params): boolean;
	EOF(): boolean;
	ВКонце(): boolean;
	BOF(): boolean;
	ВНачале(): boolean;
	Find(... params): boolean;
	Найти(... params): boolean;
	FindByKey(... params): boolean;
	НайтиПоКлючу(... params): boolean;
	Add(): void;
	Добавить(): void;
	Copy(): void;
	Скопировать(): void;
	Save(): void;
	Записать(): void;
	Cancel(): void;
	Отменить(): void;
	Delete(): void;
	Удалить(): void;
	RecDeleted(): boolean;
	ЗаписьУдалена(): boolean;
	Recall(): void;
	Восстановить(): void;
	Clear(): void;
	Очистить(): void;
	RecCount(): number;
	КоличествоЗаписей(): number;
	CreateIndex(... params): boolean;
	СоздатьИндексныйФайл(... params): boolean;
	ErrorCode(): number;
	КодОшибки(): number;
	GetFieldValue(... params);
	ПолучитьЗначениеПоля(... params);
	SetFieldValue(... params): void;
	УстановитьЗначениеПоля(... params): void;
}
interface HTMLMetaElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Content: string;
	Содержание: string;
	HttpEquiv: string;
	ЭквивалентHTTP: string;
	Name: string;
	Имя: string;
	Scheme: string;
	Схема: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface EnumTransactionsIsolationLevel {
	Auto;
	Авто;
	ReadUncommitted;
	ЧтениеНезафиксированных;
	ReadCommitted;
	ЧтениеЗафиксированных;
	RepeatableRead;
	ПовторяемоеЧтение;
	Serializable;
	Упорядочиваемость;
}
declare type ПеречислениеУровеньИзоляцииТранзакций = EnumTransactionsIsolationLevel;
interface PredictionModelSequentialPatterns {
	DataSource;
	ИсточникДанных;
	Columns: PredictionModelColumns;
	Колонки: PredictionModelColumns;
	InputColumnsSetting: PredictionModelInputColumnsSetting;
	НастройкаВходныхКолонок: PredictionModelInputColumnsSetting;
	ResultColumns;
	КолонкиРезультата;
	SequentialPatterns: FixedArray;
	ШаблоныПоследовательностей: FixedArray;
	Execute(): ValueTable;
	Выполнить(): ValueTable;
}
interface EnumChartPointsConnectionType {
	Auto;
	Авто;
	Connect;
	Соединять;
	DontConnect;
	НеСоединять;
}
declare type ПеречислениеТипСоединенияТочекДиаграммы = EnumChartPointsConnectionType;
interface InformationBaseContext {
}
interface FormDataTree {
	GetItems(): FormDataTreeItemCollection;
	ПолучитьЭлементы(): FormDataTreeItemCollection;
	FindByID(... params): FormDataTreeItem;
	НайтиПоИдентификатору(... params): FormDataTreeItem;
}
interface FoldersAndItems {
}
interface WindowOpenVariant {
}
interface DataCompositionAvailableParameterCollection {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionAvailableParameter;
	Найти(... params): DataCompositionAvailableParameter;
	Get(... params): DataCompositionAvailableParameter;
	Получить(... params): DataCompositionAvailableParameter;
}
interface DataCompositionAvailableParameter {
	Parameter: DataCompositionParameter;
	Параметр: DataCompositionParameter;
	Title: string;
	Заголовок: string;
	AvailableValues: ValueList;
	ДоступныеЗначения: ValueList;
	Visible: boolean;
	Видимость: boolean;
	SubParameters: DataCompositionAvailableParameterCollection;
	ВложенныеПараметры: DataCompositionAvailableParameterCollection;
	Mask: string;
	Маска: string;
	EditFormat: string;
	ФорматРедактирования: string;
	ChoiceForm: string;
	ФормаВыбора: string;
	TypeLink: DataCompositionTypeLink;
	СвязьПоТипу: DataCompositionTypeLink;
	QuickChoice: boolean;
	БыстрыйВыбор: boolean;
	ChoiceFoldersAndItems: FoldersAndItemsUse;
	ВыборГруппИЭлементов: FoldersAndItemsUse;
	ValueListAllowed: boolean;
	ДоступенСписокЗначений: boolean;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	DenyIncompleteValues: boolean;
	ЗапрещатьНезаполненныеЗначения: boolean;
	Use: DataCompositionParameterUse;
	Использование: DataCompositionParameterUse;
	Type: TypeDescription;
	Тип: TypeDescription;
	GetChoiceParameterLinks(): DataCompositionChoiceParameterLinks;
	ПолучитьСвязиПараметровВыбора(): DataCompositionChoiceParameterLinks;
	GetChoiceParameters(): DataCompositionChoiceParameter;
	ПолучитьПараметрыВыбора(): DataCompositionChoiceParameter;
}
interface EnumDataAnalysisColumnTypeSequentialPatterns {
	NotUsed;
	НеИспользуемая;
	Item;
	Элемент;
	Sequence;
	Последовательность;
	Time;
	Время;
}
declare type ПеречислениеТипКолонкиАнализаДанныхПоискПоследовательностей = EnumDataAnalysisColumnTypeSequentialPatterns;
interface DataCompositionResourcesPlacementInChart {
}
interface SMTPAuthenticationMode {
}
interface POP3AuthenticationMode {
}
interface InternetMailProfile {
	SMTPServerAddress: string;
	АдресСервераSMTP: string;
	POP3ServerAddress: string;
	АдресСервераPOP3: string;
	SMTPPort: number;
	ПортSMTP: number;
	POP3Port: number;
	ПортPOP3: number;
	User: string;
	Пользователь: string;
	Password: string;
	Пароль: string;
	SMTPUser: string;
	ПользовательSMTP: string;
	SMTPPassword: string;
	ПарольSMTP: string;
	Timeout: number;
	Таймаут: number;
	SMTPAuthentication: SMTPAuthenticationMode;
	АутентификацияSMTP: SMTPAuthenticationMode;
	POP3Authentication: POP3AuthenticationMode;
	АутентификацияPOP3: POP3AuthenticationMode;
	POP3BeforeSMTP: boolean;
	POP3ПередSMTP: boolean;
	IMAPServerAddress: string;
	АдресСервераIMAP: string;
	IMAPPort: number;
	ПортIMAP: number;
	IMAPUseSSL: boolean;
	ИспользоватьSSLIMAP: boolean;
	IMAPUser: string;
	ПользовательIMAP: string;
	IMAPPassword: string;
	ПарольIMAP: string;
	POP3UseSSL: boolean;
	ИспользоватьSSLPOP3: boolean;
	SMTPUseSSL: boolean;
	ИспользоватьSSLSMTP: boolean;
	IMAPSecureAuthenticationOnly: boolean;
	ТолькоЗащищеннаяАутентификацияIMAP: boolean;
	POP3SecureAuthenticationOnly: boolean;
	ТолькоЗащищеннаяАутентификацияPOP3: boolean;
	SMTPSecureAuthenticationOnly: boolean;
	ТолькоЗащищеннаяАутентификацияSMTP: boolean;
}
declare type ИнтернетПочтовыйПрофиль = InternetMailProfile;
interface ListBox {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	ShowPicture: boolean;
	ОтображатьКартинку: boolean;
	ShowCheckBox: boolean;
	ОтображатьПометку: boolean;
	CurrentRow;
	ТекущаяСтрока;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
}
declare type ПолеСписка = ListBox;
interface DataCompositionAppearanceTemplateLibItem {
	Name: string;
	Имя: string;
	Presentation: string;
	Представление: string;
	GetTemplate();
	ПолучитьМакет();
}
interface EnumGeographicalSchemaProjection {
	CylindricalMillerProjection;
	ЦилиндрическаяПроекцияМиллера;
	CylindricalLambertEqualAreaProjection;
	ЦилиндрическаяПроекцияРавныхОбластейЛамберта;
	CylindricalGallStereographicProjection;
	ЦилиндрическаяСтереографическаяПроекцияГалла;
	CylindricalEquidistantProjection;
	ЦилиндрическаяРавноудаленнаяПроекция;
	PseudoCylindricalSinusoidalProjection;
	ПсевдоцилиндрическаяСинусоидальнаяПроекция;
	PseudoCylindricalMollweideProjection;
	ПсевдоцилиндрическаяПроекцияМолвейда;
	PseudoCylindricalRobinsonProjection;
	ПсевдоцилиндрическаяПроекцияРобинсона;
	PseudoCylindricalEckert1Projection;
	ПсевдоцилиндрическаяПроекцияЭкерта1;
	PseudoCylindricalEckert2Projection;
	ПсевдоцилиндрическаяПроекцияЭкерта2;
	PseudoCylindricalEckert3Projection;
	ПсевдоцилиндрическаяПроекцияЭкерта3;
	PseudoCylindricalEckert4Projection;
	ПсевдоцилиндрическаяПроекцияЭкерта4;
	PseudoCylindricalEckert5Projection;
	ПсевдоцилиндрическаяПроекцияЭкерта5;
	PseudoCylindricalEckert6Projection;
	ПсевдоцилиндрическаяПроекцияЭкерта6;
	PseudoCylindricalHatanoAsymetricalEqualAreaProjection;
	ПсевдоцилиндрическаяПроекцияНесимметричныхРавныхОбластейХатано;
	PseudoCylindricalLoximutalProjection;
	ПсевдоцилиндрическаяПроекцияЛоксимутала;
	PseudoCylindricalMcBrydeThomasFlatPolarParabolicProjection;
	ПсевдоцилиндрическаяПлоскоПолярнаяПараболическаяПроекцияМакБрайдаТомаса;
	PseudoCylindricalMcBrydeThomasFlatPolarQuarticProjection;
	ПсевдоцилиндрическаяПлоскоПолярнаяПроекцияЧетвертогоПорядкаМакБрайдаТомаса;
	PseudoCylindricalMcBrydeThomasFlatPolarSinusoidalProjection;
	ПсевдоцилиндрическаяПлоскоПолярнаяСинусоидальнаяПроекцияМакБрайдаТомаса;
	PseudoCylindricalPutninP2Projection;
	ПсевдоцилиндрическаяПроекцияПутнинаP2;
	PseudoCylindricalPutninP5Projection;
	ПсевдоцилиндрическаяПроекцияПутнинаP5;
	PseudoCylindricalWinkel1Projection;
	ПсевдоцилиндрическаяПроекцияВинкеля1;
	PseudoCylindricalBoggsEumorphicProjection;
	ПсевдоцилиндрическаяНормальнаяПроекцияБоггса;
	AzimuthalHammerProjection;
	АзимутальнаяПроекцияХамера;
	AzimuthalWagner7Projection;
	АзимутальнаяПроекцияВагнера7;
	AzimuthalAitoffProjection;
	АзимутальнаяПроекцияАитофа;
	AzimuthalWinkelTripelProjection;
	АзимутальнаяПроекцияВинкеляТрипеля;
	AzimuthalEquidistantProjection;
	АзимутальнаяРавноудаленнаяПроекция;
	AzimuthalLambertEqualAreaProjection;
	АзимутальнаяПроекцияРавныхПлощадейЛамберта;
	MiscellaneousAugustEpicycloidalProjection;
	ПрочаяЭпициклоидальнаяПроекцияАвгуста;
	MiscellaneousBaconGlobularProjection;
	ПрочаяШароваяПроекцияБекона;
	MiscellaneousNicolosiGlobularProjection;
	ПрочаяШароваяПроекцияНиколоси;
	MiscellaneousApianGlobular1Projection;
	ПрочаяСотоваяШаровая1Проекция;
	MiscellaneousOrteliusOvalProjection;
	ПрочаяОвальнаяПроекцияОртелиуса;
	MiscellaneousVanDerGrinten1Projection;
	ПрочаяПроекцияВанДерГринтена1;
	MiscellaneousVanDerGrinten2Projection;
	ПрочаяПроекцияВанДерГринтена2;
	MiscellaneousVanDerGrinten3Projection;
	ПрочаяПроекцияВанДерГринтена3;
	ConicLambertEqualAreaProjection;
	КоническаяПроекцияРавныхПлощадейЛамберта;
}
declare type ПеречислениеТипПроекцииГеографическойСхемы = EnumGeographicalSchemaProjection;
interface FunctionalOptionsUse {
	Count();
	Количество();
	IndexOf(... params);
	Индекс(... params);
	Find(... params);
	Найти(... params);
	Get(... params);
	Получить(... params);
	Contains(... params);
	Содержит(... params);
}
interface InternetMailTextType {
}
interface InternetMailText {
	TextType: InternetMailTextType;
	ТипТекста: InternetMailTextType;
	Text: string;
	Текст: string;
	Encoding: string;
	Кодировка: string;
	Data: BinaryData;
	Данные: BinaryData;
}
interface InternetMailTexts {
	Count(): number;
	Количество(): number;
	Add(... params): InternetMailText;
	Добавить(... params): InternetMailText;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Get(... params): InternetMailText;
	Получить(... params): InternetMailText;
}
interface DataAnalysisTimeIntervalUnitType {
}
interface EnumJSONDateFormat {
	Microsoft;
	ISO;
	JavaScript;
}
declare type ПеречислениеФорматДатыJSON = EnumJSONDateFormat;
interface DataCompositionAreaTemplateChartResourceAppearance {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
}
interface DataCompositionAreaTemplateChartResourceTemplate {
	ResourceValue;
	ЗначениеРесурса;
	Appearance: DataCompositionAreaTemplateChartResourceAppearance;
	Оформление: DataCompositionAreaTemplateChartResourceAppearance;
}
interface XSProhibitedSubstitutions {
}
interface SpreadsheetDocumentFileType {
}
interface UserWorkFavoritesItem {
	URL: string;
	НавигационнаяСсылка: string;
	Presentation;
	Представление;
	Important;
	Важное;
}
declare type ЭлементИзбранногоРаботыПользователя = UserWorkFavoritesItem;
interface UserWorkFavorites {
	Count(): number;
	Количество(): number;
	Add(... params): UserWorkFavoritesItem;
	Добавить(... params): UserWorkFavoritesItem;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): UserWorkFavoritesItem;
	Получить(... params): UserWorkFavoritesItem;
	Insert(... params): UserWorkFavoritesItem;
	Вставить(... params): UserWorkFavoritesItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
}
declare type ИзбранноеРаботыПользователя = UserWorkFavorites;
interface EnumInternetConnectionType {
	NoConnection;
	НетСоединения;
	CellularData;
	СотовыеДанные;
	WiFi;
	LAN;
	ЛокальнаяСеть;
}
declare type ПеречислениеТипИнтернетСоединения = EnumInternetConnectionType;
interface GeographicCoordinates {
	Latitude: number;
	Широта: number;
	Longitude: number;
	Долгота: number;
	Altitude: number;
	Высота: number;
}
declare type ГеографическиеКоординаты = GeographicCoordinates;
interface EnumPositionInStream {
	Begin;
	Начало;
	Current;
	Текущая;
	End;
	Конец;
}
declare type ПеречислениеПозицияВПотоке = EnumPositionInStream;
interface DataAnalysisNumericValueUseType {
}
interface AutoCorrectionOnTextInput {
}
interface InternetMailMessageNonASCIISymbolsEncodingMode {
}
interface HTMLCollection {
	Count(): number;
	Количество(): number;
	Item(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Элемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	NamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
interface HTMLFormElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Elements: HTMLCollection;
	Элементы: HTMLCollection;
	Length: number;
	Длина: number;
	Name: string;
	Имя: string;
	AcceptCharset: string;
	ПоддерживаемыеНаборыЗнаков: string;
	Action: string;
	Действие: string;
	Enctype: string;
	ТипСодержимого: string;
	Method: string;
	Метод: string;
	Target: string;
	Цель: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface HTMLButtonElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Form: HTMLFormElement;
	Форма: HTMLFormElement;
	AccessKey: string;
	КлавишаДоступа: string;
	Disabled: boolean;
	Недоступен: boolean;
	Name: string;
	Имя: string;
	TabIndex: number;
	ПорядокОбхода: number;
	Type: string;
	Тип: string;
	Value: string;
	Значение: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface OnUnavailabilityDataCompositionSettingsAction {
}
interface DataCompositionAppearanceTemplateWizard {
	GetTemplate();
	ПолучитьМакет();
	Edit(... params): boolean;
	Редактировать(... params): boolean;
	SetTemplate(... params): void;
	УстановитьМакет(... params): void;
}
declare type КонструкторМакетаОформленияКомпоновкиДанных = DataCompositionAppearanceTemplateWizard;
interface EnumAdBannerRepresentation {
	None;
	Нет;
	Top;
	Верх;
	Bottom;
	Низ;
}
declare type ПеречислениеОтображениеРекламногоБаннера = EnumAdBannerRepresentation;
interface XDTOVariety {
}
interface PlannerRepresentationPeriod {
	Begin: Date;
	Начало: Date;
	End: Date;
	Конец: Date;
}
declare type ПериодОтображенияПланировщика = PlannerRepresentationPeriod;
interface PlannerCurrentRepresentationPeriodCollection {
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): PlannerRepresentationPeriod;
	Получить(... params): PlannerRepresentationPeriod;
	Add(... params): PlannerRepresentationPeriod;
	Добавить(... params): PlannerRepresentationPeriod;
	Insert(... params): PlannerRepresentationPeriod;
	Вставить(... params): PlannerRepresentationPeriod;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): PlannerRepresentationPeriod;
	Найти(... params): PlannerRepresentationPeriod;
}
declare type КоллекцияТекущихПериодовОтображенияПланировщика = PlannerCurrentRepresentationPeriodCollection;
interface StandardAppearance {
}
interface GeographicalSchemaShowedArea {
	WestBorderLongitude: number;
	ДолготаЗападнойГраницы: number;
	EastBorderLongitude: number;
	ДолготаВосточнойГраницы: number;
	SouthBorderLatitude: number;
	ШиротаЮжнойГраницы: number;
	NorthBorderLatitude: number;
	ШиротаСевернойГраницы: number;
}
interface HTMLIFrameElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Align: string;
	Положение: string;
	FrameBorder: string;
	РамкаФрейма: string;
	Height: string;
	Высота: string;
	LongDesc: string;
	Описание: string;
	MarginHeight: string;
	ВысотаПоля: string;
	MarginWidth: string;
	ШиринаПоля: string;
	Name: string;
	Имя: string;
	Scrolling: string;
	Прокрутка: string;
	Src: string;
	Источник: string;
	Width: string;
	Ширина: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface XSWhitespaceHandling {
}
interface XSWhitespaceFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Value: XSWhitespaceHandling;
	Значение: XSWhitespaceHandling;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетПробельныхСимволовXS = XSWhitespaceFacet;
interface ContactAccount {
	AccountSource: string;
	ИсточникУчетнойЗаписи: string;
	ID: string;
	Идентификатор: string;
}
interface MemoryStream {
	CanRead: boolean;
	ДоступноЧтение: boolean;
	CanWrite: boolean;
	ДоступнаЗапись: boolean;
	CanSeek: boolean;
	ДоступноИзменениеПозиции: boolean;
	Close(): void;
	Закрыть(): void;
	Size(): number;
	Размер(): number;
	GetReadOnlyStream(): Stream;
	ПолучитьПотокТолькоДляЧтения(): Stream;
	CurrentPosition(): number;
	ТекущаяПозиция(): number;
	CopyTo(... params): void;
	КопироватьВ(... params): void;
	Flush(): void;
	СброситьБуферы(): void;
	Seek(... params): number;
	Перейти(... params): number;
	SetSize(... params): void;
	УстановитьРазмер(... params): void;
	Read(... params): number;
	Прочитать(... params): number;
	Write(... params): void;
	Записать(... params): void;
	BeginGetSize(... params): void;
	НачатьПолучениеРазмера(... params): void;
	BeginCopyTo(... params): void;
	НачатьКопированиеВ(... params): void;
	BeginSeek(... params): void;
	НачатьПереход(... params): void;
	BeginSetSize(... params): void;
	НачатьУстановкуРазмера(... params): void;
	BeginRead(... params): void;
	НачатьЧтение(... params): void;
	BeginWrite(... params): void;
	НачатьЗапись(... params): void;
	BeginFlush(... params): void;
	НачатьСбросБуферов(... params): void;
	BeginClose(... params): void;
	НачатьЗакрытие(... params): void;
	CloseAndGetBinaryData(): BinaryData;
	ЗакрытьИПолучитьДвоичныеДанные(): BinaryData;
}
declare type ПотокВПамяти = MemoryStream;
declare function Add();
declare function Добавить();
declare function Delete(... params): void;
declare function Удалить(... params): void;
declare function Clear(): void;
declare function Очистить(): void;
declare function Count(): number;
declare function Количество(): number;
declare function IndexOf(... params): number;
declare function Индекс(... params): number;
declare function Find(... params);
declare function Найти(... params);
declare function Move(... params): void;
declare function Сдвинуть(... params): void;
declare function Insert(... params);
declare function Вставить(... params);
declare function Get(... params);
declare function Получить(... params);
interface DataLockControlMode {
}
interface GanttChartValueTextRepresentation {
}
interface CommonAttributeContentItem {
	Metadata;
	Метаданные;
	Use;
	Использование;
	ConditionalSeparation;
	УсловноеРазделение;
}
interface HTMLAttribute {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	Name: string;
	Имя: string;
	Specified: boolean;
	Указан: boolean;
	Value: string;
	Значение: string;
	OwnerElement: DOMElement;
	ЭлементВладелец: DOMElement;
	IsId: boolean;
	ЯвляетсяИдентификатором: boolean;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
}
interface EnumShowInChartLegend {
	Auto;
	Авто;
	Show;
	Отображать;
	DontShow;
	НеОтображать;
}
declare type ПеречислениеОтображениеВЛегендеДиаграммы = EnumShowInChartLegend;
interface AccountingRecordType {
}
interface FormDataCollection {
	Count(): number;
	Количество(): number;
	Add(): FormDataCollectionItem;
	Добавить(): FormDataCollectionItem;
	Insert(... params): FormDataCollectionItem;
	Вставить(... params): FormDataCollectionItem;
	Delete(... params): void;
	Удалить(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Get(... params): FormDataCollectionItem;
	Получить(... params): FormDataCollectionItem;
	FindByID(... params): FormDataCollectionItem;
	НайтиПоИдентификатору(... params): FormDataCollectionItem;
	Total(... params): number;
	Итог(... params): number;
	Sort(... params): void;
	Сортировать(... params): void;
	FindRows(... params);
	НайтиСтроки(... params);
	Load(... params): void;
	Загрузить(... params): void;
	Unload(... params): ValueTable;
	Выгрузить(... params): ValueTable;
}
interface OrderingItemControl {
	Name: string;
	Имя: string;
	Enabled: boolean;
	Доступность: boolean;
}
interface OrderSetting {
	Add(... params): OrderingItemControl;
	Добавить(... params): OrderingItemControl;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): OrderingItemControl;
	Найти(... params): OrderingItemControl;
	Get(... params);
	Получить(... params);
}
declare type НастройкаПорядка = OrderSetting;
interface XSAttributeUseCategory {
}
interface ChartSemitransparencyMode {
}
interface ResultCompositionMode {
}
interface ChartType {
}
interface MailAddress {
	User: string;
	Пользователь: string;
	Server: string;
	Сервер: string;
	Address: string;
	Адрес: string;
}
declare type ПочтовыйАдрес = MailAddress;
interface MailAddresses {
	Count(): number;
	Количество(): number;
	Add(... params): MailAddress;
	Добавить(... params): MailAddress;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Get(... params): MailAddress;
	Получить(... params): MailAddress;
}
declare type ПочтовыеАдреса = MailAddresses;
interface ShowTabs {
}
interface LabelPictureLocation {
}
interface Panel {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	Picture: Picture;
	Картинка: Picture;
	PictureSize: PictureSize;
	РазмерКартинки: PictureSize;
	ShowTabs: ShowTabs;
	ОтображениеЗакладок: ShowTabs;
	SeparateByPage: boolean;
	РаспределятьПоСтраницам: boolean;
	AutoTabOrder: boolean;
	АвтоПорядокОбхода: boolean;
	CurrentPage;
	ТекущаяСтраница;
	Pages;
	Страницы;
	ScrollPageMode: boolean;
	РежимПрокручиваемыхСтраниц: boolean;
	PanelPictureLocation: LabelPictureLocation;
	ПоложениеКартинкиПанели: LabelPictureLocation;
}
declare type Панель = Panel;
interface AutoChangeRecord {
}
interface ExchangePlanContentItem {
	Metadata: MetadataObject;
	Метаданные: MetadataObject;
	AutoRecord: AutoChangeRecord;
	АвтоРегистрация: AutoChangeRecord;
}
interface EnumContactDataRelationshipType {
	Mother;
	Мать;
	Father;
	Отец;
	Parent;
	Родитель;
	Sister;
	Сестра;
	Brother;
	Брат;
	Child;
	Ребенок;
	Friend;
	Друг;
	Spouse;
	Супруг;
	Partner;
	Партнер;
	Manager;
	Руководитель;
	Assistant;
	Помощник;
	DomesticPartner;
	ГражданскийСупруг;
	Relative;
	Родственник;
	Other;
	Другой;
}
declare type ПеречислениеТипОтношенийДанныхКонтакта = EnumContactDataRelationshipType;
interface DataAnalysisColumnTypeDecisionTree {
}
interface ConnectorTextLocation {
}
interface EnumConnectorTextLocation {
	FirstSegment;
	ПервыйСегмент;
	Middle;
	СерединаЛинии;
}
declare type ПеречислениеПоложениеТекстаСоединительнойЛинии = EnumConnectorTextLocation;
interface FixedCollection {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params);
	Найти(... params);
	Get(... params);
	Получить(... params);
}
interface PivotChartField {
	Dimension: boolean;
	Измерение: boolean;
	Name: string;
	Имя: string;
	OpenLevelCount: number;
	КоличествоОткрытыхУровней: number;
	Attribute: boolean;
	Реквизит: boolean;
	Attributes: FixedCollection;
	Реквизиты: FixedCollection;
	Resource: boolean;
	Ресурс: boolean;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	LevelCount(): number;
	КоличествоУровней(): number;
}
interface EventLogEntryTransactionStatus {
}
interface PanelPage {
	Name: string;
	Имя: string;
	Caption: string;
	Заголовок: string;
	TitlePicture: Picture;
	КартинкаЗаголовка: Picture;
	Visible: boolean;
	Видимость: boolean;
	Enabled: boolean;
	Доступность: boolean;
	Value;
	Значение;
	IsOpen: boolean;
	Раскрыта: boolean;
}
interface PanelPages {
	Count(): number;
	Количество(): number;
	Add(... params): PanelPage;
	Добавить(... params): PanelPage;
	Insert(... params): PanelPage;
	Вставить(... params): PanelPage;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): PanelPage;
	Найти(... params): PanelPage;
	Get(... params): PanelPage;
	Получить(... params): PanelPage;
}
interface DataAnalysisSequentialPattern {
	Items: FixedArray;
	Элементы: FixedArray;
	AvgIntervals: FixedArray;
	СредниеИнтервалы: FixedArray;
	MinIntervals: FixedArray;
	МинимальныеИнтервалы: FixedArray;
	MaxIntervals: FixedArray;
	МаксимальныеИнтервалы: FixedArray;
	CaseCount: number;
	КоличествоСлучаев: number;
	Support: number;
	ПроцентСлучаев: number;
}
interface PictureBox {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	Picture: Picture;
	Картинка: Picture;
	PictureSize: PictureSize;
	РазмерКартинки: PictureSize;
	Hyperlink: boolean;
	Гиперссылка: boolean;
	Zoomable: boolean;
	Масштабировать: boolean;
	UseContextMenu: boolean;
	ИспользоватьКонтекстноеМеню: boolean;
	EnableStartDrag;
	РазрешитьНачалоПеретаскивания;
	EnableDrag;
	РазрешитьПеретаскивание;
	NonselectedPictureText: string;
	ТекстНевыбраннойКартинки: string;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
}
declare type ПолеКартинки = PictureBox;
interface DataCompositionAreaTemplateFieldAppearance {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
}
interface DataCompositionAreaTemplateField {
	Value;
	Значение;
	Appearance: DataCompositionAreaTemplateFieldAppearance;
	Оформление: DataCompositionAreaTemplateFieldAppearance;
}
interface ObjectVersion {
}
interface EnumJSONValueType {
	ObjectStart;
	НачалоОбъекта;
	ОbjectEnd;
	КонецОбъекта;
	ArrayStart;
	НачалоМассива;
	ArrayEnd;
	КонецМассива;
	PropertyName;
	ИмяСвойства;
	Number;
	Число;
	String;
	Строка;
	Boolean;
	Булево;
	Null;
	Comment;
	Комментарий;
	None;
	Ничего;
}
declare type ПеречислениеТипЗначенияJSON = EnumJSONValueType;
interface FileCompareMethod {
}
interface DataAnalysisClusterizationColumnParameters {
	Weight: number;
	Вес: number;
	NormalizationValues: Map;
	ЗначенияНормализации: Map;
}
interface CommandBarButtonRepresentation {
}
interface ZipFileEntry {
	Name: string;
	Имя: string;
	BaseName: string;
	ИмяБезРасширения: string;
	FullName: string;
	ПолноеИмя: string;
	Path: string;
	Путь: string;
	Extension: string;
	Расширение: string;
	Modified: Date;
	ВремяИзменения: Date;
	Hidden: boolean;
	Невидимый: boolean;
	ReadOnly: boolean;
	ТолькоЧтение: boolean;
	CompressedSize: number;
	РазмерСжатого: number;
	UncompressedSize: number;
	РазмерНесжатого: number;
	Encrypted: boolean;
	Зашифрован: boolean;
}
interface NotifyDescription {
	ProcedureName;
	ИмяПроцедуры;
	Module;
	Модуль;
	AdditionalParameters;
	ДополнительныеПараметры;
	ErrorHandlerProcedureName;
	ИмяПроцедурыОбработкиОшибки;
	ErrorHandlerModule;
	МодульОбработкиОшибки;
}
declare type ОписаниеОповещения = NotifyDescription;
interface GraphicalSchemaItems {
	Count(): number;
	Количество(): number;
	Get(... params);
	Получить(... params);
	Find(... params);
	Найти(... params);
}
interface GraphicalSchemaGridDrawMode {
}
interface FitPageMode {
}
interface GraphicalSchema {
	GraphicalSchemaItems: GraphicalSchemaItems;
	ЭлементыГрафическойСхемы: GraphicalSchemaItems;
	BackColor: Color;
	ЦветФона: Color;
	GridEnabled: boolean;
	ИспользоватьСетку: boolean;
	GridHorizontalStep: number;
	ГоризонтальныйШагСетки: number;
	GridVerticalStep: number;
	ВертикальныйШагСетки: number;
	DrawGridMode: GraphicalSchemaGridDrawMode;
	РежимОтрисовкиСетки: GraphicalSchemaGridDrawMode;
	FitPageMode: FitPageMode;
	РежимРазмещенияНаСтранице: FitPageMode;
	BlackAndWhite: boolean;
	ЧерноБелаяПечать: boolean;
	PageOrientation: PageOrientation;
	ОриентацияСтраницы: PageOrientation;
	LeftMargin: number;
	ПолеСлева: number;
	TopMargin: number;
	ПолеСверху: number;
	RightMargin: number;
	ПолеСправа: number;
	BottomMargin: number;
	ПолеСнизу: number;
	Output: boolean;
	Вывод: boolean;
	UsedFileName: string;
	ИспользуемоеИмяФайла: string;
	DuplexPrinting: DuplexPrintingType;
	ДвусторонняяПечать: DuplexPrintingType;
	PagePlacementAlternation: PagePlacementAlternation;
	ЧередованиеРасположенияСтраниц: PagePlacementAlternation;
	Write(... params): void;
	Записать(... params): void;
	Read(... params);
	Прочитать(... params);
	GetPicture(... params);
	ПолучитьКартинку(... params);
	Show(... params): void;
	Показать(... params): void;
	Print(... params): void;
	Напечатать(... params): void;
	BeginWriting(... params): void;
	НачатьЗапись(... params): void;
	BeginReading(... params): void;
	НачатьЧтение(... params): void;
}
declare type ГрафическаяСхема = GraphicalSchema;
interface DataAnalysisColumnTypeClusterization {
}
interface FullTextSearchRepresentationType {
}
interface PivotChartFieldCollection {
	Insert(... params): PivotChartField | PivotChartFieldCollection;
	Вставить(... params): PivotChartField | PivotChartFieldCollection;
	Add(... params): PivotChartField | PivotChartFieldCollection;
	Добавить(... params): PivotChartField | PivotChartFieldCollection;
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Find(... params): PivotChartField | PivotChartFieldCollection;
	Найти(... params): PivotChartField | PivotChartFieldCollection;
	Clear(): void;
	Очистить(): void;
	Get(... params): PivotChartField | PivotChartFieldCollection;
	Получить(... params): PivotChartField | PivotChartFieldCollection;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface XMLWriterSettings {
	Encoding: string;
	Кодировка: string;
	Version: string;
	Версия: string;
	Indent: boolean;
	Отступ: boolean;
	IndentAttributes: boolean;
	ОтступАтрибутов: boolean;
	IndentChars: string;
	СимволыОтступа: string;
}
declare type ПараметрыЗаписиXML = XMLWriterSettings;
interface EnumChartTrendlineFactor {
	PointNumber;
	НомерТочки;
	PointValue;
	ЗначениеТочки;
	Auto;
	Авто;
}
declare type ПеречислениеФакторЛинииТрендаДиаграммы = EnumChartTrendlineFactor;
interface MessageStatus {
}
interface EnumVideoQuality  {
	High;
	Высокое;
	Low;
	Низкое;
	Auto;
	Авто;
}
declare type ПеречислениеКачествоВидеозаписи = EnumVideoQuality ;
interface TimeScaleUnitType {
}
interface TimeScaleDayFormat {
}
interface TimeScaleItemLabel {
	Date: Date;
	Дата: Date;
	Text: string;
	Текст: string;
	Details;
	Расшифровка;
	LineColor: Color;
	ЦветЛинии: Color;
	TextColor: Color;
	ЦветТекста: Color;
}
interface TimeScaleItemLabels {
	Add(... params): TimeScaleItemLabel;
	Добавить(... params): TimeScaleItemLabel;
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface TimeScaleItem {
	Unit: TimeScaleUnitType;
	Единица: TimeScaleUnitType;
	Repetition: number;
	Кратность: number;
	Visible: boolean;
	Видимость: boolean;
	PointLines: Line;
	ЛинииДелений: Line;
	LineColor: Color;
	ЦветЛиний: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	DayFormat: TimeScaleDayFormat;
	ФорматДня: TimeScaleDayFormat;
	Format: string;
	Формат: string;
	Labels: TimeScaleItemLabels;
	Метки: TimeScaleItemLabels;
	ShowPeriodicalLabels: boolean;
	ОтображатьПериодическиеМетки: boolean;
}
interface TimeScaleItems {
	Insert(... params): TimeScaleItem;
	Вставить(... params): TimeScaleItem;
	Add(): TimeScaleItem;
	Добавить(): TimeScaleItem;
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): TimeScaleItem;
	Получить(... params): TimeScaleItem;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): boolean;
	Удалить(... params): boolean;
}
interface EnumGeographicalSchemaShowMode {
	ScaleDefined;
	ЗадаетсяМасштабом;
	AllData;
	ВсеДанные;
	SpecifiedArea;
	ЗаданнаяОбласть;
}
declare type ПеречислениеРежимОтображенияГеографическойСхемы = EnumGeographicalSchemaShowMode;
interface XSRedefine {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	SchemaLocation: string;
	РасположениеСхемы: string;
	ResolvedSchema: XMLSchema;
	РазрешеннаяСхема: XMLSchema;
	IncorporatedSchema: XMLSchema;
	ОбъединеннаяСхема: XMLSchema;
	Content: XSComponentList;
	Содержимое: XSComponentList;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ПереопределениеXS = XSRedefine;
interface ShowChartScaleTitle {
}
interface ScrollingTextMode {
}
interface EnumRadarChartScaleType {
	Circle;
	Окружность;
	Polygon;
	Полигон;
}
declare type ПеречислениеТипШкалыРадарнойДиаграммы = EnumRadarChartScaleType;
interface CalendarData {
	Name: string;
	Имя: string;
	Color: Color;
	Цвет: Color;
	RawData: Map;
	ИсходныеДанные: Map;
}
declare type ДанныеКалендаря = CalendarData;
interface RoamingUsage {
}
interface EnumFormattedDocumentFileType {
	TXT;
	ANSITXT;
	HTML;
	PDF;
}
declare type ПеречислениеТипФайлаФорматированногоДокумента = EnumFormattedDocumentFileType;
interface ListColumn {
	Name: string;
	Имя: string;
	AutoDelete: boolean;
	АвтоУдаление: boolean;
}
interface ListColumns {
	Add(... params): ListColumn;
	Добавить(... params): ListColumn;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Get(... params): ListColumn;
	Получить(... params): ListColumn;
	Set(... params): void;
	Установить(... params): void;
	Count(): number;
	Количество(): number;
	Find(... params): ListColumn;
	Найти(... params): ListColumn;
}
interface FormConversationsRepresentation {
}
interface StandardPeriodVariant {
}
interface StandardPeriod {
	Variant: StandardPeriodVariant;
	Вариант: StandardPeriodVariant;
	StartDate: Date;
	ДатаНачала: Date;
	EndDate: Date;
	ДатаОкончания: Date;
}
declare type СтандартныйПериод = StandardPeriod;
interface DOMNodeReader {
	NodeType: XMLNodeType;
	ТипУзла: XMLNodeType;
	Name: string;
	Имя: string;
	LocalName: string;
	ЛокальноеИмя: string;
	Prefix: string;
	Префикс: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Value: string;
	Значение: string;
	XMLEncoding: string;
	КодировкаXML: string;
	InputEncoding: string;
	КодировкаИсточника: string;
	XMLVersion: string;
	ВерсияXML: string;
	Standalone: boolean;
	Автономный: boolean;
	BaseURI: string;
	БазовыйURI: string;
	HasName: boolean;
	ИмеетИмя: boolean;
	SystemId: string;
	СистемныйИдентификатор: string;
	PublicId: string;
	ПубличныйИдентификатор: string;
	NotationName: string;
	ИмяНотации: string;
	HasValue: boolean;
	ИмеетЗначение: boolean;
	IsWhitespace: boolean;
	ЭтоПробельныеСимволы: boolean;
	IsCharacters: boolean;
	ЭтоСимвольныеДанные: boolean;
	Space: XMLSpace;
	ПробельныеСимволы: XMLSpace;
	Lang: string;
	Язык: string;
	NamespaceContext: XMLNamespaceContext;
	КонтекстПространствИмен: XMLNamespaceContext;
	IsDefaultAttribute: boolean;
	ЭтоАтрибутПоУмолчанию: boolean;
	Read(): boolean;
	Прочитать(): boolean;
	ReadAttribute(): boolean;
	ПрочитатьАтрибут(): boolean;
	AttributeCount(): number;
	КоличествоАтрибутов(): number;
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	LookupNamespaceURI(... params);
	НайтиURIПространстваИмен(... params);
	AttributeName(... params): string;
	ИмяАтрибута(... params): string;
	AttributePrefix(... params): string;
	ПрефиксАтрибута(... params): string;
	AttributeLocalName(... params): string;
	ЛокальноеИмяАтрибута(... params): string;
	AttributeNamespaceURI(... params): string;
	URIПространстваИменАтрибута(... params): string;
	AttributeValue(... params): string;
	ЗначениеАтрибута(... params): string;
	AttributeType(... params): XMLAttributeType;
	ТипАтрибута(... params): XMLAttributeType;
	FirstAttribute(): boolean;
	ПервыйАтрибут(): boolean;
	NextAttribute(): boolean;
	СледующийАтрибут(): boolean;
	Skip(): void;
	Пропустить(): void;
	MoveToContent(... params): XMLNodeType;
	ПерейтиКСодержимому(... params): XMLNodeType;
	FirstDeclaration(): boolean;
	ПервоеОбъявление(): boolean;
	NextDeclaration(): boolean;
	СледующееОбъявление(): boolean;
	Open(... params): void;
	Открыть(... params): void;
	Close(): void;
	Закрыть(): void;
}
declare type ЧтениеУзловDOM = DOMNodeReader;
interface DataCompositionChoiceParameters {
	Add(): DataCompositionChoiceParameter;
	Добавить(): DataCompositionChoiceParameter;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionChoiceParameter;
	Найти(... params): DataCompositionChoiceParameter;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionChoiceParameter;
	Вставить(... params): DataCompositionChoiceParameter;
	Get(... params): DataCompositionChoiceParameter;
	Получить(... params): DataCompositionChoiceParameter;
}
interface InternetMailProtocol {
}
interface GaugeChartQualityBand {
	Begin: number;
	Начало: number;
	End: number;
	Конец: number;
	BackColor: Color;
	ЦветФона: Color;
	Text: string;
	Текст: string;
	ToolTip: string;
	Подсказка: string;
}
interface GaugeChartQualityBands {
	Insert(... params): GaugeChartQualityBand;
	Вставить(... params): GaugeChartQualityBand;
	Add(): GaugeChartQualityBand;
	Добавить(): GaugeChartQualityBand;
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): GaugeChartQualityBand;
	Получить(... params): GaugeChartQualityBand;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): boolean;
	Удалить(... params): boolean;
}
interface AutonumerationInForm {
}
interface DeviceCameraResolution {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
}
declare type РазрешениеКамерыУстройства = DeviceCameraResolution;
interface EnumJSONCharactersEscapeMode {
	None;
	Нет;
	SymbolsNotInBMP;
	СимволыВнеBMP;
	NotASCIISymbols;
	СимволыВнеASCII;
}
declare type ПеречислениеЭкранированиеСимволовJSON = EnumJSONCharactersEscapeMode;
interface QueryDataSourceColumn {
	Name: string;
	Имя: string;
	DataPath: string;
	ПутьКДанным: string;
}
interface EnumChartBubbleSizeValueSource {
	None;
	Нет;
	CommonSeries;
	ОбщаяСерия;
	NextSeries;
	СледующаяСерия;
}
declare type ПеречислениеИсточникЗначенияРазмераПузырькаДиаграммы = EnumChartBubbleSizeValueSource;
interface WSEndpoint {
	Name;
	Имя;
	Location;
	Местоположение;
	Interface;
	Интерфейс;
	Documentation;
	Документация;
}
interface WSEndpointCollection {
	Count(): number;
	Количество(): number;
	Get(... params): WSEndpoint;
	Получить(... params): WSEndpoint;
}
interface EnumSpreadsheetDocumentFileType {
	MXL;
	XLS;
	HTML;
	TXT;
	MXL7;
	HTML3;
	HTML4;
	XLS95;
	XLS97;
	XLSX;
	DOCX;
	ANSITXT;
	ODS;
	PDF;
	HTML5;
}
declare type ПеречислениеТипФайлаТабличногоДокумента = EnumSpreadsheetDocumentFileType;
interface ExternalDataSourceConnectionParameters {
	UserName;
	ИмяПользователя;
	Password;
	Пароль;
	ConnectionString;
	СтрокаСоединения;
	PasswordIsSet;
	ПарольУстановлен;
	StandardAuthentication;
	АутентификацияСтандартная;
	OSAuthentication;
	АутентификацияОС;
	DBMS;
	СУБД;
}
declare type ПараметрыСоединенияВнешнегоИсточникаДанных = ExternalDataSourceConnectionParameters;
interface DataCompositionAreaTemplateItems {
	Add(... params): DataCompositionAreaTemplateField;
	Добавить(... params): DataCompositionAreaTemplateField;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAreaTemplateField;
	Вставить(... params): DataCompositionAreaTemplateField;
	Get(... params): DataCompositionAreaTemplateField;
	Получить(... params): DataCompositionAreaTemplateField;
}
interface DataCompositionAreaTemplateTableCellAppearance {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
}
interface DataCompositionAreaTemplateTableCell {
	Items: DataCompositionAreaTemplateItems;
	Элементы: DataCompositionAreaTemplateItems;
	Appearance: DataCompositionAreaTemplateTableCellAppearance;
	Оформление: DataCompositionAreaTemplateTableCellAppearance;
}
interface DataCompositionAreaTemplateTableCells {
	Add(): DataCompositionAreaTemplateTableCell;
	Добавить(): DataCompositionAreaTemplateTableCell;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAreaTemplateTableCell;
	Вставить(... params): DataCompositionAreaTemplateTableCell;
	Get(... params): DataCompositionAreaTemplateTableCell;
	Получить(... params): DataCompositionAreaTemplateTableCell;
}
interface DataCompositionAreaTemplateTableRow {
	Cells: DataCompositionAreaTemplateTableCells;
	Ячейки: DataCompositionAreaTemplateTableCells;
	TableID: string;
	ИдентификаторТаблицы: string;
}
interface BarcodeType {
}
interface EnumAccountType {
	Active;
	Активный;
	Passive;
	Пассивный;
	ActivePassive;
	АктивноПассивный;
}
declare type ПеречислениеВидСчета = EnumAccountType;
interface EnumJSONLineBreak {
	Windows;
	Unix;
	None;
	Нет;
	Auto;
	Авто;
}
declare type ПеречислениеПереносСтрокJSON = EnumJSONLineBreak;
interface FunctionalOptionsUseItem {
	Value: MetadataObject;
	Значение: MetadataObject;
}
interface EnumMobileDeviceLibraryDirType {
	Audio;
	Аудио;
	Video;
	Видео;
	Pictures;
	Картинки;
}
declare type ПеречислениеТипКаталогаБиблиотекиМобильногоУстройства = EnumMobileDeviceLibraryDirType;
interface EnumPrintAccuracy {
	Auto;
	Авто;
	Accurate;
	Точная;
}
declare type ПеречислениеТочностьПечати = EnumPrintAccuracy;
interface AddInType {
}
interface DOMNodeFilterParameters {
}
interface PredictionModelResultColumn {
	Column: PredictionModelColumn;
	Колонка: PredictionModelColumn;
	Name: string;
	Имя: string;
}
interface CollaborationSystemConversationContext {
	URL: string;
	НавигационнаяСсылка: string;
}
declare type КонтекстОбсужденияСистемыВзаимодействия = CollaborationSystemConversationContext;
interface CollaborationSystemConversationsFilter {
	ContextConversation: boolean;
	КонтекстноеОбсуждение: boolean;
	ConversationContext: CollaborationSystemConversationContext;
	КонтекстОбсуждения: CollaborationSystemConversationContext;
	CurrentUserIsMember: boolean;
	ТекущийПользовательЯвляетсяУчастником: boolean;
	StartDate: Date;
	ДатаНачала: Date;
	SortDirection: SortDirection;
	НаправлениеСортировки: SortDirection;
	Count: number;
	Количество: number;
}
declare type ОтборОбсужденийСистемыВзаимодействия = CollaborationSystemConversationsFilter;
interface HTMLElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface AddInSettings {
}
declare type НастройкиВнешнейКомпоненты = AddInSettings;
interface ChartScaleTitlePlacement {
}
interface PivotChartType {
}
interface Mail {
	Logon(... params): void;
	Подключиться(... params): void;
	Logoff(): void;
	Отключиться(): void;
	Send(... params): void;
	Послать(... params): void;
	Get(... params): ArrayV8;
	Выбрать(... params): ArrayV8;
}
declare type Почта = Mail;
interface DataCompositionSettingStructure {
	Structure: DataCompositionSettingStructureItemCollection;
	Структура: DataCompositionSettingStructureItemCollection;
	UserSettingID: string;
	ИдентификаторПользовательскойНастройки: string;
	ViewMode: DataCompositionSettingsItemViewMode;
	РежимОтображения: DataCompositionSettingsItemViewMode;
}
interface DOMBuilderConfiguration {
	ParameterNames;
	ИменаПараметров;
	SetParameter(... params): void;
	УстановитьПараметр(... params): void;
	GetParameter(... params);
	ПолучитьПараметр(... params);
	CanSetParameter(... params): boolean;
	ВозможноУстановитьПараметр(... params): boolean;
}
declare type КонфигурацияПостроителяDOM = DOMBuilderConfiguration;
interface HTMLDocument {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	DocType: DOMDocumentType;
	ОпределениеТипаДокумента: DOMDocumentType;
	DocumentElement: DOMElement;
	ЭлементДокумента: DOMElement;
	InputEncoding: string;
	КодировкаИсточника: string;
	StrictErrorChecking: boolean;
	СтрогаяПроверкаОшибок: boolean;
	DocumentURI: string;
	URIДокумента: string;
	Title: string;
	Заголовок: string;
	Referrer: string;
	Отношение: string;
	Domain: string;
	Домен: string;
	URL: string;
	Body: DOMElement;
	Тело: DOMElement;
	Images: HTMLCollection;
	Картинки: HTMLCollection;
	Applets: HTMLCollection;
	Аплеты: HTMLCollection;
	Links: HTMLCollection;
	Ссылки: HTMLCollection;
	Forms: HTMLCollection;
	Формы: HTMLCollection;
	Anchors: HTMLCollection;
	Якоря: HTMLCollection;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	CreateElement(... params): DOMElement;
	СоздатьЭлемент(... params): DOMElement;
	CreateTextNode(... params): DOMText;
	СоздатьТекстовыйУзел(... params): DOMText;
	CreateComment(... params): DOMComment;
	СоздатьКомментарий(... params): DOMComment;
	CreateAttribute(... params): DOMAttribute;
	СоздатьАтрибут(... params): DOMAttribute;
	GetElementByTagName(... params): DOMElementList;
	ПолучитьЭлементыПоИмени(... params): DOMElementList;
	ImportNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ИмпортироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	GetElementById(... params): DOMElement;
	ПолучитьЭлементПоИдентификатору(... params): DOMElement;
	AdoptNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	АдаптироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	NormalizeDocument(): void;
	НормализоватьДокумент(): void;
	RenameNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПереименоватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	CreateNodeIterator(... params): DOMNodeIterator;
	СоздатьИтераторУзлов(... params): DOMNodeIterator;
	CreateTreeWalker(... params): DOMTreeWalker;
	СоздатьОбходДерева(... params): DOMTreeWalker;
}
declare type ДокументHTML = HTMLDocument;
interface DOMBuilder {
	DOMConfig: DOMBuilderConfiguration;
	КонфигурацияDOM: DOMBuilderConfiguration;
	Read(... params): HTMLDocument | DOMDocument;
	Прочитать(... params): HTMLDocument | DOMDocument;
	ReadWithContext(... params);
	ПрочитатьВКонтексте(... params);
}
declare type ПостроительDOM = DOMBuilder;
interface SearchStringModeOnInputByString {
}
interface CallLog {
	FindRecords(... params): ArrayV8;
	НайтиЗаписи(... params): ArrayV8;
}
interface GeographicalSchemaObjectFindType {
}
interface DocumentPostingMode {
}
interface SelectedDateCollection {
	Count(): number;
	Количество(): number;
	Get(... params): Date;
	Получить(... params): Date;
	Contains(... params);
	Содержит(... params);
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
}
interface TableExtensionSettings {
}
interface SearchDirection {
}
interface EnumStockChartUsedPointValue {
	Open;
	Открытие;
	High;
	Максимальное;
	Low;
	Минимальное;
	Close;
	Закрытие;
	OpenCloseAverage;
	СреднееОткрытияИЗакрытия;
}
declare type ПеречислениеИспользуемоеЗначениеТочкиБиржевойДиаграммы = EnumStockChartUsedPointValue;
interface QueryBuilderDimensionType {
}
interface EnumChartAnimation {
	Auto;
	Авто;
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеАнимацияДиаграммы = EnumChartAnimation;
interface XSPatternFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Value: string;
	Значение: string;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетОбразцаXS = XSPatternFacet;
interface DataAnalysisFieldType {
}
interface DataAnalysisObject {
}
interface DataAnalysisField {
	FieldType: DataAnalysisFieldType;
	ТипПоля: DataAnalysisFieldType;
	FieldName: string;
	ИмяПоля: string;
	DataAnalysisObject: DataAnalysisObject;
	ОбъектАнализаДанных: DataAnalysisObject;
}
declare type ПолеАнализаДанных = DataAnalysisField;
interface EnumSpreadsheetDocumentSelectionShowModeType {
	WhenActive;
	ПриАктивности;
	Always;
	Всегда;
}
declare type ПеречислениеТипОтображенияВыделенияТабличногоДокумента = EnumSpreadsheetDocumentSelectionShowModeType;
interface SpreadsheetDocumentField {
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	VerticalScrollBar: boolean;
	ВертикальнаяПолосаПрокрутки: boolean;
	HorizontalScrollBar: boolean;
	ГоризонтальнаяПолосаПрокрутки: boolean;
	Enabled: boolean;
	Доступность: boolean;
	EnableStartDrag: boolean;
	РазрешитьНачалоПеретаскивания: boolean;
	EnableDrag: boolean;
	РазрешитьПеретаскивание: boolean;
	ShowSelection: EnumSpreadsheetDocumentSelectionShowModeType;
	ОтображатьВыделение: EnumSpreadsheetDocumentSelectionShowModeType;
	TableWidth: number;
	ШиринаТаблицы: number;
	TableHeight: number;
	ВысотаТаблицы: number;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	Protection: boolean;
	Защита: boolean;
	CurrentArea: SpreadsheetDocumentRange;
	ТекущаяОбласть: SpreadsheetDocumentRange;
	ShowGrid: boolean;
	ОтображатьСетку: boolean;
	ShowHeaders: boolean;
	ОтображатьЗаголовки: boolean;
	FixedTop: number;
	ФиксацияСверху: number;
	FixedLeft: number;
	ФиксацияСлева: number;
	PrintParametersKey: string;
	КлючПараметровПечати: string;
	PrintParametersName: string;
	ИмяПараметровПечати: string;
	WindowOptionsKey: string;
	КлючСохраненияПоложенияОкна: string;
	WindowOptionsName: string;
	ИмяСохраненияПоложенияОкна: string;
	BlackAndWhiteView: boolean;
	ЧерноБелыйПросмотр: boolean;
	StepDirection: SpreadsheetDocumentStepDirectionType;
	НаправлениеПерехода: SpreadsheetDocumentStepDirectionType;
	BackgroundPicture: Picture;
	ФоноваяКартинка: Picture;
	TotalsRight: boolean;
	ИтогиСправа: boolean;
	TotalsBelow: boolean;
	ИтогиСнизу: boolean;
	FixedBackground: boolean;
	ФиксированныйФон: boolean;
	Drawings: SpreadsheetDocumentDrawingCollection;
	Рисунки: SpreadsheetDocumentDrawingCollection;
	Parameters: SpreadsheetDocumentTemplateParameters;
	Параметры: SpreadsheetDocumentTemplateParameters;
	Areas: SpreadsheetDocumentAreaCollection;
	Области: SpreadsheetDocumentAreaCollection;
	GroupBackColor: Color;
	ЦветФонаГруппировки: Color;
	GroupTextColor: Color;
	ЦветТекстаГруппировки: Color;
	HeaderBackColor: Color;
	ЦветФонаЗаголовков: Color;
	HeaderTextColor: Color;
	ЦветТекстаЗаголовков: Color;
	SaveViewProperties: boolean;
	СохранятьСвойстваОтображения: boolean;
	PageOrientation: PageOrientation;
	ОриентацияСтраницы: PageOrientation;
	PrintScale: number;
	МасштабПечати: number;
	Collate: boolean;
	РазборПоКопиям: boolean;
	LeftMargin: number;
	ПолеСлева: number;
	RightMargin: number;
	ПолеСправа: number;
	TopMargin: number;
	ПолеСверху: number;
	BottomMargin: number;
	ПолеСнизу: number;
	HeaderSize: number;
	РазмерКолонтитулаСверху: number;
	FooterSize: number;
	РазмерКолонтитулаСнизу: number;
	FitToPage: boolean;
	АвтоМасштаб: boolean;
	BlackAndWhite: boolean;
	ЧерноБелаяПечать: boolean;
	PrinterName: string;
	ИмяПринтера: string;
	PerPage: number;
	ЭкземпляровНаСтранице: number;
	Copies: number;
	КоличествоЭкземпляров: number;
	RepeatOnRowPrint: SpreadsheetDocumentRange;
	ПовторятьПриПечатиСтроки: SpreadsheetDocumentRange;
	RepeatOnColumnPrint: SpreadsheetDocumentRange;
	ПовторятьПриПечатиКолонки: SpreadsheetDocumentRange;
	PrintArea: SpreadsheetDocumentRange;
	ОбластьПечати: SpreadsheetDocumentRange;
	Header: SpreadsheetDocumentHeaderFooter;
	ВерхнийКолонтитул: SpreadsheetDocumentHeaderFooter;
	Footer: SpreadsheetDocumentHeaderFooter;
	НижнийКолонтитул: SpreadsheetDocumentHeaderFooter;
	EmbeddedTables: EmbeddedTableCollection;
	ВстроенныеТаблицы: EmbeddedTableCollection;
	LanguageCode: string;
	КодЯзыка: string;
	ShowGroups: boolean;
	ОтображатьГруппировки: boolean;
	SelectedAreas: SpreadsheetDocumentSelectedAreas;
	ВыделенныеОбласти: SpreadsheetDocumentSelectedAreas;
	Output: UseOutput;
	Вывод: UseOutput;
	UsedFileName: string;
	ИспользуемоеИмяФайла: string;
	PageSize: string;
	РазмерСтраницы: string;
	PageWidth: number;
	ШиринаСтраницы: number;
	PageHeight: number;
	ВысотаСтраницы: number;
	PrintAccuracy: PrintAccuracy;
	ТочностьПечати: PrintAccuracy;
	DuplexPrinting: DuplexPrintingType;
	ДвусторонняяПечать: DuplexPrintingType;
	PagePlacementAlternation: PagePlacementAlternation;
	ЧередованиеРасположенияСтраниц: PagePlacementAlternation;
	Template: boolean;
	Макет: boolean;
	Read(... params): void;
	Прочитать(... params): void;
	Write(... params): void;
	Записать(... params): void;
	Print(... params): void;
	Напечатать(... params): void;
	Clear(): void;
	Очистить(): void;
	Show(... params): void;
	Показать(... params): void;
	Hide(): void;
	Скрыть(): void;
	Put(... params);
	Вывести(... params);
	Join(... params);
	Присоединить(... params);
	PutVerticalPageBreak(): void;
	ВывестиВертикальныйРазделительСтраниц(): void;
	PutHorizontalPageBreak(): void;
	ВывестиГоризонтальныйРазделительСтраниц(): void;
	CheckPut(... params): boolean;
	ПроверитьВывод(... params): boolean;
	CheckAttachment(... params): boolean;
	ПроверитьПрисоединение(... params): boolean;
	Area(... params): SpreadsheetDocumentRange;
	Область(... params): SpreadsheetDocumentRange;
	StartRowGroup(... params): void;
	НачатьГруппуСтрок(... params): void;
	EndRowGroup(): void;
	ЗакончитьГруппуСтрок(): void;
	StartColumnGroup(... params): void;
	НачатьГруппуКолонок(... params): void;
	EndColumnGroup(): void;
	ЗакончитьГруппуКолонок(): void;
	FindText(... params): SpreadsheetDocumentRange;
	НайтиТекст(... params): SpreadsheetDocumentRange;
	FindValue(... params): SpreadsheetDocumentRange;
	НайтиЗначение(... params): SpreadsheetDocumentRange;
	InsertArea(... params): void;
	ВставитьОбласть(... params): void;
	DeleteArea(... params): void;
	УдалитьОбласть(... params): void;
	GetArea(... params): SpreadsheetDocument;
	ПолучитьОбласть(... params): SpreadsheetDocument;
	StartRowAutoGrouping(): void;
	НачатьАвтогруппировкуСтрок(): void;
	EndRowAutoGrouping(): void;
	ЗакончитьАвтогруппировкуСтрок(): void;
	StartColumnAutoGrouping(): void;
	НачатьАвтогруппировкуКолонок(): void;
	EndColumnAutoGrouping(): void;
	ЗакончитьАвтогруппировкуКолонок(): void;
	RowGroupLevelCount(): number;
	КоличествоУровнейГруппировокСтрок(): number;
	ColumnGroupLevelCount(): number;
	КоличествоУровнейГруппировокКолонок(): number;
	ShowRowGroupLevel(... params): void;
	ПоказатьУровеньГруппировокСтрок(... params): void;
	ShowColumnGroupLevel(... params): void;
	ПоказатьУровеньГруппировокКолонок(... params): void;
	PageCount(): number;
	КоличествоСтраниц(): number;
	BeginWriting(... params): void;
	НачатьЗапись(... params): void;
	GetDataAreaHorizontalSize(): number;
	ПолучитьРазмерОбластиДанныхПоГоризонтали(): number;
	GetDataAreaVerticalSize(): number;
	ПолучитьРазмерОбластиДанныхПоВертикали(): number;
}
interface TimeScalePosition {
}
interface TimeScale {
	Location: TimeScalePosition;
	Положение: TimeScalePosition;
	Items: TimeScaleItems;
	Элементы: TimeScaleItems;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor;
	ЦветТекста;
}
interface DOMWriterConfiguration {
	ParameterNames;
	ИменаПараметров;
	SetParameter(... params): void;
	УстановитьПараметр(... params): void;
	GetParameter(... params);
	ПолучитьПараметр(... params);
	CanSetParameter(... params): boolean;
	ВозможноУстановитьПараметр(... params): boolean;
}
declare type КонфигурацияЗаписиDOM = DOMWriterConfiguration;
interface FixedStructure {
	Count(): number;
	Количество(): number;
	Property(... params): boolean;
	Свойство(... params): boolean;
}
declare type ФиксированнаяСтруктура = FixedStructure;
interface EnumDataCompositionGroupUseVariant {
	Auto;
	Авто;
	AdditionalInformation;
	ДополнительнаяИнформация;
}
declare type ПеречислениеВариантИспользованияГруппировкиКомпоновкиДанных = EnumDataCompositionGroupUseVariant;
interface EnumGeographicalSchemaLayerSeriesImportModeType {
	ImportAll;
	ИмпортироватьВсе;
	DontImport;
	НеИмпортировать;
}
declare type ПеречислениеТипИмпортаСерийСлояГеографическойСхемы = EnumGeographicalSchemaLayerSeriesImportModeType;
interface PaintingReferencePointPosition {
}
interface FunctionalOptionContentItem {
	Object;
	Объект;
}
interface EnumSpreadsheetDocumentShiftType {
	Horizontal;
	ПоГоризонтали;
	Vertical;
	ПоВертикали;
	WithoutShift;
	БезСмещения;
}
declare type ПеречислениеТипСмещенияТабличногоДокумента = EnumSpreadsheetDocumentShiftType;
interface AssociationRulesPruneType {
}
interface EnumJSONDateWritingVariant {
	LocalDate;
	ЛокальнаяДата;
	LocalDateWithOffset;
	ЛокальнаяДатаСоСмещением;
	UniversalDate;
	УниверсальнаяДата;
}
declare type ПеречислениеВариантЗаписиДатыJSON = EnumJSONDateWritingVariant;
interface DataAnalysisParameter {
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	Value;
	Значение;
}
interface DataAnalysisParameters {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataAnalysisParameter;
	Найти(... params): DataAnalysisParameter;
	Get(... params): DataAnalysisParameter;
	Получить(... params): DataAnalysisParameter;
}
interface AnalysisDataType {
}
interface DataAnalysisColumn {
	Name: string;
	Имя: string;
	ColumnType;
	ТипКолонки;
	DataKind: AnalysisDataType;
	ВидДанных: AnalysisDataType;
	ExtendedParameters;
	ДополнительныеПараметры;
}
interface DataAnalysisColumns {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataAnalysisColumn;
	Найти(... params): DataAnalysisColumn;
	Get(... params): DataAnalysisColumn;
	Получить(... params): DataAnalysisColumn;
}
interface PredictionModelClusterization {
	DataSource;
	ИсточникДанных;
	Columns: PredictionModelColumns;
	Колонки: PredictionModelColumns;
	InputColumnsSetting: PredictionModelInputColumnsSetting;
	НастройкаВходныхКолонок: PredictionModelInputColumnsSetting;
	ResultColumns;
	КолонкиРезультата;
	Clusters: FixedArray;
	Кластеры: FixedArray;
	Execute(): ValueTable;
	Выполнить(): ValueTable;
}
interface DataAnalysisClusterizationResult {
	Parameters: DataAnalysisParameters;
	Параметры: DataAnalysisParameters;
	ColumnsSetting: DataAnalysisColumns;
	НастройкаКолонок: DataAnalysisColumns;
	Clusters: FixedArray;
	Кластеры: FixedArray;
	ObjectCount: number;
	КоличествоОбъектов: number;
	ClusterizationTable: ValueTable;
	ТаблицаКластеризации: ValueTable;
	InterclusterDistances: FixedArray;
	МежкластерныеРасстояния: FixedArray;
	ClusterizationObjects: FixedArray;
	ОбъектыКластеризации: FixedArray;
	LinkTable: ValueTable;
	ТаблицаСвязей: ValueTable;
	CreatePredictionModel(): PredictionModelClusterization;
	СоздатьМодельПрогноза(): PredictionModelClusterization;
}
interface DataAnalysisStandardizationType {
}
interface DataAnalysisCluster {
	ObjectCount: number;
	КоличествоОбъектов: number;
	Centroid: FixedArray;
	ЦентрТяжести: FixedArray;
	PredictableFieldValues: Structure;
	ЗначенияПолейПрогноза: Structure;
}
interface LocalCalendarEventKey {
}
interface XMLWriter {
	NamespaceContext: XMLNamespaceContext;
	КонтекстПространствИмен: XMLNamespaceContext;
	Indent: boolean;
	Отступ: boolean;
	Settings: XMLWriterSettings;
	Параметры: XMLWriterSettings;
	WriteXMLDeclaration(): void;
	ЗаписатьОбъявлениеXML(): void;
	WriteStartElement(... params): void;
	ЗаписатьНачалоЭлемента(... params): void;
	WriteEndElement(): void;
	ЗаписатьКонецЭлемента(): void;
	WriteText(... params): void;
	ЗаписатьТекст(... params): void;
	WriteAttribute(... params): void;
	ЗаписатьАтрибут(... params): void;
	WriteNamespaceMapping(... params): void;
	ЗаписатьСоответствиеПространстваИмен(... params): void;
	WriteProcessingInstruction(... params): void;
	ЗаписатьИнструкциюОбработки(... params): void;
	WriteComment(... params): void;
	ЗаписатьКомментарий(... params): void;
	WriteRaw(... params): void;
	ЗаписатьБезОбработки(... params): void;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	WriteDocumentType(... params): void;
	ЗаписатьТипДокумента(... params): void;
	WriteCDATASection(... params): void;
	ЗаписатьСекциюCDATA(... params): void;
	WriteEntityReference(... params): void;
	ЗаписатьСсылкуНаСущность(... params): void;
	WriteStartAttribute(... params): void;
	ЗаписатьНачалоАтрибута(... params): void;
	WriteEndAttribute(): void;
	ЗаписатьКонецАтрибута(): void;
	WriteCurrent(... params): void;
	ЗаписатьТекущий(... params): void;
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	SetString(... params): void;
	УстановитьСтроку(... params): void;
	Close(): string;
	Закрыть(): string;
	OpenStream(... params): void;
	ОткрытьПоток(... params): void;
}
declare type ЗаписьXML = XMLWriter;
interface ExchangeMessageWriter {
	XMLWriter: XMLWriter;
	ЗаписьXML: XMLWriter;
	Recipient;
	Получатель;
	MessageNo: number;
	НомерСообщения: number;
	ReceivedNo: number;
	НомерПринятого: number;
	BeginWrite(... params): void;
	НачатьЗапись(... params): void;
	EndWrite(): void;
	ЗакончитьЗапись(): void;
	CancelWrite(): void;
	ПрерватьЗапись(): void;
}
interface ReportFormType {
}
interface EnumDataCompositionTextOutputType {
	Auto;
	Авто;
	DontOutput;
	НеВыводить;
	Output;
	Выводить;
}
declare type ПеречислениеТипВыводаТекстаКомпоновкиДанных = EnumDataCompositionTextOutputType;
interface InternetMail {
	CurrentMailbox: string;
	ТекущийПочтовыйЯщик: string;
	DelimeterChar: string;
	СимволРазделитель: string;
	Logon(... params): void;
	Подключиться(... params): void;
	Logoff(): void;
	Отключиться(): void;
	Send(... params): Map;
	Послать(... params): Map;
	Get(... params): ArrayV8;
	Выбрать(... params): ArrayV8;
	GetUIDL(... params): ArrayV8;
	ПолучитьИдентификаторы(... params): ArrayV8;
	GetHeaders(... params): ArrayV8;
	ПолучитьЗаголовки(... params): ArrayV8;
	DeleteMessages(... params): void;
	УдалитьСообщения(... params): void;
	CombinePartial(... params): ArrayV8;
	ОбъединитьЧастичные(... params): ArrayV8;
	CreateMailbox(... params): void;
	СоздатьПочтовыйЯщик(... params): void;
	DeleteMailbox(... params): void;
	УдалитьПочтовыйЯщик(... params): void;
	RenameMailbox(... params): void;
	ПереименоватьПочтовыйЯщик(... params): void;
	GetMailboxes(): ArrayV8;
	ПолучитьПочтовыеЯщики(): ArrayV8;
	UndeleteMessages(... params): void;
	ОтменитьУдалениеСообщений(... params): void;
	ClearDeletedMassages(): void;
	ОчиститьУдаленныеСообщения(): void;
	GetMessageCount();
	ПолучитьКоличествоСообщений();
	SubscribeToMailbox(... params): void;
	ПодписатьсяНаПочтовыйЯщик(... params): void;
	UnsubscribeFromMailbox(... params): void;
	ОтменитьПодпискуНаПочтовыйЯщик(... params): void;
	GetMailboxesBySubscription();
	ПолучитьПочтовыеЯщикиПоПодписке();
}
declare type ИнтернетПочта = InternetMail;
interface EnumQuerySchemaTotalCalculationFieldType {
	Items;
	Элементы;
	Hierarchy;
	Иерархия;
	HierarchyOnly;
	ТолькоИерархия;
}
declare type ПеречислениеТипКонтрольнойТочкиСхемыЗапроса = EnumQuerySchemaTotalCalculationFieldType;
interface ChartLineType {
}
declare var AvailableParameters: DataCompositionAvailableParameters;
declare var ДоступныеПараметры: DataCompositionAvailableParameters;
declare var Items: DataCompositionParameterValueCollection;
declare var Элементы: DataCompositionParameterValueCollection;
declare function FindParameterValue(... params): DataCompositionParameterValue;
declare function НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
declare function SetParameterValue(... params): void;
declare function УстановитьЗначениеПараметра(... params): void;
interface XSSimpleFinal {
}
interface EnumChartColorPalette {
	Palette8;
	Палитра8;
	Palette32;
	Палитра32;
	Pastel;
	Пастельная;
	Bright;
	Яркая;
	Soft;
	Мягкая;
	Warm;
	Теплая;
	Cold;
	Холодная;
	Blue;
	Синяя;
	Orange;
	Оранжевая;
	Green;
	Зеленая;
	Yellow;
	Желтая;
	Gray;
	Серая;
	Custom;
	Произвольная;
	Gradient;
	Градиентная;
	Auto;
	Авто;
}
declare type ПеречислениеПалитраЦветовДиаграммы = EnumChartColorPalette;
interface EnumParagraphType {
	Usual;
	Обычный;
	BulletedList;
	МаркированныйСписок;
	NumberedList;
	НумерованныйСписок;
}
declare type ПеречислениеТипПараграфа = EnumParagraphType;
interface EnumDendrogramScaleKeeping {
	AllItems;
	ВсеЭлементы;
	ItemCount;
	КоличествоЭлементов;
	MinimumWidth;
	МинимальнаяШирина;
}
declare type ПеречислениеПоддержкаМасштабаДендрограммы = EnumDendrogramScaleKeeping;
interface UsualGroupRepresentation {
}
interface BubbleChartNegativeValuesShowMode {
}
interface EnumChartTrendlineApproximationType {
	Linear;
	Линейный;
	Exponential;
	Экспоненциальный;
	Logarithmic;
	Логарифмический;
	Power;
	Степенной;
	Polynomial;
	Полиномиальный;
}
declare type ПеречислениеТипАппроксимацииЛинииТрендаДиаграммы = EnumChartTrendlineApproximationType;
interface DataAnalysisDecisionTree {
}
interface DocumentWriteMode {
}
interface ChartLabelsOrientation {
}
interface ChartScaleTitleTextSource {
}
interface ChartScale {
	ShowTitle: ShowChartScaleTitle;
	ОтображениеЗаголовка: ShowChartScaleTitle;
	TitleTextSource: ChartScaleTitleTextSource;
	СпособЗаполненияТекстаЗаголовка: ChartScaleTitleTextSource;
	TitleText;
	ТекстЗаголовка;
	TitleArea: ChartLabelArea;
	ОбластьЗаголовка: ChartLabelArea;
	TitlePlacement: ChartScaleTitlePlacement;
	РасположениеЗаголовка: ChartScaleTitlePlacement;
}
interface GanttChartPlotArea {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	LabelsOrientation: ChartLabelsOrientation;
	ОриентацияМеток: ChartLabelsOrientation;
	ScaleColor: Color;
	ЦветШкалы: Color;
	ScaleLines: Line;
	ЛинииШкалы: Line;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
	PointsScale: ChartScale;
	ШкалаТочек: ChartScale;
	ValuesScale: ChartScale;
	ШкалаЗначений: ChartScale;
	SeriesScale: ChartScale;
	ШкалаСерий: ChartScale;
	TimeScale: TimeScale;
	ШкалаВремени: TimeScale;
	Title: string;
	Заголовок: string;
	OutboundWholeIntervalColor: Color;
	ЦветЗаГраницейПолногоИнтервала: Color;
	LinkLinesColor: Color;
	ЦветЛинийСвязей: Color;
	LinkLines: Line;
	ЛинииСвязей: Line;
}
interface ChartBoundaryDetectionMethod {
}
interface ChartAxis {
	BaseValue: number;
	БазовоеЗначение: number;
	MaxValue;
	МаксимальноеЗначение;
	MinValue;
	МинимальноеЗначение;
	MaxValueDetectionMethod: ChartBoundaryDetectionMethod;
	СпособОпределенияМаксимальногоЗначения: ChartBoundaryDetectionMethod;
	MinValueDetectionMethod: ChartBoundaryDetectionMethod;
	СпособОпределенияМинимальногоЗначения: ChartBoundaryDetectionMethod;
}
interface EnumDataCompositionDetailsProcessingAction {
	None;
	Нет;
	DrillDown;
	Расшифровать;
	Filter;
	Отфильтровать;
	Order;
	Упорядочить;
	Group;
	Сгруппировать;
	OpenValue;
	ОткрытьЗначение;
	ApplyAppearance;
	Оформить;
}
declare type ПеречислениеДействиеОбработкиРасшифровкиКомпоновкиДанных = EnumDataCompositionDetailsProcessingAction;
interface HTMLDocumentField {
	Document;
	Документ;
	Border;
	Рамка;
	BorderColor;
	ЦветРамки;
	Output;
	Вывод;
	Navigate(... params): void;
	Перейти(... params): void;
	GoBack(): void;
	Назад(): void;
	GoForward(): void;
	Вперед(): void;
	GetURL(... params);
	ПолучитьURL(... params);
	SetMode(... params): void;
	УстановитьРежим(... params): void;
	GetText();
	ПолучитьТекст();
	SetText(... params): void;
	УстановитьТекст(... params): void;
}
interface DOMWriter {
	DOMConfig: DOMWriterConfiguration;
	КонфигурацияDOM: DOMWriterConfiguration;
	Write(... params): void;
	Записать(... params): void;
}
declare type ЗаписьDOM = DOMWriter;
interface ConditionalAppearanceSettingControl {
	Name: string;
	Имя: string;
	Enabled: boolean;
	Доступность: boolean;
}
interface EnumQuerySchemaPeriodAdditionType {
	NoAddition;
	БезДополнения;
	Second;
	Секунда;
	Minute;
	Минута;
	Hour;
	Час;
	Day;
	День;
	Week;
	Неделя;
	TenDays;
	Декада;
	Month;
	Месяц;
	Quarter;
	Квартал;
	HalfYear;
	Полугодие;
	Year;
	Год;
}
declare type ПеречислениеТипДополненияПериодамиСхемыЗапроса = EnumQuerySchemaPeriodAdditionType;
interface ExternalObject {
}
interface FastInfosetReader {
	NodeType: XMLNodeType;
	ТипУзла: XMLNodeType;
	Name: string;
	Имя: string;
	LocalName: string;
	ЛокальноеИмя: string;
	Prefix: string;
	Префикс: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Value: string;
	Значение: string;
	XMLEncoding: string;
	КодировкаXML: string;
	InputEncoding: string;
	КодировкаИсточника: string;
	XMLVersion: string;
	ВерсияXML: string;
	Standalone: boolean;
	Автономный: boolean;
	BaseURI: string;
	БазовыйURI: string;
	HasName: boolean;
	ИмеетИмя: boolean;
	SystemId: string;
	СистемныйИдентификатор: string;
	PublicId: string;
	ПубличныйИдентификатор: string;
	NotationName: string;
	ИмяНотации: string;
	HasValue: boolean;
	ИмеетЗначение: boolean;
	IsWhitespace: boolean;
	ЭтоПробельныеСимволы: boolean;
	IsCharacters: boolean;
	ЭтоСимвольныеДанные: boolean;
	Space: XMLSpace;
	ПробельныеСимволы: XMLSpace;
	Lang: string;
	Язык: string;
	NamespaceContext: XMLNamespaceContext;
	КонтекстПространствИмен: XMLNamespaceContext;
	IsDefaultAttribute: boolean;
	ЭтоАтрибутПоУмолчанию: boolean;
	Read(): boolean;
	Прочитать(): boolean;
	ReadAttribute(): boolean;
	ПрочитатьАтрибут(): boolean;
	AttributeCount(): number;
	КоличествоАтрибутов(): number;
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	LookupNamespaceURI(... params);
	НайтиURIПространстваИмен(... params);
	AttributeName(... params): string;
	ИмяАтрибута(... params): string;
	AttributePrefix(... params): string;
	ПрефиксАтрибута(... params): string;
	AttributeLocalName(... params): string;
	ЛокальноеИмяАтрибута(... params): string;
	AttributeNamespaceURI(... params): string;
	URIПространстваИменАтрибута(... params): string;
	AttributeValue(... params): string;
	ЗначениеАтрибута(... params): string;
	AttributeType(... params): XMLAttributeType;
	ТипАтрибута(... params): XMLAttributeType;
	FirstAttribute(): boolean;
	ПервыйАтрибут(): boolean;
	NextAttribute(): boolean;
	СледующийАтрибут(): boolean;
	Skip(): void;
	Пропустить(): void;
	MoveToContent(... params): XMLNodeType;
	ПерейтиКСодержимому(... params): XMLNodeType;
	FirstDeclaration(): boolean;
	ПервоеОбъявление(): boolean;
	NextDeclaration(): boolean;
	СледующееОбъявление(): boolean;
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	SetBinaryData(... params): void;
	УстановитьДвоичныеДанные(... params): void;
	Close(): void;
	Закрыть(): void;
	OpenStream(... params): void;
	ОткрытьПоток(... params): void;
}
declare type ЧтениеFastInfoset = FastInfosetReader;
interface EnumPaintingReferencePointPosition {
	LeftTop;
	ЛевоВерх;
	LeftCenter;
	ЛевоЦентр;
	LeftBottom;
	ЛевоНиз;
	CenterTop;
	ЦентрВерх;
	Center;
	Центр;
	CenterBottom;
	ЦентрНиз;
	RightTop;
	ПравоВерх;
	RightCenter;
	ПравоЦентр;
	RightBottom;
	ПравоНиз;
}
declare type ПеречислениеПоложениеОпорнойТочкиОтрисовки = EnumPaintingReferencePointPosition;
interface StandardPeriodEditDialog {
	Period: StandardPeriod;
	Период: StandardPeriod;
	Edit(): boolean;
	Редактировать(): boolean;
	Show(... params): void;
	Показать(... params): void;
}
declare type ДиалогРедактированияСтандартногоПериода = StandardPeriodEditDialog;
interface GeographicalSchemaPolylineObjectSegment {
	Count(): number;
	Количество(): number;
	Get(... params): GeographicalSchemaPolylineObjectSegment;
	Получить(... params): GeographicalSchemaPolylineObjectSegment;
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
}
interface EnumAutoShowOpenButtonMode {
	Auto;
	Авто;
	Always;
	Всегда;
	FilledOnly;
	ТолькоДляЗаполненного;
}
declare type ПеречислениеРежимАвтоОтображенияКнопкиОткрытия = EnumAutoShowOpenButtonMode;
interface UpdateOnDataChange {
}
interface EnumSpreadsheetDocumentAreaFillType {
	Text;
	Текст;
	Parameter;
	Параметр;
	Template;
	Шаблон;
}
declare type ПеречислениеТипЗаполненияОбластиТабличногоДокумента = EnumSpreadsheetDocumentAreaFillType;
interface EnumUpdateOnDataChange {
	Auto;
	Авто;
	DontUpdate;
	НеОбновлять;
}
declare type ПеречислениеОбновлениеПриИзмененииДанных = EnumUpdateOnDataChange;
interface InternetMailAddress {
	DisplayName: string;
	ОтображаемоеИмя: string;
	User: string;
	Пользователь: string;
	Server: string;
	Сервер: string;
	Address: string;
	Адрес: string;
	Encoding: string;
	Кодировка: string;
}
interface InternetMailAddresses {
	Count(): number;
	Количество(): number;
	Add(... params): InternetMailAddress;
	Добавить(... params): InternetMailAddress;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Get(... params): InternetMailAddress;
	Получить(... params): InternetMailAddress;
}
interface InternetMailAttachments {
	Count(): number;
	Количество(): number;
	Add(... params): InternetMailAttachment;
	Добавить(... params): InternetMailAttachment;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Get(... params): InternetMailAttachment;
	Получить(... params): InternetMailAttachment;
}
interface InternetMailMessageImportance {
}
interface InternetMailMessageParseStatus {
}
interface InternetMailMessage {
	DateReceived: Date;
	ДатаПолучения: Date;
	PostingDate: Date;
	ДатаОтправления: Date;
	PostingDateOffset: number;
	СмещениеДатыОтправления: number;
	From: InternetMailAddress;
	Отправитель: InternetMailAddress;
	SenderName: string;
	ИмяОтправителя: string;
	Subject: string;
	Тема: string;
	Texts: InternetMailTexts;
	Тексты: InternetMailTexts;
	ReplyTo: InternetMailAddresses;
	ОбратныйАдрес: InternetMailAddresses;
	To: InternetMailAddresses;
	Получатели: InternetMailAddresses;
	Cc: InternetMailAddresses;
	Копии: InternetMailAddresses;
	Bcc: InternetMailAddresses;
	СлепыеКопии: InternetMailAddresses;
	Attachments: InternetMailAttachments;
	Вложения: InternetMailAttachments;
	MessageID: string;
	ИдентификаторСообщения: string;
	Encoding: string;
	Кодировка: string;
	Header: string;
	Заголовок: string;
	Importance: InternetMailMessageImportance;
	Важность: InternetMailMessageImportance;
	Organization: string;
	Организация: string;
	RequestDeliveryReceipt: boolean;
	УведомитьОДоставке: boolean;
	RequestReadReceipt: boolean;
	УведомитьОПрочтении: boolean;
	DeliveryReceiptAddresses: InternetMailAddresses;
	АдресаУведомленияОДоставке: InternetMailAddresses;
	ReadReceiptAddresses: InternetMailAddresses;
	АдресаУведомленияОПрочтении: InternetMailAddresses;
	Size: number;
	Размер: number;
	NonASCIISymbolsEncodingMode: InternetMailMessageNonASCIISymbolsEncodingMode;
	СпособКодированияНеASCIIСимволов: InternetMailMessageNonASCIISymbolsEncodingMode;
	Categories: string;
	Категории: string;
	UID: string;
	Идентификатор: string;
	Partial;
	Частичное;
	ParseStatus: InternetMailMessageParseStatus;
	СтатусРазбора: InternetMailMessageParseStatus;
	ProcessTexts(): void;
	ОбработатьТексты(): void;
	SetField(... params): void;
	УстановитьПолеЗаголовка(... params): void;
	GetField(... params);
	ПолучитьПолеЗаголовка(... params);
	GetSourceData(): BinaryData;
	ПолучитьИсходныеДанные(): BinaryData;
	SetSourceData(... params): void;
	УстановитьИсходныеДанные(... params): void;
	GetSourceText(... params): string;
	ПолучитьИсходныйТекст(... params): string;
}
declare type ИнтернетПочтовоеСообщение = InternetMailMessage;
interface InternetMailAttachmentEncodingMode {
}
interface InternetMailAttachment {
	Name: string;
	Имя: string;
	FileName: string;
	ИмяФайла: string;
	Data: BinaryData | InternetMailMessage;
	Данные: BinaryData | InternetMailMessage;
	CID: string;
	Идентификатор: string;
	Encoding: string;
	Кодировка: string;
	EncodingMode: InternetMailAttachmentEncodingMode;
	СпособКодирования: InternetMailAttachmentEncodingMode;
	MIMEType: string;
	ТипСодержимого: string;
}
interface EnumQueryRecordType {
	DetailRecord;
	ДетальнаяЗапись;
	GroupTotal;
	ИтогПоГруппировке;
	TotalByHierarchy;
	ИтогПоИерархии;
	Overall;
	ОбщийИтог;
}
declare type ПеречислениеТипЗаписиЗапроса = EnumQueryRecordType;
interface DataAnalysis {
	DataSource;
	ИсточникДанных;
	AnalysisType;
	ТипАнализа;
	ColumnsSetting: DataAnalysisColumns;
	НастройкаКолонок: DataAnalysisColumns;
	Parameters: DataAnalysisParameters;
	Параметры: DataAnalysisParameters;
	Execute();
	Выполнить();
}
declare type АнализДанных = DataAnalysis;
interface PointInTimeWithPeriodAdjustment {
	Date: Date;
	Дата: Date;
	PeriodAdjustment: number;
	УточнениеПериода: number;
	Ref;
	Ссылка;
	Compare(... params): number;
	Сравнить(... params): number;
}
declare type МоментВремениСУточнениемПериода = PointInTimeWithPeriodAdjustment;
interface DeviceCameraType {
}
interface RadioButtonType {
}
interface FormRadioButtonField {
	RadioButtonType: RadioButtonType;
	ВидПереключателя: RadioButtonType;
	ColumnsCount: number;
	КоличествоКолонок: number;
	ChoiceList: ValueList;
	СписокВыбора: ValueList;
	TextColor: Color;
	ЦветТекста: Color;
	Font: Font;
	Шрифт: Font;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	ItemTitleHeight: number;
	ВысотаЗаголовкаЭлемента: number;
	ItemHeight: number;
	ВысотаЭлемента: number;
	ItemWidth: number;
	ШиринаЭлемента: number;
	EqualColumnsWidth: boolean;
	ОдинаковаяШиринаКолонок: boolean;
}
interface DataCompositionAreaTemplateValueCollectionHeaderCell {
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
}
declare type ЯчейкаМакетаЗаголовкаКоллекцииЗначенийОбластиКомпоновкиДанных = DataCompositionAreaTemplateValueCollectionHeaderCell;
interface DataCompositionAreaTemplateValueCollectionHeaderCells {
	Add(): DataCompositionAreaTemplateValueCollectionHeaderCell;
	Добавить(): DataCompositionAreaTemplateValueCollectionHeaderCell;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionAreaTemplateValueCollectionHeaderCell;
	Найти(... params): DataCompositionAreaTemplateValueCollectionHeaderCell;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAreaTemplateValueCollectionHeaderCell;
	Вставить(... params): DataCompositionAreaTemplateValueCollectionHeaderCell;
	Get(... params): DataCompositionAreaTemplateValueCollectionHeaderCell;
	Получить(... params): DataCompositionAreaTemplateValueCollectionHeaderCell;
}
interface DataCompositionAreaTemplateValueCollectionHeader {
	Cells: DataCompositionAreaTemplateValueCollectionHeaderCells;
	Ячейки: DataCompositionAreaTemplateValueCollectionHeaderCells;
}
declare type МакетЗаголовкаКоллекцииЗначенийОбластиКомпоновкиДанных = DataCompositionAreaTemplateValueCollectionHeader;
interface ChartPointsAxisValuesSource {
}
interface JSONWriter {
	Settings: JSONWriterSettings;
	Параметры: JSONWriterSettings;
	ValidateStructure: boolean;
	ПроверятьСтруктуру: boolean;
	WriteStartObject(): void;
	ЗаписатьНачалоОбъекта(): void;
	WriteEndObject(): void;
	ЗаписатьКонецОбъекта(): void;
	WriteStartArray(): void;
	ЗаписатьНачалоМассива(): void;
	WriteEndArray(): void;
	ЗаписатьКонецМассива(): void;
	WritePropertyName(... params): void;
	ЗаписатьИмяСвойства(... params): void;
	WriteValue(... params): void;
	ЗаписатьЗначение(... params): void;
	WriteRaw(... params): void;
	ЗаписатьБезОбработки(... params): void;
	SetString(... params): void;
	УстановитьСтроку(... params): void;
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	Close(): string;
	Закрыть(): string;
	OpenStream(... params): void;
	ОткрытьПоток(... params): void;
}
declare type ЗаписьJSON = JSONWriter;
interface DataAnalysisContiguousFieldInformation {
	Name: string;
	Имя: string;
	Count: number;
	Количество: number;
	Minimum: number;
	Минимум: number;
	Maximum: number;
	Максимум: number;
	Mean: number;
	Среднее: number;
	Range: number;
	Размах: number;
	StdDeviation: number;
	СтандартноеОтклонение: number;
	Median: number;
	Медиана: number;
}
interface DynamicalListGroupRow {
	Key;
	Ключ;
	GroupName: string;
	ИмяГруппировки: string;
	ParentGrouping: DynamicalListGroupRow;
	РодительскаяГруппировка: DynamicalListGroupRow;
}
declare type СтрокаГруппировкиДинамическогоСписка = DynamicalListGroupRow;
interface DataCompositionAreaTemplateValueCollectionCell {
	Value;
	Значение;
	Column;
	Колонка;
}
declare type ЯчейкаМакетаКоллекцииЗначенийОбластиКомпоновкиДанных = DataCompositionAreaTemplateValueCollectionCell;
interface DataCompositionAreaTemplateValueCollectionCells {
	Add(): DataCompositionAreaTemplateValueCollectionCell;
	Добавить(): DataCompositionAreaTemplateValueCollectionCell;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionAreaTemplateValueCollectionCell;
	Найти(... params): DataCompositionAreaTemplateValueCollectionCell;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAreaTemplateValueCollectionCell;
	Вставить(... params): DataCompositionAreaTemplateValueCollectionCell;
	Get(... params): DataCompositionAreaTemplateValueCollectionCell;
	Получить(... params): DataCompositionAreaTemplateValueCollectionCell;
}
interface BusinessProcessRoutePointCases {
	Count(): number;
	Количество(): number;
	Get(... params);
	Получить(... params);
}
interface UserWorkHistoryItem {
	URL: string;
	НавигационнаяСсылка: string;
	Date: Date;
	Дата: Date;
}
interface EnumFileAccess {
	Read;
	Чтение;
	Write;
	Запись;
	ReadAndWrite;
	ЧтениеИЗапись;
}
declare type ПеречислениеДоступКФайлу = EnumFileAccess;
interface FullTextSearchListItem {
	Value;
	Значение;
	Metadata;
	Метаданные;
	Presentation: string;
	Представление: string;
	Description: string;
	Описание: string;
}
interface PredefinedDataUpdate {
}
interface EnumRequiredMobileApplicationPermissions {
	Multimedia;
	Мультимедиа;
	Location;
	Геопозиционирование;
	Contacts;
	Контакты;
	Calendars;
	Календари;
	Telephony;
	Телефония;
	PushNotification;
	PushУведомления;
	LocalNotification;
	ЛокальныеУведомления;
	Print;
	Печать;
	InAppPurchases;
	ВстроенныеПокупки;
	Ads;
	Реклама;
}
declare type ПеречислениеТребуемыеРазрешенияМобильногоПриложения = EnumRequiredMobileApplicationPermissions;
interface TextWriter {
	Open(... params): void;
	Открыть(... params): void;
	Close(): void;
	Закрыть(): void;
	Write(... params): void;
	Записать(... params): void;
	WriteLine(... params): void;
	ЗаписатьСтроку(... params): void;
}
declare type ЗаписьТекста = TextWriter;
interface EnumOnScreenKeyboardReturnKeyText {
	Auto;
	Авто;
	Return;
	Ввод;
	Go;
	Перейти;
	Join;
	Подключиться;
	Next;
	Далее;
	Search;
	Найти;
	Send;
	Отправить;
	Done;
	Готово;
	Continue;
	Продолжить;
}
declare type ПеречислениеТекстКнопкиВводаЭкраннойКлавиатуры = EnumOnScreenKeyboardReturnKeyText;
interface FormCommandBar {
	HorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложение: ItemHorizontalLocation;
}
interface EnumDataAnalysisColumnTypeSummaryStatistics {
	NotUsed;
	НеИспользуемая;
	Input;
	Входная;
}
declare type ПеречислениеТипКолонкиАнализаДанныхОбщаяСтатистика = EnumDataAnalysisColumnTypeSummaryStatistics;
interface DataCompositionAvailableFieldUseRestriction {
	Field: DataCompositionField;
	Поле: DataCompositionField;
	Enabled: boolean;
	Доступность: boolean;
}
interface DataCompositionAvailableFieldUseRestrictions {
	Add(): DataCompositionAvailableFieldUseRestriction;
	Добавить(): DataCompositionAvailableFieldUseRestriction;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionAvailableFieldUseRestriction;
	Найти(... params): DataCompositionAvailableFieldUseRestriction;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAvailableFieldUseRestriction;
	Вставить(... params): DataCompositionAvailableFieldUseRestriction;
	Get(... params): DataCompositionAvailableFieldUseRestriction;
	Получить(... params): DataCompositionAvailableFieldUseRestriction;
	FieldEnabled(... params): boolean;
	ПолеДоступно(... params): boolean;
}
interface StandardCommandsGroup {
}
interface ChoiceDataGetModeOnInputByString {
}
interface ChartValuesBySeriesConnectionType {
}
interface SoundAlert {
}
interface EnumSpreadsheetDocumentValuesReadingMode {
	Text;
	Текст;
	Value;
	Значение;
}
declare type ПеречислениеСпособЧтенияЗначенийТабличногоДокумента = EnumSpreadsheetDocumentValuesReadingMode;
interface ThroughAlign {
}
interface GeographicalSchemaShowMode {
}
interface GeographicalSchemaField {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	Border: Border;
	Рамка: Border;
	ToolTip: string;
	Подсказка: string;
	Shortcut;
	СочетаниеКлавиш;
	Scale: number;
	Масштаб: number;
	ScaleKeeping: GeographicalSchemaShowMode;
	ПоддержкаМасштаба: GeographicalSchemaShowMode;
	ActiveObject: GeographicalSchemaObject;
	АктивныйОбъект: GeographicalSchemaObject;
	ShowCoordinates;
	ОтображатьКоординаты;
	Projection: GeographicalSchemaProjection;
	Проекция: GeographicalSchemaProjection;
	LatitudeShift: number;
	СмещениеШироты: number;
	LongitudeShift: number;
	СмещениеДолготы: number;
	ShowLegend: boolean;
	ОтображатьЛегенду: boolean;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	Output: UseOutput;
	Вывод: UseOutput;
	BoundaryBox: GeographicalSchemaRectangle;
	ОграничивающийПрямоугольник: GeographicalSchemaRectangle;
	RefreshEnabled;
	Обновление;
	Layers: GeographicalSchemaLayers;
	Слои: GeographicalSchemaLayers;
	TitleArea: GeographicalSchemaTitleArea;
	ОбластьЗаголовка: GeographicalSchemaTitleArea;
	LegendArea: GeographicalSchemaLegendArea;
	ОбластьЛегенды: GeographicalSchemaLegendArea;
	PlotArea: GeographicalSchemaPlotArea;
	ОбластьПостроения: GeographicalSchemaPlotArea;
	ShowedArea: GeographicalSchemaShowedArea;
	ОтображаемаяОбласть: GeographicalSchemaShowedArea;
	Read(... params): void;
	Прочитать(... params): void;
	Write(... params): void;
	Записать(... params): void;
	Clear(): void;
	Очистить(): void;
	GetPicture(... params): Picture;
	ПолучитьКартинку(... params): Picture;
	FindByLocation(... params): ArrayV8;
	НайтиПоРасположению(... params): ArrayV8;
	CheckByLocation(... params): boolean;
	ПроверитьПоРасположению(... params): boolean;
	SetPropertyForObjects(... params): void;
	УстановитьСвойствоОбъектов(... params): void;
	ClipOffByObject(... params): void;
	ОтсечьПоОбъекту(... params): void;
	Put(... params): void;
	Вывести(... params): void;
	Print(... params): void;
	Напечатать(... params): void;
}
interface EnumClientApplicationInterfaceVariant {
	Version8_2;
	Версия8_2;
	Taxi;
	Такси;
}
declare type ПеречислениеВариантИнтерфейсаКлиентскогоПриложения = EnumClientApplicationInterfaceVariant;
interface EnumPivotChartScaleKeeping {
	AllValues;
	ВсеЗначения;
	ValueCount;
	КоличествоЗначений;
	MinimumWidth;
	МинимальнаяШирина;
}
declare type ПеречислениеПоддержкаМасштабаСводнойДиаграммы = EnumPivotChartScaleKeeping;
interface BarChartPointsOrder {
}
interface HTTPRequest {
	ResourceAddress: string;
	АдресРесурса: string;
	Headers: Map;
	Заголовки: Map;
	SetBodyFromString(... params): void;
	УстановитьТелоИзСтроки(... params): void;
	SetBodyFromBinaryData(... params): void;
	УстановитьТелоИзДвоичныхДанных(... params): void;
	SetBodyFileName(... params): void;
	УстановитьИмяФайлаТела(... params): void;
	GetBodyAsString(): string;
	ПолучитьТелоКакСтроку(): string;
	GetBodyAsBinaryData(): BinaryData;
	ПолучитьТелоКакДвоичныеДанные(): BinaryData;
	GetBodyFileName(): string;
	ПолучитьИмяФайлаТела(): string;
	GetBodyAsStream(): Stream;
	ПолучитьТелоКакПоток(): Stream;
}
declare type HTTPЗапрос = HTTPRequest;
interface IntervalBoundVariant {
}
interface PeriodVariant {
}
interface PeriodSettingsVariant {
}
interface PeriodSettings {
	BeginningVariant: IntervalBoundVariant;
	ВариантНачала: IntervalBoundVariant;
	StartDate: Date;
	ДатаНачала: Date;
	DaysBefore: number;
	СмещениеНачала: number;
	EndingVariant: IntervalBoundVariant;
	ВариантОкончания: IntervalBoundVariant;
	EndDate: Date;
	ДатаОкончания: Date;
	DaysAfter: number;
	СмещениеОкончания: number;
	PeriodVariant: PeriodVariant;
	ВариантПериода: PeriodVariant;
	PeriodValue: Date;
	ЗначениеПериода: Date;
	SettingsMode: PeriodSettingsVariant;
	ВариантНастройки: PeriodSettingsVariant;
	EditAsInterval: boolean;
	РедактироватьКакИнтервал: boolean;
	EditAsPeriod: boolean;
	РедактироватьКакПериод: boolean;
	SetPeriod(... params): void;
	УстановитьПериод(... params): void;
	Edit(): boolean;
	Редактировать(): boolean;
	GetDateFrom(): Date;
	ПолучитьДатуНачала(): Date;
	GetDateTo(): Date;
	ПолучитьДатуОкончания(): Date;
}
declare type НастройкаПериода = PeriodSettings;
interface MailAttachment {
	Name: string;
	Наименование: string;
	Data: BinaryData;
	Данные: BinaryData;
}
declare type ПочтовоеВложение = MailAttachment;
interface MailAttachments {
	Count(): number;
	Количество(): number;
	Add(... params): MailAttachment;
	Добавить(... params): MailAttachment;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Get(... params): MailAttachment;
	Получить(... params): MailAttachment;
}
declare type ПочтовыеВложения = MailAttachments;
interface MailMessage {
	DateReceived: Date;
	ДатаПолучения: Date;
	From: MailAddress;
	Отправитель: MailAddress;
	Subject: string;
	Тема: string;
	Text: string;
	Текст: string;
	IsUnread: boolean;
	Непрочтено: boolean;
	To: MailAddresses;
	Получатели: MailAddresses;
	Cc: MailAddresses;
	Копии: MailAddresses;
	Bcc: MailAddresses;
	СлепыеКопии: MailAddresses;
	Attachments: MailAttachments;
	Вложения: MailAttachments;
}
declare type ПочтовоеСообщение = MailMessage;
interface TextDocumentField {
	Enabled: boolean;
	Доступность: boolean;
	Border: Line;
	Рамка: Line;
	BorderColor: Color;
	ЦветРамки: Color;
	SelectedText: string;
	ВыделенныйТекст: string;
	Font: Font;
	Шрифт: Font;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	TemplateLanguageCode: string;
	КодЯзыкаМакета: string;
	Parameters: TextDocumentTemplateParameters;
	Параметры: TextDocumentTemplateParameters;
	LineSeparator: string;
	РазделительСтрок: string;
	Output: UseOutput;
	Вывод: UseOutput;
	UsedFileName: string;
	ИспользуемоеИмяФайла: string;
	GetSelectedText(): string;
	ПолучитьВыделенныйТекст(): string;
	SetTextSelectionBounds(... params): void;
	УстановитьГраницыВыделения(... params): void;
	GetTextSelectionBounds(... params): void;
	ПолучитьГраницыВыделения(... params): void;
	LineCount(): number;
	КоличествоСтрок(): number;
	GetLine(... params): string;
	ПолучитьСтроку(... params): string;
	Read(... params): void;
	Прочитать(... params): void;
	InsertLine(... params): void;
	ВставитьСтроку(... params): void;
	AddLine(... params): void;
	ДобавитьСтроку(... params): void;
	ReplaceLine(... params): void;
	ЗаменитьСтроку(... params): void;
	DeleteLine(... params): void;
	УдалитьСтроку(... params): void;
	Show(... params): void;
	Показать(... params): void;
	Clear(): void;
	Очистить(): void;
	SetFileType(... params): void;
	УстановитьТипФайла(... params): void;
	Write(... params): void;
	Записать(... params): void;
	GetText(): string;
	ПолучитьТекст(): string;
	SetText(... params): void;
	УстановитьТекст(... params): void;
	GetArea(... params): TextDocument;
	ПолучитьОбласть(... params): TextDocument;
	Put(... params): void;
	Вывести(... params): void;
	BeginReading(... params): void;
	НачатьЧтение(... params): void;
	BeginWriting(... params): void;
	НачатьЗапись(... params): void;
}
interface DataAnalysisFieldValue {
	Field: DataAnalysisField;
	Поле: DataAnalysisField;
	Value;
	Значение;
}
interface QueryBuilderResource {
	Name;
	Имя;
}
interface WSInterface {
	NamespaceURI;
	URIПространстваИмен;
	Name;
	Имя;
	Operations;
	Операции;
	Documentation;
	Документация;
}
interface MobileDeviceLibraryDirType {
}
interface ListEditMode {
}
interface AccumulationRegisterAggregateUse {
}
interface XSMinLengthFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Fixed: boolean;
	Фиксированный: boolean;
	Value: string;
	Значение: string;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетМинимальнойДлиныXS = XSMinLengthFacet;
interface GanttChartPointCollection {
	Parent: GanttChartPoint;
	Родитель: GanttChartPoint;
	Insert(... params): GanttChartPoint;
	Вставить(... params): GanttChartPoint;
	Add(): GanttChartPoint;
	Добавить(): GanttChartPoint;
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	Get(... params): GanttChartPoint;
	Получить(... params): GanttChartPoint;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface GanttChartPoint {
	Parent: GanttChartPoint;
	Родитель: GanttChartPoint;
	Points: GanttChartPointCollection;
	Точки: GanttChartPointCollection;
	Value;
	Значение;
	Details;
	Расшифровка;
	Text: string;
	Текст: string;
	ColorPriority: boolean;
	ПриоритетЦвета: boolean;
	Color: Color;
	Цвет: Color;
	SecondColor: Color;
	ДополнительныйЦвет: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	Font: Font;
	Шрифт: Font;
	Picture: Picture;
	Картинка: Picture;
	Level(): number;
	Уровень(): number;
}
interface GanttChartSeriesCollection {
	Parent: GanttChartSeries;
	Родитель: GanttChartSeries;
	Insert(... params): GanttChartSeries;
	Вставить(... params): GanttChartSeries;
	Add(): GanttChartSeries;
	Добавить(): GanttChartSeries;
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	Get(... params): GanttChartSeries;
	Получить(... params): GanttChartSeries;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface GanttChartSeries {
	Parent: GanttChartSeries;
	Родитель: GanttChartSeries;
	Series: GanttChartSeriesCollection;
	Серии: GanttChartSeriesCollection;
	Value;
	Значение;
	Details;
	Расшифровка;
	Text: string;
	Текст: string;
	ColorPriority: boolean;
	ПриоритетЦвета: boolean;
	Color: Color;
	Цвет: Color;
	SecondColor: Color;
	ДополнительныйЦвет: Color;
	OverlappedIntervalsHatch: boolean;
	ШтриховкаПерекрывающихсяИнтервалов: boolean;
	BetweenIntervalsHatch: boolean;
	ШтриховкаМеждуИнтервалами: boolean;
	BetweenIntervalsHatchColor: Color;
	ЦветШтриховкиМеждуИнтервалами: Color;
	Level(): number;
	Уровень(): number;
}
interface GanttChartLinkType {
}
interface GanttChartLink {
	Begin: GanttChartInterval;
	Начало: GanttChartInterval;
	End: GanttChartInterval;
	Конец: GanttChartInterval;
	LinkType: GanttChartLinkType;
	ТипСвязи: GanttChartLinkType;
	Color: Color;
	Цвет: Color;
}
interface GanttChartInterval {
	Begin: Date;
	Начало: Date;
	End: Date;
	Конец: Date;
	Details;
	Расшифровка;
	Text: string;
	Текст: string;
	Value: GanttChartValue;
	Значение: GanttChartValue;
	Color: Color;
	Цвет: Color;
	Add(... params): GanttChartLink;
	Добавить(... params): GanttChartLink;
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface GanttChartValue {
	Point: GanttChartPoint;
	Точка: GanttChartPoint;
	Series: GanttChartSeries;
	Серия: GanttChartSeries;
	Details;
	Расшифровка;
	Text: string;
	Текст: string;
	Edit: boolean;
	Редактирование: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	Color: Color;
	Цвет: Color;
	SecondColor: Color;
	ДополнительныйЦвет: Color;
	Add(): GanttChartInterval;
	Добавить(): GanttChartInterval;
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface EnumCalendarEventRecurrence {
	Once;
	ОдинРаз;
	Daily;
	КаждыйДень;
	Weekly;
	КаждуюНеделю;
	Monthly;
	КаждыйМесяц;
	Yearly;
	КаждыйГод;
}
declare type ПеречислениеПовторениеСобытияКалендаря = EnumCalendarEventRecurrence;
interface ZIPEncryptionMethod {
}
interface GeographicalSchemaPolygonObjectContour {
	Count(): number;
	Количество(): number;
	Get(... params): GeographicalSchemaPolygonObjectContour;
	Получить(... params): GeographicalSchemaPolygonObjectContour;
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
}
interface EnumPivotTableColumnTotalPosition {
	Left;
	Лево;
	Right;
	Право;
}
declare type ПеречислениеПоложениеИтоговКолонокСводнойТаблицы = EnumPivotTableColumnTotalPosition;
interface ArrowStyle {
}
interface EnumArrowStyle {
	None;
	Нет;
	Filled;
	Заполненная;
	Blank;
	Незаполненная;
}
declare type ПеречислениеСтильСтрелки = EnumArrowStyle;
interface DataCompositionUserSettingsItemCollection {
	Add(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
	Добавить(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
	Найти(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
	Вставить(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
	Get(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
	Получить(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
}
interface DataCompositionUserSettings {
	Items: DataCompositionUserSettingsItemCollection;
	Элементы: DataCompositionUserSettingsItemCollection;
	AdditionalProperties: Structure;
	ДополнительныеСвойства: Structure;
	AdditionalSettings: DataCompositionUserSettings;
	ДополнительныеНастройки: DataCompositionUserSettings;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionOrder | DataCompositionConditionalAppearanceItem | DataCompositionFilterItemGroup | DataCompositionTable | DataCompositionSettingStructure | DataCompositionChart | DataCompositionConditionalAppearance | DataCompositionNestedObjectSettings | DataCompositionGroup | DataCompositionSelectedFields | DataCompositionChartGroup | DataCompositionTableGroup | DataCompositionFilterItem | DataCompositionFilter | DataCompositionSettingsParameterValue;
}
declare type ПользовательскиеНастройкиКомпоновкиДанных = DataCompositionUserSettings;
interface EnumOnUnavailabilityDataCompositionSettingsAction {
	DisableControl;
	ИзменятьДоступностьПоля;
	HidePage;
	СкрыватьСтраницу;
}
declare type ПеречислениеДействиеПриНедоступностиНастроекКомпоновкиДанных = EnumOnUnavailabilityDataCompositionSettingsAction;
interface EditTextUpdate {
}
interface CollaborationSystemConversationID {
}
interface CollaborationSystemMessageID {
}
interface CollaborationSystemMessagesFilter {
	Conversation: CollaborationSystemConversationID;
	Обсуждение: CollaborationSystemConversationID;
	After: CollaborationSystemMessageID;
	После: CollaborationSystemMessageID;
	SortDirection: SortDirection;
	НаправлениеСортировки: SortDirection;
	Count: number;
	Количество: number;
}
declare type ОтборСообщенийСистемыВзаимодействия = CollaborationSystemMessagesFilter;
interface TelephonyToolsCallType {
}
interface CallLogRecord {
	PhoneNumber: string;
	НомерТелефона: string;
	Date: Date;
	Дата: Date;
	CallType: TelephonyToolsCallType;
	ТипЗвонка: TelephonyToolsCallType;
	Duration: number;
	Продолжительность: number;
}
declare type ЗаписьЖурналаЗвонков = CallLogRecord;
interface HTMLHtmlElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Version: string;
	Версия: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface PivotChartTitleArea {
	Text: string;
	Текст: string;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
}
interface DataLockMode {
}
interface DataLockItemField {
	Field;
	Поле;
	Value;
	Значение;
	DataSourceColumn;
	КолонкаИсточникаДанных;
}
interface DataLockItemFields {
	Count(): number;
	Количество(): number;
	Get(... params): DataLockItemField;
	Получить(... params): DataLockItemField;
}
interface DataLockItem {
	Region: string;
	Область: string;
	Mode: DataLockMode;
	Режим: DataLockMode;
	DataSource;
	ИсточникДанных;
	Fields: DataLockItemFields;
	Поля: DataLockItemFields;
	UseFromDataSource(... params): void;
	ИспользоватьИзИсточникаДанных(... params): void;
	SetValue(... params): void;
	УстановитьЗначение(... params): void;
}
interface JSONValueType {
}
interface HTMLHeadElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Profile: string;
	Профиль: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface ChoiceParameter {
	Name;
	Имя;
	Value;
	Значение;
}
declare type ПараметрВыбора = ChoiceParameter;
interface EnumQueryBuilderDimensionType {
	Items;
	Элементы;
	Hierarchy;
	Иерархия;
	HierarchyOnly;
	ТолькоИерархия;
}
declare type ПеречислениеТипИзмеренияПостроителяЗапроса = EnumQueryBuilderDimensionType;
interface CryptoCertificateIncludeMode {
}
interface EnumAssociationRulesDataSourceType {
	Event;
	Событийный;
	Object;
	Объектный;
}
declare type ПеречислениеТипИсточникаДанныхПоискаАссоциаций = EnumAssociationRulesDataSourceType;
interface ContactData {
	FirstName: string;
	Имя: string;
	MiddleName: string;
	Отчество: string;
	LastName: string;
	Фамилия: string;
	PhoneticFirstName: string;
	ПроизношениеИмени: string;
	PhoneticMiddleName: string;
	ПроизношениеОтчества: string;
	PhoneticLastName: string;
	ПроизношениеФамилии: string;
	NickName: string;
	Прозвище: string;
	Prefix: string;
	Префикс: string;
	Suffix: string;
	Суффикс: string;
	Organization: string;
	Организация: string;
	Department: string;
	Отдел: string;
	JobTitle: string;
	Должность: string;
	Note: string;
	Заметка: string;
	Birthday: Date;
	ДеньРождения: Date;
	Photo: BinaryData;
	Фотография: BinaryData;
	PhoneNumbers: ArrayV8;
	НомераТелефонов: ArrayV8;
	Emails: ArrayV8;
	АдресаЭлектроннойПочты: ArrayV8;
	Addresses: ArrayV8;
	Адреса: ArrayV8;
	InstantMessagingAddresses: ArrayV8;
	АдресаМгновенныхСообщений: ArrayV8;
	URLs: ArrayV8;
	ВебАдреса: ArrayV8;
	Events: ArrayV8;
	События: ArrayV8;
	Relationships: ArrayV8;
	Отношения: ArrayV8;
	RawData: Map;
	ИсходныеДанные: Map;
}
declare type ДанныеКонтакта = ContactData;
interface AccountContactData {
	ContactData: ContactData;
	ДанныеКонтакта: ContactData;
	Account: ContactAccount;
	УчетнаяЗапись: ContactAccount;
	GlobalContactKey: string;
	ГлобальныйКлючКонтакта: string;
}
declare type ДанныеКонтактаУчетнойЗаписи = AccountContactData;
interface MailTools {
	SendingSupported(): boolean;
	ПоддерживаетсяОтправка(): boolean;
	Send(... params): void;
	Послать(... params): void;
}
interface HTTPResponse {
	StatusCode: number;
	КодСостояния: number;
	Headers: Map;
	Заголовки: Map;
	GetBodyAsString(... params): string;
	ПолучитьТелоКакСтроку(... params): string;
	GetBodyAsBinaryData(): BinaryData;
	ПолучитьТелоКакДвоичныеДанные(): BinaryData;
	GetBodyFileName(): string;
	ПолучитьИмяФайлаТела(): string;
	GetBodyAsStream(): Stream;
	ПолучитьТелоКакПоток(): Stream;
}
interface HTTPConnection {
	Host: string;
	Сервер: string;
	Port: number;
	Порт: number;
	User: string;
	Пользователь: string;
	Password: string;
	Пароль: string;
	Proxy: InternetProxy;
	Прокси: InternetProxy;
	Timeout: number;
	Таймаут: number;
	IsSecure;
	Защищенное;
	SecureConnection: OpenSSLSecureConnection;
	ЗащищенноеСоединение: OpenSSLSecureConnection;
	UseOSAuthentication: boolean;
	ИспользоватьАутентификациюОС: boolean;
	Get(... params): HTTPResponse;
	Получить(... params): HTTPResponse;
	Put(... params): HTTPResponse;
	Записать(... params): HTTPResponse;
	Post(... params): HTTPResponse;
	ОтправитьДляОбработки(... params): HTTPResponse;
	Delete(... params): HTTPResponse;
	Удалить(... params): HTTPResponse;
	Patch(... params): HTTPResponse;
	Изменить(... params): HTTPResponse;
	Head(... params): HTTPResponse;
	ПолучитьЗаголовки(... params): HTTPResponse;
	CallHTTPMethod(... params): HTTPResponse;
	ВызватьHTTPМетод(... params): HTTPResponse;
}
declare type HTTPСоединение = HTTPConnection;
interface AutoShowStateMode {
}
interface ChartValue {
	Value;
	Значение;
	Details;
	Расшифровка;
	Series;
	Серия;
	Point;
	Точка;
	ToolTip: string;
	Подсказка: string;
}
interface EnumCryptoCertificateStorePlacement {
	OSUserData;
	ДанныеПользователяОС;
	ComputerData;
	ДанныеКомпьютера;
	ApplicationData;
	ДанныеПриложения;
}
declare type ПеречислениеРасположениеХранилищаСертификатовКриптографии = EnumCryptoCertificateStorePlacement;
interface EnumGanttChartValueTextRepresentation {
	None;
	НеОтображать;
	Right;
	Право;
}
declare type ПеречислениеОтображениеТекстаЗначенияДиаграммыГанта = EnumGanttChartValueTextRepresentation;
interface XMLCanonicalizationType {
}
interface DataLock {
	Add(... params): DataLockItem;
	Добавить(... params): DataLockItem;
	Lock(): void;
	Заблокировать(): void;
	Count(): number;
	Количество(): number;
	Get(... params): DataLockItem;
	Получить(... params): DataLockItem;
}
declare type БлокировкаДанных = DataLock;
interface EnumDataAnalysisNumericValueUseType {
	AsNumeric;
	КакЧисло;
	AsBoolean;
	КакБулево;
}
declare type ПеречислениеТипИспользованияЧисловыхЗначенийАнализаДанных = EnumDataAnalysisNumericValueUseType;
interface FormatStringWizard {
	Text: string;
	Текст: string;
	AvailableTypes: TypeDescription;
	ДоступныеТипы: TypeDescription;
	DoModal(): boolean;
	ОткрытьМодально(): boolean;
	Show(... params): void;
	Показать(... params): void;
}
declare type КонструкторФорматнойСтроки = FormatStringWizard;
interface AppearanceSettingsSettingControl {
	Name: string;
	Имя: string;
	Enabled: boolean;
	Доступность: boolean;
}
interface AppearanceSettingSettings {
	Add(... params): AppearanceSettingsSettingControl;
	Добавить(... params): AppearanceSettingsSettingControl;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): AppearanceSettingsSettingControl;
	Найти(... params): AppearanceSettingsSettingControl;
	Get(... params);
	Получить(... params);
}
interface DataChangeType {
}
interface TitleLocation {
}
interface DataCompositionLengthUnit {
}
interface UseMenuMode {
}
interface EnumUseMenuMode {
	DontUse;
	НеИспользовать;
	Use;
	Использовать;
	UseExtra;
	ИспользоватьДополнительно;
}
declare type ПеречислениеИспользованиеРежимаМеню = EnumUseMenuMode;
interface DataCompositionAppearanceTemplateAreaItem {
	Level: number;
	Уровень: number;
	Appearance: DataCompositionAppearance;
	Оформление: DataCompositionAppearance;
}
interface EnumDataCompositionAccountingBalanceType {
	None;
	Нет;
	Debit;
	Дебет;
	Credit;
	Кредит;
}
declare type ПеречислениеТипБухгалтерскогоОстаткаКомпоновкиДанных = EnumDataCompositionAccountingBalanceType;
interface BoundaryType {
}
interface Boundary {
	Value;
	Значение;
	BoundaryType: BoundaryType;
	ВидГраницы: BoundaryType;
}
declare type Граница = Boundary;
interface EnumConnectorLineType {
	None;
	НетЛинии;
	Solid;
	Сплошная;
	Dashed;
	Пунктир;
	Dotted;
	Точечная;
	DashDotted;
	ПунктирТочка;
	DashDottedDotted;
	ПунктирТочкаТочка;
}
declare type ПеречислениеТипСоединительнойЛинии = EnumConnectorLineType;
interface Iterator {
}
interface Geofence {
	ID: string;
	Идентификатор: string;
	Data;
	Данные;
	Presentation: string;
	Представление: string;
	Coordinates: GeographicCoordinates;
	Координаты: GeographicCoordinates;
	Radius: number;
	Радиус: number;
}
declare type Геозона = Geofence;
interface DOMStringList {
	Count(): number;
	Количество(): number;
	Item(... params): string;
	Элемент(... params): string;
	Contains(... params): boolean;
	Содержит(... params): boolean;
}
interface EnumDataCompositionResultNestedItemsLayout {
	Horizontally;
	Горизонтально;
	Vertically;
	Вертикально;
}
declare type ПеречислениеРасположениеВложенныхЭлементовРезультатаКомпоновкиДанных = EnumDataCompositionResultNestedItemsLayout;
interface SpreadsheetDocumentValuesReadingMode {
}
interface GanttChartLegendArea {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	Scrolling: boolean;
	Прокрутка: boolean;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
}
interface GanttChartBackgroundInterval {
	Begin: Date;
	Начало: Date;
	End: Date;
	Конец: Date;
	Color: Color;
	Цвет: Color;
}
interface GanttChartBackgroundIntervalCollection {
	Add(... params): GanttChartBackgroundInterval;
	Добавить(... params): GanttChartBackgroundInterval;
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface EnumFoldersAndItemsUse {
	Items;
	Элементы;
	Folders;
	Группы;
	FoldersAndItems;
	ГруппыИЭлементы;
}
declare type ПеречислениеИспользованиеГруппИЭлементов = EnumFoldersAndItemsUse;
interface StringEncodingMethod {
}
interface TelephonyTools {
	CallLogSupported(): boolean;
	ПоддерживаетсяЖурналЗвонков(): boolean;
	NumberDialingSupported(... params): boolean;
	ПоддерживаетсяНаборНомера(... params): boolean;
	SMSSendingSupported(... params): boolean;
	ПоддерживаетсяОтправкаSMS(... params): boolean;
	MMSSendingSupported(... params): boolean;
	ПоддерживаетсяОтправкаMMS(... params): boolean;
	SMSReceivingSupported(): boolean;
	ПоддерживаетсяПриемSMS(): boolean;
	DialNumber(... params): void;
	НабратьНомер(... params): void;
	GetCallLog(): CallLog;
	ПолучитьЖурналЗвонков(): CallLog;
	SendSMS(... params): void;
	ПослатьSMS(... params): void;
	AttachSMSMessageHandler(... params): void;
	ПодключитьОбработчикSMSСообщений(... params): void;
	DetachSMSMessageHandler(... params): void;
	ОтключитьОбработчикSMSСообщений(... params): void;
	CallsHandlingSupported(): void;
	ПоддерживаетсяОбработкаЗвонков(): void;
	AttachCallsHandler(... params): void;
	ПодключитьОбработчикЗвонков(... params): void;
	DetachCallsHandler(... params): void;
	ОтключитьОбработчикЗвонков(... params): void;
}
interface AutoTimeMode {
}
interface EnumCommandBarButtonRepresentation {
	Auto;
	Авто;
	Text;
	Надпись;
	Picture;
	Картинка;
	PictureText;
	НадписьКартинка;
}
declare type ПеречислениеОтображениеКнопкиКоманднойПанели = EnumCommandBarButtonRepresentation;
interface EnumAutoTimeMode {
	DontUse;
	НеИспользовать;
	Last;
	Последним;
	First;
	Первым;
	CurrentOrLast;
	ТекущееИлиПоследним;
	CurrentOrFirst;
	ТекущееИлиПервым;
}
declare type ПеречислениеРежимАвтоВремя = EnumAutoTimeMode;
interface TableBoxRowSelectionMode {
}
interface EnumDataAnalysisDistanceMetricType {
	SquaredEuclidean;
	ЕвклидоваМетрикаВКвадрате;
	Euclidean;
	ЕвклидоваМетрика;
	CityBlock;
	МетрикаГорода;
	Maximum;
	МетрикаДоминирования;
}
declare type ПеречислениеТипМерыРасстоянияАнализаДанных = EnumDataAnalysisDistanceMetricType;
interface EnumTableBoxRowSelectionMode {
	Cell;
	Ячейка;
	Row;
	Строка;
}
declare type ПеречислениеРежимВыделенияСтрокиТабличногоПоля = EnumTableBoxRowSelectionMode;
interface TableBoxSelectionMode {
}
interface EnumSpreadsheetDocumentGroupHeaderPlacement {
	Auto;
	Авто;
	Begin;
	Начало;
	End;
	Конец;
}
declare type ПеречислениеРасположениеЗаголовкаГруппировкиТабличногоДокумента = EnumSpreadsheetDocumentGroupHeaderPlacement;
interface MobileDeviceApplicationRunAdditionalDataItem {
	Key: string;
	Ключ: string;
	Value;
	Значение;
	TypeName: string;
	ИмяТипа: string;
}
declare type ЭлементДополнительныхДанныхЗапускаПриложенияМобильногоУстройства = MobileDeviceApplicationRunAdditionalDataItem;
interface EnumTableBoxSelectionMode {
	SingleLine;
	Одиночный;
	MultiLine;
	Множественный;
}
declare type ПеречислениеРежимВыделенияТабличногоПоля = EnumTableBoxSelectionMode;
interface TableBoxRowInputMode {
}
interface GeographicalSchemaMarkerType {
}
interface GeographicalSchemaPointObjectDrawingType {
}
interface GeographicalSchemaObjectMultiPoint {
	Details;
	Расшифровка;
	ToolTip: string;
	Подсказка: string;
	ShowData: boolean;
	ОтображатьДанные: boolean;
	Visible: boolean;
	Видимость: boolean;
	Value;
	Значение;
	Layer: GeographicalSchemaLayer;
	Слой: GeographicalSchemaLayer;
	BoundaryBox: GeographicalSchemaRectangle;
	ОграничивающийПрямоугольник: GeographicalSchemaRectangle;
	Points;
	Точки;
	Color: Color;
	Цвет: Color;
	Char: string;
	Символ: string;
	CharacterFont: Font;
	ШрифтСимвола: Font;
	Picture: Picture;
	Картинка: Picture;
	ReaperPointPosition: PaintingReferencePointPosition;
	ПоложениеОпорнойТочки: PaintingReferencePointPosition;
	Marker: GeographicalSchemaMarkerType;
	Маркер: GeographicalSchemaMarkerType;
	ShowMode: GeographicalSchemaPointObjectDrawingType;
	ТипОтрисовки: GeographicalSchemaPointObjectDrawingType;
}
interface DataCompositionDetailsID {
}
interface DataCompositionGroupDetailsItem {
	ID: DataCompositionDetailsID;
	Идентификатор: DataCompositionDetailsID;
	Group: string;
	Группировка: string;
	GetParents(): ArrayV8;
	ПолучитьРодителей(): ArrayV8;
}
interface EnumTableBoxRowInputMode {
	EndOfList;
	ВКонецСписка;
	EndOfWindow;
	ВКонецОкна;
	AfterCurrentRow;
	ПослеТекущейСтроки;
	BeforeCurrentRow;
	ПередТекущейСтрокой;
}
declare type ПеречислениеРежимВводаСтрокТабличногоПоля = EnumTableBoxRowInputMode;
interface EnumShowTabs {
	DontUse;
	НеИспользовать;
	Top;
	Сверху;
	TopScrolling;
	СверхуСПрокруткой;
	TopMultiLine;
	СверхуМногострочный;
	TopMultilineTransposition;
	СверхуМногострочныйСПерестановкой;
	Bottom;
	Снизу;
	BottomScrolling;
	СнизуСПрокруткой;
	BottomMultiLine;
	СнизуМногострочный;
	BottomMultilineTransposition;
	СнизуМногострочныйСПерестановкой;
	LeftVertical;
	СлеваВертикально;
	LeftHorizontal;
	СлеваГоризонтально;
	RightVertical;
	СправаВертикально;
	RightHorizontal;
	СправаГоризонтально;
}
declare type ПеречислениеОтображениеЗакладок = EnumShowTabs;
interface EnumGanttChartVerticalStretch {
	None;
	НеРастягивать;
	StretchRows;
	РастягиватьСтроки;
	StretchRowsAndData;
	РастягиватьСтрокиИДанные;
}
declare type ПеречислениеРастягиваниеПоВертикалиДиаграммыГанта = EnumGanttChartVerticalStretch;
interface TrackBarMarkingAppearance {
}
interface ChildFormItemsGroup {
}
interface AppearanceAreasSettingControl {
	Name: string;
	Имя: string;
	Enabled: boolean;
	Доступность: boolean;
	DataPath;
	ПутьКДанным;
}
interface AppearanceAreaSetting {
	Add(... params): AppearanceAreasSettingControl;
	Добавить(... params): AppearanceAreasSettingControl;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): AppearanceAreasSettingControl;
	Найти(... params): AppearanceAreasSettingControl;
	Get(... params);
	Получить(... params);
}
interface HTMLTableCaptionElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Align: string;
	Выравнивание: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface AggregatesInformation {
	BuildDate;
	ДатаПостроения;
	SizeLimit;
	ОграничениеРазмера;
	Size;
	Размер;
	Effect;
	Эффект;
	Aggregates;
	Агрегаты;
}
declare type ИнформацияОбАгрегатах = AggregatesInformation;
interface QueryBuilderDimension {
	Name: string;
	Имя: string;
	DimensionType: QueryBuilderDimensionType;
	ТипИзмерения: QueryBuilderDimensionType;
	DataPath: string;
	ПутьКДанным: string;
	Presentation: string;
	Представление: string;
}
interface QueryBuilderDimensions {
	Add(... params): QueryBuilderDimension;
	Добавить(... params): QueryBuilderDimension;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): QueryBuilderDimension;
	Найти(... params): QueryBuilderDimension;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): QueryBuilderDimension;
	Вставить(... params): QueryBuilderDimension;
	Get(... params): QueryBuilderDimension;
	Получить(... params): QueryBuilderDimension;
}
interface FormattedDocumentItemType {
}
interface DataBaseConfigurationUpdateExecutionInformationItem {
	ItemType: EnumDataBaseConfigurationUpdateExecutionInformationItemType;
	ТипЭлемента: EnumDataBaseConfigurationUpdateExecutionInformationItemType;
	Description: string;
	Описание: string;
}
interface EnumDataCompositionSettingsViewMode {
	All;
	Все;
	QuickAccess;
	БыстрыйДоступ;
}
declare type ПеречислениеРежимОтображенияНастроекКомпоновкиДанных = EnumDataCompositionSettingsViewMode;
interface DataAnalysisAssociationRulesOrderType {
}
interface DataCompositionGroupProcessingData {
	Data: ValueTable;
	Данные: ValueTable;
	CurrentItem: ValueTableRow;
	ТекущийЭлемент: ValueTableRow;
	ProcessingTempData: Structure;
	ВременныеДанныеОбработки: Structure;
}
interface DataCompositionAreaTemplateValueCollection {
	Cells: DataCompositionAreaTemplateValueCollectionCells;
	Ячейки: DataCompositionAreaTemplateValueCollectionCells;
}
declare type МакетКоллекцииЗначенийОбластиКомпоновкиДанных = DataCompositionAreaTemplateValueCollection;
interface StandardAttributeDescriptions {
	Count();
	Количество();
}
interface FileDialogMode {
}
interface TestedCommandInterfaceButton {
	TitleText: string;
	ТекстЗаголовка: string;
	Name: string;
	Имя: string;
	URL: string;
	НавигационнаяСсылка: string;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
	GetToolTipText(): string;
	ПолучитьТекстПодсказки(): string;
	CurrentVisible(): boolean;
	ТекущаяВидимость(): boolean;
	CurrentEnable(): boolean;
	ТекущаяДоступность(): boolean;
	CurrentReadOnly(): boolean;
	ТекущееТолькоПросмотр(): boolean;
	GetContextMenu(): TestedFormGroup;
	ПолучитьКонтекстноеМеню(): TestedFormGroup;
	GetCommandBar(): TestedFormGroup;
	ПолучитьКоманднуюПанель(): TestedFormGroup;
	Click(): void;
	Нажать(): void;
	GetLinkedWindow(): TestedClientApplicationWindow;
	ПолучитьСвязанноеОкно(): TestedClientApplicationWindow;
}
interface XSXPathVariety {
}
interface EnumDataLockControlMode {
	Automatic;
	Автоматический;
	Managed;
	Управляемый;
}
declare type ПеречислениеРежимУправленияБлокировкойДанных = EnumDataLockControlMode;
interface HTMLTableColElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Align: string;
	Выравнивание: string;
	Span: number;
	Диапазон: number;
	VAlign: string;
	ВертикальноеПоложение: string;
	Width: string;
	Ширина: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface LinkedValueChangeMode {
}
interface FormattedDocumentRange {
	BeginBookmark: FormattedDocumentBookmark;
	ЗакладкаНачала: FormattedDocumentBookmark;
	EndBookmark: FormattedDocumentBookmark;
	ЗакладкаКонца: FormattedDocumentBookmark;
}
interface FormattedDocument {
	Items: FormattedDocumentItemCollection;
	Элементы: FormattedDocumentItemCollection;
	GetBeginBookmark(): FormattedDocumentBookmark;
	ПолучитьЗакладкуНачала(): FormattedDocumentBookmark;
	GetEndBookmark(): FormattedDocumentBookmark;
	ПолучитьЗакладкуКонца(): FormattedDocumentBookmark;
	GetPositionBookmark(... params): FormattedDocumentBookmark;
	ПолучитьЗакладкуПоПозиции(... params): FormattedDocumentBookmark;
	GetBookmarkPosition(... params): number;
	ПолучитьПозициюПоЗакладке(... params): number;
	Insert(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture;
	Вставить(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture;
	Add(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture;
	Добавить(... params): FormattedDocumentText | FormattedDocumentLinefeed | FormattedDocumentPicture;
	Delete(... params): void;
	Удалить(... params): void;
	GetText(... params): string;
	ПолучитьТекст(... params): string;
	Write(... params): void;
	Записать(... params): void;
	BeginWriting(... params): void;
	НачатьЗапись(... params): void;
	GetHTML(... params): void;
	ПолучитьHTML(... params): void;
	SetHTML(... params): void;
	УстановитьHTML(... params): void;
	GetFormattedString();
	ПолучитьФорматированнуюСтроку();
	SetFormattedString(... params): void;
	УстановитьФорматированнуюСтроку(... params): void;
	GenerateItems(... params): ArrayV8;
	СформироватьЭлементы(... params): ArrayV8;
	GetItems(... params): ArrayV8;
	ПолучитьЭлементы(... params): ArrayV8;
	FindText(... params): FormattedDocumentRange;
	НайтиТекст(... params): FormattedDocumentRange;
}
declare type ФорматированныйДокумент = FormattedDocument;
interface HTMLWriter {
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	Close();
	Закрыть();
	SetString(): void;
	УстановитьСтроку(): void;
	OpenStream(... params): void;
	ОткрытьПоток(... params): void;
}
declare type ЗаписьHTML = HTMLWriter;
interface GraphicalSchemaItemJoin {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Border;
	Рамка;
	Value;
	Значение;
}
interface GaugeChartValuesScaleLabelsLocation {
}
interface EventLogLevel {
}
interface WSParameterDirection {
}
interface GanttChartVerticalStretch {
}
interface ReportVisualizer {
	PutDetailRecords;
	ВыводитьДетальныеЗаписи;
	AutoDetailRecords;
	АвтоДетальныеЗаписи;
	DetailRecordsTemplate;
	МакетДетальныхЗаписей;
	PutReportHeader;
	ВыводитьЗаголовокОтчета;
	ReportHeaderTemplate;
	МакетЗаголовкаОтчета;
	PutReportFooter;
	ВыводитьПодвалОтчета;
	ReportFooterTemplate;
	МакетПодвалаОтчета;
	PutTableHeader;
	ВыводитьШапкуТаблицы;
	TableHeaderTemplate;
	МакетШапкиТаблицы;
	PutTableFooter;
	ВыводитьПодвалТаблицы;
	TableFooterTemplate;
	МакетПодвалаТаблицы;
	DetailFillType;
	ЗаполнениеРасшифровки;
	PutOveralls;
	ВыводитьОбщиеИтоги;
	OverallsTemplate;
	МакетОбщихИтогов;
	DimensionsPlacementOnRows;
	РазмещениеИзмеренийВСтроках;
	DimensionAttributePlacementInRows;
	РазмещениеРеквизитовИзмеренийВСтроках;
	DimensionsPlacementOnColumns;
	РазмещениеИзмеренийВКолонках;
	DimensionAttributePlacementInColumns;
	РазмещениеРеквизитовИзмеренийВКолонках;
	AppearanceTemplate;
	МакетОформления;
	TotalsPlacementOnRows;
	РазмещениеИтоговВСтроках;
	TotalsPlacementOnColumns;
	РазмещениеИтоговВКолонках;
	HeaderText;
	ТекстЗаголовка;
	ShowStatus;
	ОтображатьСостояние;
	ProcessUserInterruption;
	ОбрабатыватьПрерываниеПользователя;
}
interface TextEncoding {
}
interface ClientApplicationInterfaceContentSettingsItem {
	Name: string;
	Имя: string;
}
declare type ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения = ClientApplicationInterfaceContentSettingsItem;
interface ClientApplicationInterfaceContentSettingsGroup {
	Count(): number;
	Количество(): number;
	Insert(... params): void;
	Вставить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Add(... params): number;
	Добавить(... params): number;
	Get(... params): ClientApplicationInterfaceContentSettingsGroup | ClientApplicationInterfaceContentSettingsItem;
	Получить(... params): ClientApplicationInterfaceContentSettingsGroup | ClientApplicationInterfaceContentSettingsItem;
	IndexOf(... params): number;
	Индекс(... params): number;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
}
declare type ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения = ClientApplicationInterfaceContentSettingsGroup;
interface ClientApplicationInterfaceContentSettings {
	Left: ClientApplicationInterfaceContentSettingsGroup;
	Лево: ClientApplicationInterfaceContentSettingsGroup;
	Top: ClientApplicationInterfaceContentSettingsGroup;
	Верх: ClientApplicationInterfaceContentSettingsGroup;
	Right: ClientApplicationInterfaceContentSettingsGroup;
	Право: ClientApplicationInterfaceContentSettingsGroup;
	Bottom: ClientApplicationInterfaceContentSettingsGroup;
	Низ: ClientApplicationInterfaceContentSettingsGroup;
}
declare type НастройкиСоставаИнтерфейсаКлиентскогоПриложения = ClientApplicationInterfaceContentSettings;
interface ClientApplicationInterfaceSettings {
	GetContent(): ClientApplicationInterfaceContentSettings;
	ПолучитьСостав(): ClientApplicationInterfaceContentSettings;
	SetContent(... params): void;
	УстановитьСостав(... params): void;
}
declare type НастройкиИнтерфейсаКлиентскогоПриложения = ClientApplicationInterfaceSettings;
interface ColumnsGroup {
}
interface FormColumnGroup {
	Group: ColumnsGroup;
	Группировка: ColumnsGroup;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	ShowInHeader: boolean;
	ОтображатьВШапке: boolean;
	HeaderHorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложениеВШапке: ItemHorizontalLocation;
	HeaderPicture: Picture;
	КартинкаШапки: Picture;
	TitleBackColor: Color;
	ЦветФонаЗаголовка: Color;
	HeaderDataPath: string;
	ПутьКДаннымШапки: string;
	HeaderFormat: string;
	ФорматШапки: string;
	FixingInTable: FixingInTable;
	ФиксацияВТаблице: FixingInTable;
}
interface EnumDocumentPostingMode {
	Regular;
	Неоперативный;
	RealTime;
	Оперативный;
}
declare type ПеречислениеРежимПроведенияДокумента = EnumDocumentPostingMode;
interface EnumTelephonyToolsCallEventVariant {
	StartIncomingRinging;
	НачалоСигналаВходящего;
	StartIncoming;
	НачалоВходящего;
	StartOutgoing;
	НачалоИсходящего;
	EndIncoming;
	ЗавершениеВходящего;
	EndOutgoing;
	ЗавершениеИсходящего;
}
declare type ПеречислениеВариантСобытияЗвонкаСредствТелефонии = EnumTelephonyToolsCallEventVariant;
interface DataCompositionResourcesPlacement {
}
interface EnumQuerySchemaJoinType {
	Inner;
	Внутреннее;
	LeftOuter;
	ЛевоеВнешнее;
	RightOuter;
	ПравоеВнешнее;
	FullOuter;
	ПолноеВнешнее;
}
declare type ПеречислениеТипСоединенияСхемыЗапроса = EnumQuerySchemaJoinType;
interface EnumRefreshRequestMethod {
	None;
	Нет;
	PullFromTop;
	ПотянутьСверху;
	PullFromBottom;
	ПотянутьСнизу;
	PullFromTopOrBottom;
	ПотянутьСверхуИлиСнизу;
}
declare type ПеречислениеСпособЗапросаОбновления = EnumRefreshRequestMethod;
interface ClientConnectionSpeed {
}
interface ClientApplicationFormScaleVariant {
}
interface ClientSettings {
	ClientConnectionSpeed: ClientConnectionSpeed;
	СкоростьКлиентскогоСоединения: ClientConnectionSpeed;
	ApplicationFormsOpenningMode: ApplicationFormsOpenningMode;
	РежимОткрытияФормПриложения: ApplicationFormsOpenningMode;
	ShowSectionsPanel: boolean;
	ОтображатьПанельРазделов: boolean;
	ShowNavigationAndActionsPanels: boolean;
	ОтображатьПанелиНавигацииИДействий: boolean;
	ClientApplicationInterfaceVariant: ClientApplicationInterfaceVariant;
	ВариантИнтерфейсаКлиентскогоПриложения: ClientApplicationInterfaceVariant;
	ClientApplicationFormScaleVariant: ClientApplicationFormScaleVariant;
	ВариантМасштабаФормКлиентскогоПриложения: ClientApplicationFormScaleVariant;
}
declare type НастройкиКлиентскогоПриложения = ClientSettings;
interface EnumDataCompositionResultBeginItemType {
	None;
	Нет;
	Table;
	Таблица;
	Chart;
	Диаграмма;
}
declare type ПеречислениеТипНачалаЭлементаРезультатаКомпоновкиДанных = EnumDataCompositionResultBeginItemType;
interface DendrogramScaleKeeping {
}
interface DataAnalysisColumnTypeAssociationRules {
}
interface NodeSet {
	AutoFill: boolean;
	АвтоЗаполнение: boolean;
	Count();
	Количество();
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Contains(... params);
	Содержит(... params);
	Fill(): void;
	Заполнить(): void;
}
interface QueryWizard {
	Text: string;
	Текст: string;
	AutoAppendPresentations: boolean;
	АвтоДобавлениеПредставлений: boolean;
	DataCompositionMode: boolean;
	РежимКомпоновкиДанных: boolean;
	DoModal(): boolean;
	ОткрытьМодально(): boolean;
	Show(... params): void;
	Показать(... params): void;
}
declare type КонструкторЗапроса = QueryWizard;
interface CryptoCertificate {
	Version: string;
	Версия: string;
	SerialNumber: BinaryData;
	СерийныйНомер: BinaryData;
	Issuer: FixedStructure;
	Издатель: FixedStructure;
	ValidFrom: Date;
	ДатаНачала: Date;
	ValidTo: Date;
	ДатаОкончания: Date;
	Subject: FixedStructure;
	Субъект: FixedStructure;
	PublicKey: BinaryData;
	ОткрытыйКлюч: BinaryData;
	Thumbprint: BinaryData;
	Отпечаток: BinaryData;
	UseToSign: boolean;
	ИспользоватьДляПодписи: boolean;
	UseToEncrypt: boolean;
	ИспользоватьДляШифрования: boolean;
	Extensions: FixedStructure;
	РасширенныеСвойства: FixedStructure;
	Unload(... params): BinaryData;
	Выгрузить(... params): BinaryData;
	BeginInitialization(... params): void;
	НачатьИнициализацию(... params): void;
	BeginUnloading(... params): void;
	НачатьВыгрузку(... params): void;
}
declare type СертификатКриптографии = CryptoCertificate;
interface VerticalFormScroll {
}
interface EnumChartSemitransparencyMode {
	DontUse;
	НеИспользовать;
	Use;
	Использовать;
	Auto;
	Авто;
	AutoCalculate;
	АвтоматическийРасчет;
}
declare type ПеречислениеРежимПолупрозрачностиДиаграммы = EnumChartSemitransparencyMode;
interface DataAnalysisSequentialPatternsResult {
	Parameters: DataAnalysisParameters;
	Параметры: DataAnalysisParameters;
	ColumnsSetting: DataAnalysisColumns;
	НастройкаКолонок: DataAnalysisColumns;
	ItemCount: number;
	КоличествоЭлементов: number;
	SequenceCount: number;
	КоличествоПоследовательностей: number;
	SequentialPatterns: FixedArray;
	ШаблоныПоследовательностей: FixedArray;
	CreatePredictionModel();
	СоздатьМодельПрогноза();
}
interface HTMLFrameSetElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Cols: string;
	Колонки: string;
	Rows: string;
	Строки: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface DataBaseConfigurationUpdateState {
}
interface EnumDataCompositionResourcesPlacementInChart {
	Series;
	Серии;
	Points;
	Точки;
	Auto;
	Авто;
}
declare type ПеречислениеРасположениеРесурсовВДиаграммеКомпоновкиДанных = EnumDataCompositionResourcesPlacementInChart;
interface ChoiceHistoryOnInput {
}
declare var AvailableParameters: DataCompositionAvailableParameters;
declare var ДоступныеПараметры: DataCompositionAvailableParameters;
declare var Items: DataCompositionParameterValueCollection;
declare var Элементы: DataCompositionParameterValueCollection;
declare function FindParameterValue(... params): DataCompositionParameterValue;
declare function НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
declare function SetParameterValue(... params): void;
declare function УстановитьЗначениеПараметра(... params): void;
interface DataAnalysisSequentialPatternsOrderType {
}
interface EnumBoundaryType {
	Including;
	Включая;
	Excluding;
	Исключая;
}
declare type ПеречислениеВидГраницы = EnumBoundaryType;
interface ProgressBar {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	MinValue: number;
	МинимальноеЗначение: number;
	MaxValue: number;
	МаксимальноеЗначение: number;
	Step: number;
	Шаг: number;
	ShowPercent: boolean;
	ОтображатьПроценты: boolean;
	ShowStyle: ProgressBarSmoothingMode;
	СтильОтображения: ProgressBarSmoothingMode;
	Orientation: Orientation;
	Ориентация: Orientation;
}
declare type Индикатор = ProgressBar;
interface ChartLegendArea {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	Scrolling: boolean;
	Прокрутка: boolean;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
}
interface InternetConnectionType {
}
interface InternetConnectionInformation {
	GetConnectionType(): InternetConnectionType;
	ПолучитьТипСоединения(): InternetConnectionType;
	GetExpectedConnectionSpeed(): number;
	ПолучитьОжидаемуюСкоростьСоединения(): number;
	GetRoamingUsage();
	ПолучитьИспользованиеРоуминга();
	AttachInternetConnectionChangeHandler(... params): void;
	ПодключитьОбработчикИзмененияИнтернетСоединения(... params): void;
	DetachInternetConnectionChangeHandler(... params): void;
	ОтключитьОбработчикИзмененияИнтернетСоединения(... params): void;
}
declare type ИнформацияОбИнтернетСоединении = InternetConnectionInformation;
interface HTMLInputElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Form: HTMLFormElement;
	Форма: HTMLFormElement;
	Accept: string;
	ПоддерживаемыеТипыСодержания: string;
	AccessKey: string;
	КлавишаДоступа: string;
	Align: string;
	Выравнивание: string;
	Alt: string;
	АльтернативныйТекст: string;
	Checked: boolean;
	ФлажокУстановлен: boolean;
	Disabled: boolean;
	Недоступен: boolean;
	MaxLength: number;
	МаксимальнаяДлина: number;
	Name: string;
	Имя: string;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	Size: number;
	Размер: number;
	Src: string;
	Источник: string;
	TabIndex: number;
	ПорядокОбхода: number;
	Type: string;
	Тип: string;
	UseMap: string;
	ИспользоватьКарту: string;
	Value: string;
	Значение: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface EnumChartLabelLocation {
	Edge;
	Край;
	Center;
	Центр;
	EdgeInside;
	КрайВнутри;
	EdgeAuto;
	КрайАвто;
	Auto;
	Авто;
	LeftBottom;
	ЛевоНиз;
	RightBottom;
	ПравоНиз;
	LeftTop;
	ЛевоВерх;
	RightTop;
	ПравоВерх;
	LeftAndTopSpecified;
	УказываетсяЛевоИВерх;
	EmptySpace;
	СвободноеМесто;
}
declare type ПеречислениеПоложениеПодписейКДиаграмме = EnumChartLabelLocation;
interface HTMLScriptElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Text: string;
	Текст: string;
	Event: string;
	Событие: string;
	Charset: string;
	НаборСимволов: string;
	Defer: boolean;
	ОтложитьИсполнение: boolean;
	Src: string;
	Источник: string;
	Type: string;
	Тип: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface ActualActionPeriodItem {
	StartDate: Date;
	ДатаНачала: Date;
	EndDate: Date;
	ДатаОкончания: Date;
}
interface PlannerItemSchedule {
	DayInMonth: number;
	ДеньВМесяце: number;
	WeekDayInMonth: number;
	ДеньНеделиВМесяце: number;
	WeekDays: ArrayV8;
	ДниНедели: ArrayV8;
	Months: ArrayV8;
	Месяцы: ArrayV8;
	WeeksPeriod: number;
	ПериодНедель: number;
	DaysRepeatPeriod: number;
	ПериодПовтораДней: number;
	RepeatCount: number;
	КоличествоПовторов: number;
	EndDate: Date;
	ДатаКонца: Date;
	MonthsPeriod: number;
	ПериодМесяцев: number;
	YearsPeriod: number;
	ПериодЛет: number;
}
declare type РасписаниеЭлементаПланировщика = PlannerItemSchedule;
interface PlannerItemCollection {
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): PlannerItem;
	Получить(... params): PlannerItem;
	Add(... params): PlannerItem;
	Добавить(... params): PlannerItem;
	Insert(... params): PlannerItem;
	Вставить(... params): PlannerItem;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): PlannerItem;
	Найти(... params): PlannerItem;
}
declare type КоллекцияЭлементовПланировщика = PlannerItemCollection;
interface PlannerDimensionItem {
	Value;
	Значение;
	Text: string;
	Текст: string;
	BorderColor: Color;
	ЦветРамки: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BackColor: Color;
	ЦветФона: Color;
	Font: Font;
	Шрифт: Font;
}
declare type ЭлементИзмеренияПланировщика = PlannerDimensionItem;
interface PlannerDimensionItemCollection {
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): PlannerDimensionItem;
	Получить(... params): PlannerDimensionItem;
	Add(... params): PlannerDimensionItem;
	Добавить(... params): PlannerDimensionItem;
	Insert(... params): PlannerDimensionItem;
	Вставить(... params): PlannerDimensionItem;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): PlannerDimensionItem;
	Найти(... params): PlannerDimensionItem;
}
declare type КоллекцияЭлементовИзмеренияПланировщика = PlannerDimensionItemCollection;
interface PlannerDimension {
	Items: PlannerDimensionItemCollection;
	Элементы: PlannerDimensionItemCollection;
	Value;
	Значение;
	Text: string;
	Текст: string;
	BorderColor: Color;
	ЦветРамки: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BackColor: Color;
	ЦветФона: Color;
	Font: Font;
	Шрифт: Font;
}
declare type ИзмерениеПланировщика = PlannerDimension;
interface PlannerDimensionCollection {
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): PlannerDimension;
	Получить(... params): PlannerDimension;
	Add(... params): PlannerDimension;
	Добавить(... params): PlannerDimension;
	Insert(... params): PlannerDimension;
	Вставить(... params): PlannerDimension;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): PlannerDimension;
	Найти(... params): PlannerDimension;
}
declare type КоллекцияИзмеренийПланировщика = PlannerDimensionCollection;
interface EnumTimeScaleUnitType {
	Second;
	Секунда;
	Minute;
	Минута;
	Hour;
	Час;
	Day;
	День;
	Week;
	Неделя;
	Month;
	Месяц;
	Quarter;
	Квартал;
	Year;
	Год;
}
declare type ПеречислениеТипЕдиницыШкалыВремени = EnumTimeScaleUnitType;
interface EnumPlannerItemsTimeRepresentation {
	DontDisplay;
	НеОтображать;
	BeginTime;
	ВремяНачала;
	BeginAndEndTime;
	ВремяНачалаИКонца;
}
declare type ПеречислениеОтображениеВремениЭлементовПланировщика = EnumPlannerItemsTimeRepresentation;
interface Planner {
	Items: PlannerItemCollection;
	Элементы: PlannerItemCollection;
	Dimensions: PlannerDimensionCollection;
	Измерения: PlannerDimensionCollection;
	TextColor: Color;
	ЦветТекста: Color;
	BackColor: Color;
	ЦветФона: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	LineColor: Color;
	ЦветЛиний: Color;
	Font: Font;
	Шрифт: Font;
	BeginOfRepresentationPeriod: Date;
	НачалоПериодаОтображения: Date;
	EndOfRepresentationPeriod: Date;
	КонецПериодаОтображения: Date;
	AlignItemBoundariesByTimeScale: boolean;
	ВыравниватьГраницыЭлементовПоШкалеВремени: boolean;
	ShowWrappedTimeScaleHeaders: boolean;
	ОтображатьПеренесенныеЗаголовкиШкалыВремени: boolean;
	WrappedTimeScaleHeaderFormat: string;
	ФорматПеренесенныхЗаголовковШкалыВремени: string;
	TimeScale: TimeScale;
	ШкалаВремени: TimeScale;
	PeriodicVariantUnit: EnumTimeScaleUnitType;
	ЕдиницаПериодическогоВарианта: EnumTimeScaleUnitType;
	PeriodicVariantRepetition: number;
	КратностьПериодическогоВарианта: number;
	TimeScaleWrapBeginIndent: number;
	ОтступСНачалаПереносаШкалыВремени: number;
	TimeScaleWrapEndIndent: number;
	ОтступСКонцаПереносаШкалыВремени: number;
	CurrentRepresentationPeriods: PlannerCurrentRepresentationPeriodCollection;
	ТекущиеПериодыОтображения: PlannerCurrentRepresentationPeriodCollection;
	ShowWrappedHeaders: boolean;
	ОтображатьПеренесенныеЗаголовки: boolean;
	BackgroundIntervals: PlannerBackgroundIntervalCollection;
	ИнтервалыФона: PlannerBackgroundIntervalCollection;
	ShowCurrentDate: boolean;
	ОтображатьТекущуюДату: boolean;
	ItemsTimeRepresentation: EnumPlannerItemsTimeRepresentation;
	ОтображениеВремениЭлементов: EnumPlannerItemsTimeRepresentation;
	Print(... params): void;
	Напечатать(... params): void;
}
declare type Планировщик = Planner;
interface PlannerItem {
	Value;
	Значение;
	Picture: Picture;
	Картинка: Picture;
	End: Date;
	Конец: Date;
	Begin: Date;
	Начало: Date;
	Schedule: PlannerItemSchedule;
	Расписание: PlannerItemSchedule;
	Parent: Planner;
	Родитель: Planner;
	Text: string;
	Текст: string;
	BorderColor: Color;
	ЦветРамки: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BackColor: Color;
	ЦветФона: Color;
	Font: Font;
	Шрифт: Font;
	DimensionValues: FixedMap;
	ЗначенияИзмерений: FixedMap;
	Deleted: boolean;
	Удаленный: boolean;
	ReplacementDate: Date;
	ДатаЗамещения: Date;
	ReplacementItems: PlannerReplacementItemCollection;
	ЗамещающиеЭлементы: PlannerReplacementItemCollection;
	ToolTip: string;
	Подсказка: string;
	Unload(): Structure;
	Выгрузить(): Structure;
	Load(... params): void;
	Загрузить(... params): void;
}
declare type ЭлементПланировщика = PlannerItem;
interface PlannerReplacementItemCollection {
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Get(... params): PlannerItem;
	Получить(... params): PlannerItem;
	Add(... params): PlannerItem;
	Добавить(... params): PlannerItem;
	Insert(... params): PlannerItem;
	Вставить(... params): PlannerItem;
	Delete(... params): void;
	Удалить(... params): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Clear(): void;
	Очистить(): void;
	Find(... params): PlannerItem;
	Найти(... params): PlannerItem;
}
declare type КоллекцияЗамещающихЭлементовПланировщика = PlannerReplacementItemCollection;
interface MobileDeviceApplicationRunAdditionalData {
	Add(... params): MobileDeviceApplicationRunAdditionalDataItem;
	Добавить(... params): MobileDeviceApplicationRunAdditionalDataItem;
	Get(... params): MobileDeviceApplicationRunAdditionalDataItem;
	Получить(... params): MobileDeviceApplicationRunAdditionalDataItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
}
declare type ДополнительныеДанныеЗапускаПриложенияМобильногоУстройства = MobileDeviceApplicationRunAdditionalData;
interface XSXPathDefinition {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Variety: XSXPathVariety;
	Вариант: XSXPathVariety;
	XPath: string;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ОпределенияXPathXS = XSXPathDefinition;
interface ZIPRestoreFilePathsMode {
}
interface DataCompositionFixation {
}
interface XSMaxExclusiveFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Fixed: boolean;
	Фиксированный: boolean;
	Value;
	Значение;
	Inclusive: boolean;
	Включающий: boolean;
	Exclusive: boolean;
	Исключающий: boolean;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетМаксимальногоИсключающегоЗначенияXS = XSMaxExclusiveFacet;
interface InternetConnection {
	ConnectionName: string;
	ИмяСоединения: string;
	IsConnected: boolean;
	Установлено: boolean;
	Connect(): void;
	Установить(): void;
	Disconnect(): void;
	Разорвать(): void;
}
declare type ИнтернетСоединение = InternetConnection;
interface EnumChartOrientation {
	SouthWest;
	ЮгЗапад;
	SouthEast;
	ЮгВосток;
}
declare type ПеречислениеОриентацияДиаграммы = EnumChartOrientation;
interface ConnectorLineType {
}
interface EnumDocumentWriteMode {
	Write;
	Запись;
	Posting;
	Проведение;
	UndoPosting;
	ОтменаПроведения;
}
declare type ПеречислениеРежимЗаписиДокумента = EnumDocumentWriteMode;
declare function Add();
declare function Добавить();
declare function Delete(... params): void;
declare function Удалить(... params): void;
declare function Clear(): void;
declare function Очистить(): void;
declare function Count(): number;
declare function Количество(): number;
declare function IndexOf(... params): number;
declare function Индекс(... params): number;
declare function Find(... params);
declare function Найти(... params);
declare function Move(... params): void;
declare function Сдвинуть(... params): void;
declare function Insert(... params);
declare function Вставить(... params);
declare function Get(... params);
declare function Получить(... params);
interface EnumSpreadsheetDocumentCellLineType {
	None;
	НетЛинии;
	Solid;
	Сплошная;
	Dotted;
	Точечная;
	Double;
	Двойная;
	ThinDashed;
	РедкийПунктир;
	ThickDashed;
	ЧастыйПунктир;
	LargeDashed;
	БольшойПунктир;
}
declare type ПеречислениеТипЛинииЯчейкиТабличногоДокумента = EnumSpreadsheetDocumentCellLineType;
interface EnumQuerySchemaAvailableTableParameterType {
	Value;
	Значение;
	Variant;
	Вариант;
	Condition;
	Условие;
	FieldList;
	СписокПолей;
	Array;
	Массив;
	Order;
	Порядок;
}
declare type ПеречислениеТипПараметраДоступнойТаблицыСхемыЗапроса = EnumQuerySchemaAvailableTableParameterType;
interface EnumGeographicalSchemaLegendItemShowScaleType {
	DontShow;
	НеОтображать;
	ShowByValues;
	ОтображатьПоЗначениям;
}
declare type ПеречислениеТипОтображенияШкалыЭлементаЛегендыГеографическойСхемы = EnumGeographicalSchemaLegendItemShowScaleType;
interface XPathNamespace {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	OwnerElement: DOMElement;
	ЭлементВладелец: DOMElement;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
}
interface GraphicalSchemaItemSplit {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Border;
	Рамка;
	Value;
	Значение;
}
interface EnumStandardAppearance {
	None;
	БезОформления;
	Stone;
	Камень;
	Classic;
	Классика;
	Classic2;
	Классика2;
	Classic3;
	Классика3;
	Spring;
	Весна;
	Summer;
	Лето;
	Autumn;
	Осень;
	Winter;
	Зима;
	Asphalt;
	Асфальт;
	Copper;
	Медь;
	Bronze;
	Бронза;
	Platinum;
	Платина;
	Silver;
	Серебро;
	Turquoise;
	Бирюза;
	Sand;
	Песок;
	Grass;
	Трава;
	Ice;
	Лед;
	Orange;
	Апельсин;
	Textile;
	Текстиль;
	Wood;
	Дерево;
	Interface;
	Интерфейс;
}
declare type ПеречислениеСтандартноеОформление = EnumStandardAppearance;
interface WSService {
	NamespaceURI;
	URIПространстваИмен;
	Name;
	Имя;
	Endpoints;
	ТочкиПодключения;
	Documentation;
	Документация;
}
interface GeographicalSchemaObjectPolyline {
	Details;
	Расшифровка;
	ToolTip: string;
	Подсказка: string;
	ShowData: boolean;
	ОтображатьДанные: boolean;
	Visible: boolean;
	Видимость: boolean;
	Value;
	Значение;
	Layer: GeographicalSchemaLayer;
	Слой: GeographicalSchemaLayer;
	BoundaryBox: GeographicalSchemaRectangle;
	ОграничивающийПрямоугольник: GeographicalSchemaRectangle;
	Segments;
	Сегменты;
	Color: Color;
	Цвет: Color;
	Line: Line;
	Линия: Line;
}
interface EnumDataCompositionSettingsItemViewMode {
	Normal;
	Обычный;
	QuickAccess;
	БыстрыйДоступ;
	Inaccessible;
	Недоступный;
	Auto;
	Авто;
}
declare type ПеречислениеРежимОтображенияЭлементаНастройкиКомпоновкиДанных = EnumDataCompositionSettingsItemViewMode;
interface DataAnalysisDecision {
	Decision: DataAnalysisObject;
	Решение: DataAnalysisObject;
	Probability: number;
	Вероятность: number;
	CaseCount: number;
	КоличествоСлучаев: number;
}
interface ContactDataEmailAddressType {
}
interface UserNotificationStatus {
}
interface RadarChartScaleType {
}
interface ChartPointsConnectionType {
}
interface RandomNumberGenerator {
	RandomNumber(... params): number;
	СлучайноеЧисло(... params): number;
}
declare type ГенераторСлучайныхЧисел = RandomNumberGenerator;
interface EnumColumnLocation {
	NewColumn;
	НоваяКолонка;
	OnNextRow;
	НаСледующейСтроке;
	SameColumn;
	ВТойЖеКолонке;
}
declare type ПеречислениеПоложениеКолонки = EnumColumnLocation;
interface ObjectDeletion {
	Ref;
	Ссылка;
	DataExchange;
	ОбменДанными;
	Write(): void;
	Записать(): void;
}
declare type УдалениеОбъекта = ObjectDeletion;
interface MobileDeviceApplicationRun {
	Action: string;
	Действие: string;
	Data: string;
	Данные: string;
	Package: string;
	Приложение: string;
	ClassName: string;
	ИмяКласса: string;
	Category: string;
	Категория: string;
	Type: string;
	Тип: string;
	AdditionalData: MobileDeviceApplicationRunAdditionalData;
	ДополнительныеДанные: MobileDeviceApplicationRunAdditionalData;
	Run(... params): boolean | number;
	Запустить(... params): boolean | number;
	RunningSupported(): boolean;
	ПоддерживаетсяЗапуск(): boolean;
}
declare type ЗапускПриложенияМобильногоУстройства = MobileDeviceApplicationRun;
interface QueryDataSourceColumns {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): QueryDataSourceColumn;
	Получить(... params): QueryDataSourceColumn;
}
interface DateSelectionMode {
}
interface CalendarBox {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	HolidayColor: Color;
	ЦветВыходныхДней: Color;
	SelectionBackColor;
	ЦветФонаВыделения;
	SelectionTextColor;
	ЦветТекстаВыделения;
	BeginOfDisplayPeriod: Date;
	НачалоПериодаОтображения: Date;
	EndOfDisplayPeriod: Date;
	КонецПериодаОтображения: Date;
	SelectionMode: DateSelectionMode;
	РежимВыделения: DateSelectionMode;
	ShowCurrentDate: boolean;
	ОтображатьТекущуюДату: boolean;
	CalendarNavigation: boolean;
	ПеремещениеПоКалендарю: boolean;
	SelectedDates: SelectedDateCollection;
	ВыделенныеДаты: SelectedDateCollection;
	CurrentDate: Date;
	ТекущаяДата: Date;
	EnableStartDrag;
	РазрешитьНачалоПеретаскивания;
	EnableDrag;
	РазрешитьПеретаскивание;
	Refresh(): void;
	Обновить(): void;
}
declare type ПолеКалендаря = CalendarBox;
interface FunctionalOptionRefSet {
}
interface EnumFormattedDocumentItemType {
	Text;
	Текст;
	Picture;
	Картинка;
	Linefeed;
	ПереводСтроки;
}
declare type ПеречислениеТипЭлементаФорматированногоДокумента = EnumFormattedDocumentItemType;
interface GraphicalSchemeElementSideType {
}
interface GraphicalSchemaItemDecorativeLine {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	LineColor: ColorType;
	ЦветЛинии: ColorType;
	Line;
	Линия;
	TextLocation: ConnectorTextLocation;
	ПоложениеТекста: ConnectorTextLocation;
	BeginArrow: ArrowStyle;
	СтрелкаНачала: ArrowStyle;
	EndArrow: ArrowStyle;
	СтрелкаКонца: ArrowStyle;
	EndItem;
	КонецЭлемент;
	EndSide: GraphicalSchemeElementSideType;
	КонецСторона: GraphicalSchemeElementSideType;
	EndCase;
	КонецВариант;
	EndLeft: number;
	КонецЛево: number;
	EndTop: number;
	КонецВерх: number;
	BeginItem;
	НачалоЭлемент;
	BeginSide: GraphicalSchemeElementSideType;
	НачалоСторона: GraphicalSchemeElementSideType;
	BeginCase;
	НачалоВариант;
	BeginLeft: number;
	НачалоЛево: number;
	BeginTop: number;
	НачалоВерх: number;
}
interface DataCompositionTextPlacementType {
}
interface EnumSpreadsheetDocumentTextPlacementType {
	Auto;
	Авто;
	Cut;
	Обрезать;
	Block;
	Забивать;
	Wrap;
	Переносить;
}
declare type ПеречислениеТипРазмещенияТекстаТабличногоДокумента = EnumSpreadsheetDocumentTextPlacementType;
interface CryptoCertificateStore {
	GetAll();
	ПолучитьВсе();
	FindBySubject(... params);
	НайтиПоСубъекту(... params);
	FindBySerialNumber(... params);
	НайтиПоСерийномуНомеру(... params);
	FindByThumbprint(... params);
	НайтиПоОтпечатку(... params);
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	BeginGettingAll(... params): void;
	НачатьПолучениеВсех(... params): void;
	BeginFindingBySubject(... params): void;
	НачатьПоискПоСубъекту(... params): void;
	BeginFindingBySerialNumber(... params): void;
	НачатьПоискПоСерийномуНомеру(... params): void;
	BeginFindingByThumbprint(... params): void;
	НачатьПоискПоОтпечатку(... params): void;
	BeginAdding(... params): void;
	НачатьДобавление(... params): void;
	BeginDeleting(... params): void;
	НачатьУдаление(... params): void;
}
interface CryptoManager {
	HashAlgorithm: string;
	АлгоритмХеширования: string;
	SignAlgorithm: string;
	АлгоритмПодписи: string;
	EncryptAlgorithm: string;
	АлгоритмШифрования: string;
	IncludeCertificatesInSignature;
	ВключениеСертификатовВПодпись;
	PrivateKeyAccessPassword: string;
	ПарольДоступаКЗакрытомуКлючу: string;
	Sign(... params): BinaryData;
	Подписать(... params): BinaryData;
	VerifySignature(... params): void;
	ПроверитьПодпись(... params): void;
	Encrypt(... params): BinaryData;
	Зашифровать(... params): BinaryData;
	Decrypt(... params): BinaryData;
	Расшифровать(... params): BinaryData;
	CheckCertificate(... params): void;
	ПроверитьСертификат(... params): void;
	GetCertificateStore(... params): CryptoCertificateStore;
	ПолучитьХранилищеСертификатов(... params): CryptoCertificateStore;
	GetCryptoModuleInformation(): CryptoModuleInformation;
	ПолучитьИнформациюМодуляКриптографии(): CryptoModuleInformation;
	GetCertificatesFromSignature(... params);
	ПолучитьСертификатыИзПодписи(... params);
	ShowCertificateList(... params): void;
	ПоказатьСписокСертификатов(... params): void;
	BeginInitialization(... params): void;
	НачатьИнициализацию(... params): void;
	BeginSigning(... params): void;
	НачатьПодписывание(... params): void;
	BeginVerifyingSignature(... params): void;
	НачатьПроверкуПодписи(... params): void;
	BeginEncrypting(... params): void;
	НачатьШифрование(... params): void;
	BeginDecrypting(... params): void;
	НачатьРасшифровку(... params): void;
	BeginCheckingCertificate(... params): void;
	НачатьПроверкуСертификата(... params): void;
	BeginGettingCertificateStore(... params): void;
	НачатьПолучениеХранилищаСертификатов(... params): void;
	BeginGettingCryptoModuleInformation(... params): void;
	НачатьПолучениеИнформацииМодуляКриптографии(... params): void;
	BeginGettingCertificatesFromSignature(... params): void;
	НачатьПолучениеСертификатовИзПодписи(... params): void;
}
declare type МенеджерКриптографии = CryptoManager;
interface AddressData {
	RawData: FixedMap;
	ИсходныеДанные: FixedMap;
	Presentation: string;
	Представление: string;
	City: string;
	Город: string;
	Country: string;
	Страна: string;
	State: string;
	Регион: string;
	ZipCode: string;
	Индекс: string;
	AddressLine1: string;
	СтрокаАдресаОсновная: string;
	AddressLine2: string;
	СтрокаАдресаДополнительная: string;
	AddressLine: string;
	СтрокаАдреса: string;
}
declare type ДанныеАдреса = AddressData;
interface ZipFileWriter {
	Open(... params): void;
	Открыть(... params): void;
	Add(... params): void;
	Добавить(... params): void;
	Write(): void;
	Записать(): void;
	GetBinaryData(... params);
	ПолучитьДвоичныеДанные(... params);
}
declare type ЗаписьZipФайла = ZipFileWriter;
interface EnumDataCompositionPeriodType {
	Main;
	Основной;
	Additional;
	Дополнительный;
}
declare type ПеречислениеТипПериодаКомпоновкиДанных = EnumDataCompositionPeriodType;
interface CommandExecuteParameters {
	Source;
	Источник;
	Window;
	Окно;
	Uniqueness;
	Уникальность;
	URL;
	НавигационнаяСсылка;
}
interface FontChooseDialog {
	Font: Font;
	Шрифт: Font;
	Choose(): boolean;
	Выбрать(): boolean;
	Show(... params): void;
	Показать(... params): void;
}
declare type ДиалогВыбораШрифта = FontChooseDialog;
interface FileNamesEncodingInZipFile {
}
interface AdBannerRepresentation {
}
interface ItemHeightControlVariant {
}
interface EnumQueryResultIteration {
	Linear;
	Прямой;
	ByGroups;
	ПоГруппировкам;
	ByGroupsWithHierarchy;
	ПоГруппировкамСИерархией;
}
declare type ПеречислениеОбходРезультатаЗапроса = EnumQueryResultIteration;
interface PanelPictureLocation {
}
interface FormCommandBarLabelLocation {
}
interface WSProxy {
	User;
	Пользователь;
	Password;
	Пароль;
	Definitions;
	Определение;
	Endpoint;
	ТочкаПодключения;
	XDTOFactory;
	ФабрикаXDTO;
	Timeout;
	Таймаут;
	SecureConnection;
	ЗащищенноеСоединение;
	Proxy;
	Прокси;
	UseOSAuthentication;
	ИспользоватьАутентификациюОС;
}
declare type WSПрокси = WSProxy;
interface EnumColumnSizeChange {
	Change;
	Изменять;
	DontChange;
	НеИзменять;
}
declare type ПеречислениеИзменениеРазмераКолонки = EnumColumnSizeChange;
interface TableBoxColumns {
}
interface ColumnSizeChange {
}
interface TableBoxColumn {
	Name: string;
	Имя: string;
	Width: number;
	Ширина: number;
	HeaderText: string;
	ТекстШапки: string;
	FooterText: string;
	ТекстПодвала: string;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	HeaderBackColor: Color;
	ЦветФонаШапки: Color;
	HeaderTextColor: Color;
	ЦветТекстаШапки: Color;
	FooterBackColor: Color;
	ЦветФонаПодвала: Color;
	FooterTextColor: Color;
	ЦветТекстаПодвала: Color;
	TextFont: Font;
	ШрифтТекста: Font;
	HeaderFont: Font;
	ШрифтШапки: Font;
	FooterFont: Font;
	ШрифтПодвала: Font;
	Enabled: boolean;
	Доступность: boolean;
	CheckBoxThreeState: boolean;
	ТриСостоянияФлажка: boolean;
	Location: ColumnLocation;
	Положение: ColumnLocation;
	Visible: boolean;
	Видимость: boolean;
	HeaderToolTip: string;
	ПодсказкаВШапке: string;
	HeaderPicture: Picture;
	КартинкаШапки: Picture;
	RowsPictures: Picture;
	КартинкиСтрок: Picture;
	FooterPicture: Picture;
	КартинкаПодвала: Picture;
	HeaderHorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложениеВШапке: HorizontalAlign;
	HorizontalAlignInColumn: HorizontalAlign;
	ГоризонтальноеПоложениеВКолонке: HorizontalAlign;
	FooterHorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложениеВПодвале: HorizontalAlign;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	ShowInHeader: boolean;
	ОтображатьВШапке: boolean;
	ShowInFooter: boolean;
	ОтображатьВПодвале: boolean;
	HeaderAdditionalPicture: Picture;
	ДополнительнаяКартинкаШапки: Picture;
	Control;
	ЭлементУправления;
	SizeChange: ColumnSizeChange;
	ИзменениеРазмера: ColumnSizeChange;
	AutoMarkIncomplete;
	АвтоОтметкаНезаполненного;
	MarkNegatives: boolean;
	ВыделятьОтрицательные: boolean;
	SkipOnInput: boolean;
	ПропускатьПриВводе: boolean;
	Format: string;
	Формат: string;
	ShowHierarchy: boolean;
	ОтображатьИерархию: boolean;
	ChangeVisible: boolean;
	ИзменятьВидимость: boolean;
	EditMode: ColumnEditMode;
	РежимРедактирования: ColumnEditMode;
	CellHeight: number;
	ВысотаЯчейки: number;
	AutoCellHeight: boolean;
	АвтоВысотаЯчейки: boolean;
	Hyperlink: boolean;
	Гиперссылка: boolean;
	ChangeSetting: boolean;
	ИзменятьНастройку: boolean;
	ChangePosition: boolean;
	ИзменятьПозицию: boolean;
	SetControl(... params): void;
	УстановитьЭлементУправления(... params): void;
}
interface TableBoxSelectedRows {
	Count();
	Количество();
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Get(... params);
	Получить(... params);
	Contains(... params);
	Содержит(... params);
}
interface TableBox {
	Enabled;
	Доступность;
	Transparent;
	ПрозрачныйФон;
	Font;
	Шрифт;
	Border;
	Рамка;
	BorderColor;
	ЦветРамки;
	BackColor;
	ЦветФона;
	TextColor;
	ЦветТекста;
	FieldBackColor;
	ЦветФонаПоля;
	FieldTextColor;
	ЦветТекстаПоля;
	ButtonBackColor;
	ЦветФонаКнопки;
	ButtonTextColor;
	ЦветТекстаКнопки;
	ToolTip;
	Подсказка;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	RowInputMode: TableBoxRowInputMode;
	РежимВводаСтрок: TableBoxRowInputMode;
	SelectionMode: TableBoxSelectionMode;
	РежимВыделения: TableBoxSelectionMode;
	Header: boolean;
	Шапка: boolean;
	Footer: boolean;
	Подвал: boolean;
	HeaderHeight: number;
	ВысотаШапки: number;
	FooterHeight: number;
	ВысотаПодвала: number;
	HorizontalLines: boolean;
	ГоризонтальныеЛинии: boolean;
	VerticalLines: boolean;
	ВертикальныеЛинии: boolean;
	FixedLeft: number;
	ФиксацияСлева: number;
	FixedRight: number;
	ФиксацияСправа: number;
	RowSelectionMode: TableBoxRowSelectionMode;
	РежимВыделенияСтроки: TableBoxRowSelectionMode;
	HeaderBackColor: Color;
	ЦветФонаШапки: Color;
	HeaderTextColor: Color;
	ЦветТекстаШапки: Color;
	FooterBackColor: Color;
	ЦветФонаПодвала: Color;
	FooterTextColor: Color;
	ЦветТекстаПодвала: Color;
	SelectionBackColor: Color;
	ЦветФонаВыделения: Color;
	SelectionTextColor: Color;
	ЦветТекстаВыделения: Color;
	AlternationRowBackColor: Color;
	ЦветФонаЧередованияСтрок: Color;
	UseAlternationRowColor: Color;
	ЧередованиеЦветовСтрок: Color;
	HeaderFont: Font;
	ШрифтШапки: Font;
	FooterFont: Font;
	ШрифтПодвала: Font;
	HorizontalScrollBar: ScrollBarUse;
	ГоризонтальнаяПолосаПрокрутки: ScrollBarUse;
	VerticalScrollBar: ScrollBarUse;
	ВертикальнаяПолосаПрокрутки: ScrollBarUse;
	AutoInsertNewRow: boolean;
	АвтоВводНовойСтроки: boolean;
	CurrentData;
	ТекущиеДанные;
	Columns: TableBoxColumns;
	Колонки: TableBoxColumns;
	CurrentColumn: TableBoxColumn;
	ТекущаяКолонка: TableBoxColumn;
	CurrentParent;
	ТекущийРодитель;
	CurrentRow;
	ТекущаяСтрока;
	SelectedRows: TableBoxSelectedRows;
	ВыделенныеСтроки: TableBoxSelectedRows;
	InitialListView: InitialListView;
	НачальноеОтображениеСписка: InitialListView;
	ChoiceMode: boolean;
	РежимВыбора: boolean;
	InitialTreeView: InitialTreeView;
	НачальноеОтображениеДерева: InitialTreeView;
	ChangeRowSet: boolean;
	ИзменятьСоставСтрок: boolean;
	EnableStartDrag: boolean;
	РазрешитьНачалоПеретаскивания: boolean;
	EnableDrag: boolean;
	РазрешитьПеретаскивание: boolean;
	ChangeSettingOfColumns: boolean;
	ИзменятьНастройкуКолонок: boolean;
	ChangePositionOfColumns: boolean;
	ИзменятьПозициюКолонок: boolean;
	Output: UseOutput;
	Вывод: UseOutput;
	AddRow(): void;
	ДобавитьСтроку(): void;
	ChangeRow(): void;
	ИзменитьСтроку(): void;
	CopyRow(): void;
	СкопироватьСтроку(): void;
	Expand(... params): void;
	Развернуть(... params): void;
	Collapse(... params): void;
	Свернуть(... params): void;
	Expanded(... params);
	Развернут(... params);
	CreateColumns(): void;
	СоздатьКолонки(): void;
	RowData(... params);
	ДанныеСтроки(... params);
	RefreshRows(... params): void;
	ОбновитьСтроки(... params): void;
	CheckRow(... params);
	ПроверитьСтроку(... params);
	EndEditRow(... params): void;
	ЗакончитьРедактированиеСтроки(... params): void;
	RowAppearance(... params);
	ОформлениеСтроки(... params);
}
declare type ТабличноеПоле = TableBox;
interface PositionInStream {
}
interface FormattedDocumentFileType {
}
interface UsualGroupBehavior {
}
interface EnumSpreadsheetDocumentCellAreaType {
	Table;
	Таблица;
	Rows;
	Строки;
	Columns;
	Колонки;
	Rectangle;
	Прямоугольник;
}
declare type ПеречислениеТипОбластиЯчеекТабличногоДокумента = EnumSpreadsheetDocumentCellAreaType;
interface LocationData {
	Date: Date;
	Дата: Date;
	Coordinates: GeographicCoordinates;
	Координаты: GeographicCoordinates;
	Heading: number;
	Направление: number;
	Speed: number;
	Скорость: number;
	HorizontalAccuracy: number;
	ГоризонтальнаяТочность: number;
	VerticalAccuracy: number;
	ВертикальнаяТочность: number;
}
interface DataAnalysisAssociationRulesResult {
	Parameters: DataAnalysisParameters;
	Параметры: DataAnalysisParameters;
	ColumnsSetting: DataAnalysisColumns;
	НастройкаКолонок: DataAnalysisColumns;
	ObjectCount: number;
	КоличествоОбъектов: number;
	AvgObjectSize: number;
	СреднийРазмерОбъекта: number;
	ItemCount: number;
	КоличествоЭлементов: number;
	Groups: FixedArray;
	Группы: FixedArray;
	Rules: FixedArray;
	Правила: FixedArray;
	UnloadRules(): ValueTree;
	ВыгрузитьПравила(): ValueTree;
	CreatePredictionModel(): ValueTable;
	СоздатьМодельПрогноза(): ValueTable;
}
interface CalendarAccount {
	AccountSource: string;
	ИсточникУчетнойЗаписи: string;
	ID: string;
	Идентификатор: string;
}
interface XSImport {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	SchemaLocation: string;
	РасположениеСхемы: string;
	ResolvedSchema: XMLSchema;
	РазрешеннаяСхема: XMLSchema;
	Namespace: string;
	ПространствоИмен: string;
	Prefix;
	Префикс;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ИмпортXS = XSImport;
interface LocalCalendarKey {
}
interface AccountCalendarData {
	CalendarData: CalendarData;
	ДанныеКалендаря: CalendarData;
	Account: CalendarAccount;
	УчетнаяЗапись: CalendarAccount;
	GlobalCalendarKey: string;
	ГлобальныйКлючКалендаря: string;
}
declare type ДанныеКалендаряУчетнойЗаписи = AccountCalendarData;
interface CalendarEventRecurrence {
}
interface CalendarEventData {
	Subject: string;
	Тема: string;
	Start: Date;
	Начало: Date;
	End: Date;
	Конец: Date;
	Location: string;
	Место: string;
	Description: string;
	Описание: string;
	AllDay: boolean;
	ВесьДень: boolean;
	Reminders: ArrayV8;
	Напоминания: ArrayV8;
	CalendarEventRecurrence: CalendarEventRecurrence;
	ПовторениеСобытияКалендаря: CalendarEventRecurrence;
	Organizer: string;
	Организатор: string;
	TimeZone: string;
	ЧасовойПояс: string;
	Attendees: ArrayV8;
	Участники: ArrayV8;
	RawData: Map;
	ИсходныеДанные: Map;
}
declare type ДанныеСобытияКалендаря = CalendarEventData;
interface AccountCalendarEventData {
	CalendarEventData: CalendarEventData;
	ДанныеСобытияКалендаря: CalendarEventData;
	Account: CalendarAccount;
	УчетнаяЗапись: CalendarAccount;
	GlobalCalendarKey: string;
	ГлобальныйКлючКалендаря: string;
	GlobalCalendarEventKey: string;
	ГлобальныйКлючСобытияКалендаря: string;
}
declare type ДанныеСобытияКалендаряУчетнойЗаписи = AccountCalendarEventData;
interface CalendarsManager {
	CalendarEditingSupported: ContactDataInstantMessagingAddressType;
	ПоддерживаетсяИзменениеКалендарей: ContactDataInstantMessagingAddressType;
	GetDefaultCalendar(): LocalCalendarKey;
	ПолучитьОсновнойКалендарь(): LocalCalendarKey;
	GetCalendarAccounts(): ArrayV8;
	ПолучитьУчетныеЗаписиКалендарей(): ArrayV8;
	GetLocalCalendarAccount(): CalendarAccount;
	ПолучитьЛокальнуюУчетнуюЗаписьКалендарей(): CalendarAccount;
	GetCalendar(... params): AccountCalendarData;
	ПолучитьКалендарь(... params): AccountCalendarData;
	FindCalendars(... params): ArrayV8;
	НайтиКалендари(... params): ArrayV8;
	AddCalendar(... params): LocalCalendarKey;
	ДобавитьКалендарь(... params): LocalCalendarKey;
	UpdateCalendar(... params): void;
	ИзменитьКалендарь(... params): void;
	DeleteCalendar(... params): void;
	УдалитьКалендарь(... params): void;
	GetEvent(... params): AccountCalendarEventData;
	ПолучитьСобытие(... params): AccountCalendarEventData;
	FindEvents(... params): ArrayV8;
	НайтиСобытия(... params): ArrayV8;
	AddEvent(... params): LocalCalendarEventKey;
	ДобавитьСобытие(... params): LocalCalendarEventKey;
	UpdateEvent(... params): void;
	ИзменитьСобытие(... params): void;
	DeleteEvent(... params): void;
	УдалитьСобытие(... params): void;
	GetEventCalendar(... params): LocalCalendarKey;
	ПолучитьКалендарьСобытия(... params): LocalCalendarKey;
	EventEditingSupported(... params): boolean;
	ПоддерживаетсяИзменениеСобытий(... params): boolean;
	GlobalCalendarsKeysSupported(): boolean;
	ПоддерживаютсяГлобальныеКлючиКалендарей(): boolean;
	GlobalEventsKeysSupported(): boolean;
	ПоддерживаютсяГлобальныеКлючиСобытий(): boolean;
	CalendarsAddingSupported(): boolean;
	ПоддерживаетсяДобавлениеКалендарей(): boolean;
}
declare type МенеджерКалендарей = CalendarsManager;
interface EnumGeographicalSchemaMarkerType {
	None;
	Нет;
	Pin;
	Кнопка;
	Darts;
	Дартс;
	LittleCircle;
	МаленькийКруг;
	BigCircle;
	БольшойКруг;
	LittleSquare;
	МаленькийКвадрат;
	BigSquare;
	БольшойКвадрат;
	LittleTriangle;
	МаленькийТреугольник;
	BigTriangle;
	БольшойТреугольник;
	QuestionMark;
	ЗнакВопроса;
	ExclamationPoint;
	ВосклицательныйЗнак;
}
declare type ПеречислениеТипМаркераГеографическойСхемы = EnumGeographicalSchemaMarkerType;
interface MetadataObjectPropertyValueCollection {
	Count(): number;
	Количество(): number;
	Contains(... params): boolean;
	Содержит(... params): boolean;
}
interface EnumPivotChartLabelsOrientation {
	AllLevelsHorizontal;
	ВсеУровниГоризонтально;
	AllLevelsVertical;
	ВсеУровниВертикально;
	TopLevelsVertical;
	ВерхниеУровниВертикально;
}
declare type ПеречислениеОриентацияМетокСводнойДиаграммы = EnumPivotChartLabelsOrientation;
interface DataAnalysisObjectProperty {
	Name: string;
	Имя: string;
	ComparisonType: ComparisonType;
	ВидСравнения: ComparisonType;
	Value;
	Значение;
	ValueFrom;
	ЗначениеС;
	ValueTo;
	ЗначениеПо;
}
interface EnumDataCompositionFixation {
	Auto;
	Авто;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеФиксацияКомпоновкиДанных = EnumDataCompositionFixation;
interface DataCompositionResultNestedItemsLayout {
}
interface SpellCheckingOnTextInput {
}
interface URLPresentation {
	URL: string;
	НавигационнаяСсылка: string;
	Text: string;
	Текст: string;
	Picture: string;
	Картинка: string;
}
interface ActiveX {
}
interface EnumDataCompositionParameterUse {
	Always;
	Всегда;
	Auto;
	Авто;
}
declare type ПеречислениеИспользованиеПараметраКомпоновкиДанных = EnumDataCompositionParameterUse;
interface DataAnalysisDistanceMetricType {
}
interface EnumCryptoCertificateCheckMode {
	IgnoreTimeValidity;
	ИгнорироватьВремяДействия;
	IgnoreSignatureValidity;
	ИгнорироватьДействительностьПодписи;
	IgnoreCertificateRevocationStatus;
	ИгнорироватьПроверкуВСпискеОтозванныхСертификатов;
	AllowTestCertificates;
	РазрешитьТестовыеСертификаты;
}
declare type ПеречислениеРежимПроверкиСертификатаКриптографии = EnumCryptoCertificateCheckMode;
interface DataCompositionTableOutputParameterValues {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
	GetIDByObject(... params): DataCompositionID;
	ПолучитьИдентификаторПоОбъекту(... params): DataCompositionID;
	GetObjectByID(... params): DataCompositionParameterValue;
	ПолучитьОбъектПоИдентификатору(... params): DataCompositionParameterValue;
}
interface FileOpenMode {
}
interface EnumFormPagesState {
	Titles;
	Заголовки;
	CurrentPage;
	ТекущаяСтраница;
	TitlesAndCurrentPage;
	ЗаголовкиИТекущаяСтраница;
}
declare type ПеречислениеСостояниеСтраницФормы = EnumFormPagesState;
interface JSONReader {
	CurrentValueType: JSONValueType;
	ТипТекущегоЗначения: JSONValueType;
	CurrentValue: boolean | string | number;
	ТекущееЗначение: boolean | string | number;
	CurrentLine: number;
	ТекущаяСтрока: number;
	CurrentPosition: number;
	ТекущаяПозиция: number;
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	SetString(... params): void;
	УстановитьСтроку(... params): void;
	Close();
	Закрыть();
	Skip(): boolean;
	Пропустить(): boolean;
	Read(): boolean;
	Прочитать(): boolean;
	OpenStream(... params): void;
	ОткрытьПоток(... params): void;
}
declare type ЧтениеJSON = JSONReader;
interface EnumGraphicalSchemaItemPictureLocation {
	Left;
	Лево;
	Top;
	Верх;
	Right;
	Право;
	Bottom;
	Низ;
	Center;
	Центр;
}
declare type ПеречислениеПоложениеКартинкиЭлементаГрафическойСхемы = EnumGraphicalSchemaItemPictureLocation;
interface GraphicalSchemaItemPictureLocation {
}
interface QueryBuilderField {
	Name: string;
	Имя: string;
	DataPath: string;
	ПутьКДанным: string;
	Presentation: string;
	Представление: string;
}
interface QueryBuilderFields {
	Add(... params): QueryBuilderField;
	Добавить(... params): QueryBuilderField;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): QueryBuilderField;
	Найти(... params): QueryBuilderField;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): QueryBuilderField;
	Вставить(... params): QueryBuilderField;
	Get(... params): QueryBuilderField;
	Получить(... params): QueryBuilderField;
}
interface EnumTotalPlacementType {
	Header;
	Заголовок;
	Footer;
	Подвал;
	FooterOnly;
	ТолькоПодвал;
	HeaderAndFooter;
	ЗаголовокИПодвал;
}
declare type ПеречислениеТипРазмещенияИтогов = EnumTotalPlacementType;
interface EnumSliceUse {
	DontUse;
	НеИспользовать;
	First;
	Первые;
	Last;
	Последние;
}
declare type ПеречислениеИспользованиеСреза = EnumSliceUse;
interface StandardBeginningDateVariant {
}
interface StandardBeginningDate {
	Variant: StandardBeginningDateVariant;
	Вариант: StandardBeginningDateVariant;
	Date: Date;
	Дата: Date;
}
declare type СтандартнаяДатаНачала = StandardBeginningDate;
interface EnumLinkedValueChangeMode {
	Clear;
	Очищать;
	DontChange;
	НеИзменять;
}
declare type ПеречислениеРежимИзмененияСвязанногоЗначения = EnumLinkedValueChangeMode;
interface RowGotoDirection {
}
interface PredictionModelDecisionTree {
	DataSource;
	ИсточникДанных;
	Columns: PredictionModelColumns;
	Колонки: PredictionModelColumns;
	InputColumnsSetting: PredictionModelInputColumnsSetting;
	НастройкаВходныхКолонок: PredictionModelInputColumnsSetting;
	ResultColumns;
	КолонкиРезультата;
	RootNodes: FixedArray;
	КорневыеУзлы: FixedArray;
	Execute(): ValueTable;
	Выполнить(): ValueTable;
}
interface ApplicationUsePurpose {
}
interface DataCompositionAreaTemplateChartAppearance {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
}
interface DataCompositionAreaTemplateChartTemplate {
	Appearance: DataCompositionAreaTemplateChartAppearance;
	Оформление: DataCompositionAreaTemplateChartAppearance;
}
interface DecisionTreeNode {
	Condition: DataAnalysisObject;
	Условие: DataAnalysisObject;
	Nodes: FixedArray;
	Узлы: FixedArray;
	Decision: DataAnalysisDecision;
	Решение: DataAnalysisDecision;
	AllDecisions: FixedArray;
	ВсеРешения: FixedArray;
	CaseCount: number;
	КоличествоСлучаев: number;
}
interface XSSubstitutionGroupExclusions {
}
interface PictureFormat {
}
interface ContactDataPhoneNumberType {
}
interface ContactDataRelationshipType {
}
interface ContactDataItem {
	DataType: ContactDataPhoneNumberType | ContactDataURLType | ContactDataEmailAddressType | ContactDataAddressType | string | ContactDataRelationshipType;
	ТипДанных: ContactDataPhoneNumberType | ContactDataURLType | ContactDataEmailAddressType | ContactDataAddressType | string | ContactDataRelationshipType;
	Value: AddressData | string | Date;
	Значение: AddressData | string | Date;
}
declare type ЭлементДанныхКонтакта = ContactDataItem;
interface EnumDataCompositionResourcesPlacement {
	Horizontally;
	Горизонтально;
	Vertically;
	Вертикально;
}
declare type ПеречислениеРасположениеРесурсовКомпоновкиДанных = EnumDataCompositionResourcesPlacement;
interface EnumAccumulationRegisterAggregatePeriodicity {
	Nonperiodical;
	Непериодический;
	Auto;
	Авто;
	Day;
	День;
	Month;
	Месяц;
	Quarter;
	Квартал;
	HalfYear;
	Полугодие;
	Year;
	Год;
}
declare type ПеречислениеПериодичностьАгрегатаРегистраНакопления = EnumAccumulationRegisterAggregatePeriodicity;
interface DataItemSend {
}
interface EnumFitPageMode {
	Auto;
	Авто;
	PageWidth;
	ПоШиринеСтраницы;
	Proportionally;
	Пропорционально;
}
declare type ПеречислениеРежимРазмещенияНаСтранице = EnumFitPageMode;
interface LocationRelativeToGeofence {
}
interface GraphicalSchemaItemActivity {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Border;
	Рамка;
	Value;
	Значение;
	Explanation: string;
	Пояснение: string;
	Group: boolean;
	Групповая: boolean;
}
interface GraphicalSchemaItemSwitch {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Border;
	Рамка;
	Value;
	Значение;
	Items;
	Элементы;
}
interface XSDocumentation {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Source;
	Источник;
	Language;
	Язык;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ДокументацияXS = XSDocumentation;
interface DataAnalysisAssociationRules {
}
interface ClusterizationMethod {
}
interface SelectionShowMode {
}
interface StatePresentation {
	Text: string;
	Текст: string;
	Picture: Picture;
	Картинка: Picture;
	Visible: boolean;
	Видимость: boolean;
	AdditionalShowMode: AdditionalShowMode;
	ДополнительныйРежимОтображения: AdditionalShowMode;
}
interface SpreadsheetDocumentPointerType {
}
interface FormSpreadsheetDocumentField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	ShowGrid: boolean;
	ОтображатьСетку: boolean;
	ShowHeaders: boolean;
	ОтображатьЗаголовки: boolean;
	VerticalScrollBar: boolean;
	ВертикальнаяПолосаПрокрутки: boolean;
	HorizontalScrollBar: boolean;
	ГоризонтальнаяПолосаПрокрутки: boolean;
	BlackAndWhiteView: boolean;
	ЧерноБелыйПросмотр: boolean;
	Protection: boolean;
	Защита: boolean;
	SelectionShowMode: SelectionShowMode;
	РежимОтображенияВыделения: SelectionShowMode;
	Output: UseOutput;
	Вывод: UseOutput;
	Edit: boolean;
	Редактирование: boolean;
	ShowGroups: boolean;
	ОтображатьГруппировки: boolean;
	EnableStartDrag: boolean;
	РазрешитьНачалоПеретаскивания: boolean;
	EnableDrag: boolean;
	РазрешитьПеретаскивание: boolean;
	BorderColor: Color;
	ЦветРамки: Color;
	UsedFileName: string;
	ИспользуемоеИмяФайла: string;
	CurrentArea;
	ТекущаяОбласть;
	StatePresentation: StatePresentation;
	ОтображениеСостояния: StatePresentation;
	ViewScalingMode;
	РежимМасштабированияПросмотра;
	ShowCellNames;
	ОтображатьИменаЯчеек;
	ShowRowAndColumnNames;
	ОтображатьИменаСтрокИКолонок;
	PointerType: SpreadsheetDocumentPointerType;
	ТипКурсоров: SpreadsheetDocumentPointerType;
	GetSelectedAreas(): ArrayV8;
	ПолучитьВыделенныеОбласти(): ArrayV8;
	SetSelectedAreas(... params): void;
	УстановитьВыделенныеОбласти(... params): void;
}
interface DataAnalysisObjectClassification {
	Real: DataAnalysisObject;
	Факт: DataAnalysisObject;
	Prediction: DataAnalysisObject;
	Прогноз: DataAnalysisObject;
	Count: number;
	Количество: number;
}
interface EnumCommandBarButtonAlignment {
	Left;
	Лево;
	Center;
	Центр;
	Right;
	Право;
}
declare type ПеречислениеВыравниваниеКнопокКоманднойПанели = EnumCommandBarButtonAlignment;
interface ColorChooseDialog {
	Color: Color;
	Цвет: Color;
	Choose(): boolean;
	Выбрать(): boolean;
	Show(... params): void;
	Показать(... params): void;
}
declare type ДиалогВыбораЦвета = ColorChooseDialog;
interface ConfigurationExtensionApplicationIssueSeverity {
}
interface TypeLink {
	DataPath: string;
	ПутьКДанным: string;
	LinkItem: number;
	ЭлементСвязи: number;
}
declare type СвязьПоТипу = TypeLink;
interface XSSchemaFinal {
}
interface ByteOrderMarkUsage {
}
interface PointInTime {
	Date: Date;
	Дата: Date;
	Ref;
	Ссылка;
	Compare(... params): number;
	Сравнить(... params): number;
}
declare type МоментВремени = PointInTime;
interface EnumDataCompositionAttributesPlacement {
	Together;
	Вместе;
	Separately;
	Отдельно;
	WithOwnerField;
	ВместеСВладельцем;
	SpecialPosition;
	ВСпециальнойПозиции;
}
declare type ПеречислениеРасположениеРеквизитовКомпоновкиДанных = EnumDataCompositionAttributesPlacement;
interface GanttChartIntervalRepresentation {
}
interface XSMinExclusiveFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Fixed: boolean;
	Фиксированный: boolean;
	Value;
	Значение;
	Inclusive: boolean;
	Включающий: boolean;
	Exclusive: boolean;
	Исключающий: boolean;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетМинимальногоИсключающегоЗначенияXS = XSMinExclusiveFacet;
interface FTPSecureConnectionUsageLevel {
}
interface XSAttributeUse {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	AttributeDeclaration: XSAttributeDeclaration;
	ОбъявлениеАтрибута: XSAttributeDeclaration;
	Value;
	Значение;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	Constraint: XSConstraint;
	Ограничение: XSConstraint;
	Use: XSAttributeUseCategory;
	Использование: XSAttributeUseCategory;
	IsRequired: boolean;
	Обязательный: boolean;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ИспользованиеАтрибутаXS = XSAttributeUse;
interface FileStream {
	CanRead: boolean;
	ДоступноЧтение: boolean;
	CanWrite: boolean;
	ДоступнаЗапись: boolean;
	CanSeek: boolean;
	ДоступноИзменениеПозиции: boolean;
	FileName: string;
	ИмяФайла: string;
	Close(): void;
	Закрыть(): void;
	Size(): number;
	Размер(): number;
	GetReadOnlyStream(): Stream;
	ПолучитьПотокТолькоДляЧтения(): Stream;
	CurrentPosition(): number;
	ТекущаяПозиция(): number;
	CopyTo(... params): void;
	КопироватьВ(... params): void;
	Flush(): void;
	СброситьБуферы(): void;
	Seek(... params): number;
	Перейти(... params): number;
	SetSize(... params): void;
	УстановитьРазмер(... params): void;
	Read(... params): number;
	Прочитать(... params): number;
	Write(... params): void;
	Записать(... params): void;
	BeginGetSize(... params): void;
	НачатьПолучениеРазмера(... params): void;
	BeginCopyTo(... params): void;
	НачатьКопированиеВ(... params): void;
	BeginSeek(... params): void;
	НачатьПереход(... params): void;
	BeginSetSize(... params): void;
	НачатьУстановкуРазмера(... params): void;
	BeginRead(... params): void;
	НачатьЧтение(... params): void;
	BeginWrite(... params): void;
	НачатьЗапись(... params): void;
	BeginFlush(... params): void;
	НачатьСбросБуферов(... params): void;
	BeginClose(... params): void;
	НачатьЗакрытие(... params): void;
}
declare type ФайловыйПоток = FileStream;
interface Field {
	Name: string;
	Имя: string;
}
interface CharacteristicsDescription {
	TypesFilterField: Field;
	ПолеОтбораВидов: Field;
	TypesFilterValue;
	ЗначениеОтбораВидов;
	KeyField: Field;
	ПолеКлюча: Field;
	CharacteristicTypes;
	ВидыХарактеристик;
	CharacteristicValues;
	ЗначенияХарактеристик;
	ObjectField: Field;
	ПолеОбъекта: Field;
	TypeField: Field;
	ПолеВида: Field;
	ValueField: Field;
	ПолеЗначения: Field;
}
interface CharacteristicsDescriptions {
	Count(): number;
	Количество(): number;
	Get(... params): CharacteristicsDescription;
	Получить(... params): CharacteristicsDescription;
	IndexOf(... params): number;
	Индекс(... params): number;
}
interface EnumPredictionModelColumnType {
	Input;
	Входная;
	Predictable;
	Прогнозируемая;
	DataSourceColumn;
	КолонкаИсточникаДанных;
}
declare type ПеречислениеТипКолонкиМоделиПрогноза = EnumPredictionModelColumnType;
interface DataCompositionResultBeginItemType {
}
interface DragAction {
}
interface DateAppearance {
	Date: Date;
	Дата: Date;
	TextColor: Color;
	ЦветТекста: Color;
	BackColor: Color;
	ЦветФона: Color;
	Font: Font;
	Шрифт: Font;
	Enabled: boolean;
	Доступность: boolean;
	ToolTip: string;
	Подсказка: string;
}
interface DateAppearanceCollection {
	Count(): number;
	Количество(): number;
	Get(... params): DateAppearance;
	Получить(... params): DateAppearance;
}
interface DataCompositionTextOutputType {
}
interface EnumClientApplicationBaseFontVariant {
	Normal;
	Обычный;
	Large;
	Крупный;
}
declare type ПеречислениеВариантОсновногоШрифтаКлиентскогоПриложения = EnumClientApplicationBaseFontVariant;
interface GraphicalSchemaItemSwitchCase {
	Description: string;
	Наименование: string;
	BackColor;
	ЦветФона;
	Value;
	Значение;
}
interface CheckBoxType {
}
interface EnumClientApplicationFormScaleVariant {
	Auto;
	Авто;
	Normal;
	Обычный;
	Compact;
	Компактный;
}
declare type ПеречислениеВариантМасштабаФормКлиентскогоПриложения = EnumClientApplicationFormScaleVariant;
interface AutoCapitalizationOnTextInput {
}
interface HashFunction {
}
interface EnumAppearanceAreaType {
	Field;
	Поле;
	Group;
	Группировка;
}
declare type ПеречислениеТипОбластиОформления = EnumAppearanceAreaType;
interface WSParameter {
	Name;
	Имя;
	Type;
	Тип;
	ParameterDirection;
	НаправлениеПараметра;
	Nillable;
	ВозможноПустой;
	Documentation;
	Документация;
}
interface FormChartField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
}
interface TrackBar {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	MinValue: number;
	МинимальноеЗначение: number;
	MaxValue: number;
	МаксимальноеЗначение: number;
	Step: number;
	Шаг: number;
	LargeStep: number;
	БольшойШаг: number;
	MarkingStep: number;
	ШагРазметки: number;
	MarkingAppearance: TrackBarMarkingAppearance;
	ОтображениеРазметки: TrackBarMarkingAppearance;
	Orientation: Orientation;
	Ориентация: Orientation;
}
declare type ПолосаРегулирования = TrackBar;
interface NewRowShowCheckVariant {
}
interface EnumDataCompositionResourcesAutoPosition {
	DontUse;
	НеИспользовать;
	AfterAllFields;
	ПослеВсехПолей;
}
declare type ПеречислениеАвтоПозицияРесурсовКомпоновкиДанных = EnumDataCompositionResourcesAutoPosition;
interface TestedCommandInterfaceGroup {
	TitleText: string;
	ТекстЗаголовка: string;
	Name: string;
	Имя: string;
	GetChildObjects(): FixedArray;
	ПолучитьПодчиненныеОбъекты(): FixedArray;
	FindObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	НайтиОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	GetObject(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	ПолучитьОбъект(... params): TestedFormDecoration | TestedClientApplicationWindow | TestedFormGroup | TestedFormField | TestedFormTable | TestedForm | any;
	FindObjects(... params): FixedArray;
	НайтиОбъекты(... params): FixedArray;
	GetParent();
	ПолучитьРодителя();
	Activate(): void;
	Активизировать(): void;
	GetDataPresentation(): string;
	ПолучитьПредставлениеДанных(): string;
	InputText(... params): void;
	ВвестиТекст(... params): void;
	GetToolTipText(): string;
	ПолучитьТекстПодсказки(): string;
	CurrentVisible(): boolean;
	ТекущаяВидимость(): boolean;
	CurrentEnable(): boolean;
	ТекущаяДоступность(): boolean;
	CurrentReadOnly(): boolean;
	ТекущееТолькоПросмотр(): boolean;
	GetContextMenu(): TestedFormGroup;
	ПолучитьКонтекстноеМеню(): TestedFormGroup;
	GetCommandBar(): TestedFormGroup;
	ПолучитьКоманднуюПанель(): TestedFormGroup;
}
interface EnumSpellCheckingOnTextInput {
	Auto;
	Авто;
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеПроверкаПравописанияПриВводеТекста = EnumSpellCheckingOnTextInput;
interface OSTaskbarManager {
	SetButtons(... params): void;
	УстановитьКнопки(... params): void;
	SetBadge(... params): void;
	УстановитьНаклейку(... params): void;
	Flash(... params): void;
	Сигнализировать(... params): void;
	RemoveBadge(): void;
	УдалитьНаклейку(): void;
}
interface HTMLImageElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Name: string;
	Имя: string;
	Align: string;
	Выравнивание: string;
	Alt: string;
	АльтернативныйТекст: string;
	Border: string;
	Рамка: string;
	Height: number;
	Высота: number;
	Hspace: number;
	ГоризонтальныйОтступ: number;
	IsMap: boolean;
	ЯвляетсяКартой: boolean;
	LongDesc: string;
	Описание: string;
	Src: string;
	Источник: string;
	UseMap: string;
	ИспользоватьКарту: string;
	Vspace: number;
	ВертикальныйОтступ: number;
	Width: number;
	Ширина: number;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface DataCompositionPredefinedValue {
}
interface EnumDataCompositionFilterItemsGroupType {
	AndGroup;
	ГруппаИ;
	OrGroup;
	ГруппаИли;
	NotGroup;
	ГруппаНе;
}
declare type ПеречислениеТипГруппыЭлементовОтбораКомпоновкиДанных = EnumDataCompositionFilterItemsGroupType;
interface InternetMailTextProcessing {
}
interface DataAnalysisSummaryStatisticsResult {
	Parameters: DataAnalysisParameters;
	Параметры: DataAnalysisParameters;
	ColumnsSetting: DataAnalysisColumns;
	НастройкаКолонок: DataAnalysisColumns;
	ObjectCount: number;
	КоличествоОбъектов: number;
	ContiguousFields: FixedCollection;
	НепрерывныеПоля: FixedCollection;
	DiscreteFields: FixedCollection;
	ДискретныеПоля: FixedCollection;
}
interface LocationProviderInformation {
	Name: string;
	Имя: string;
	Accuracy: number;
	Точность: number;
	SupportsSpeed: boolean;
	ПоддерживаетСкорость: boolean;
	SupportsHeading: boolean;
	ПоддерживаетНаправление: boolean;
	SupportsAltitude: boolean;
	ПоддерживаетВысоту: boolean;
	UsesCellNetwork: boolean;
	ИспользуетСотовуюСеть: boolean;
	UsesDataNetwork: boolean;
	ИспользуетСетьПередачиДанных: boolean;
	UsesSatellites: boolean;
	ИспользуетСпутники: boolean;
	Paid: boolean;
	Платный: boolean;
	EnergyConsumption: number;
	Энергопотребление: number;
	Available: boolean;
	Доступен: boolean;
}
interface LocationTools {
	GetProviders(... params): ArrayV8;
	ПолучитьПровайдеров(... params): ArrayV8;
	GetProvider(... params): LocationProviderInformation;
	ПолучитьПровайдера(... params): LocationProviderInformation;
	GetMostAccurateProvider(... params): LocationProviderInformation;
	ПолучитьСамогоТочногоПровайдера(... params): LocationProviderInformation;
	GetMostPowerSavingProvider(... params): LocationProviderInformation;
	ПолучитьСамогоЭнергоЭкономичногоПровайдера(... params): LocationProviderInformation;
	AttachLocationChangeHandler(... params): void;
	ПодключитьОбработчикИзмененияМестоположения(... params): void;
	DetachLocationChangeHandler(... params): void;
	ОтключитьОбработчикИзмененияМестоположения(... params): void;
	GetLastLocation(... params): LocationData;
	ПолучитьПоследнееМестоположение(... params): LocationData;
	UpdateLocation(... params): boolean;
	ОбновитьМестоположение(... params): boolean;
	LocationDataUseEnabled(): boolean;
	ИспользованиеДанныхГеопозиционированияВключено(): boolean;
	AttachProvidersAvailabilityChangeHandler(... params): void;
	ПодключитьОбработчикИзмененияДоступностиПровайдеров(... params): void;
	DetachProvidersAvailabilityChangeHandler(... params): void;
	ОтключитьОбработчикИзмененияДоступностиПровайдеров(... params): void;
	EnableGeofencesMonitoring(... params): void;
	ВключитьОтслеживаниеГеозон(... params): void;
	GetMonitoredGeofences(): ArrayV8;
	ПолучитьОтслеживаемыеГеозоны(): ArrayV8;
	GetMonitoredGeofence(... params): Geofence;
	ПолучитьОтслеживаемуюГеозону(... params): Geofence;
	DisableGeofencesMonitoring(... params): void;
	ОтключитьОтслеживаниеГеозон(... params): void;
	DisableAllGeofencesMonitoring(): void;
	ОтключитьОтслеживаниеВсехГеозон(): void;
	CheckAvailabilityOfEnablingGeofencesMonitoring(... params): boolean;
	ПроверитьВозможностьВключенияОтслеживанияГеозон(... params): boolean;
	AttachMonitoredGeofencesBordersCrossingDetectionHandler(... params): void;
	ПодключитьОбработчикПересеченияГраницОтслеживаемыхГеозон(... params): void;
	DetachMonitoredGeofencesBordersCrossingDetectionHandler(... params): void;
	ОтключитьОбработчикПересеченияГраницОтслеживаемыхГеозон(... params): void;
}
interface ChartAnimation {
}
interface RequiredMobileApplicationPermissions {
}
interface DataCompositionSchemaWizard {
	SetSchema(... params): void;
	УстановитьСхему(... params): void;
	Edit(... params): boolean;
	Редактировать(... params): boolean;
	GetSchema();
	ПолучитьСхему();
}
declare type КонструкторСхемыКомпоновкиДанных = DataCompositionSchemaWizard;
interface FormFormattedDocumentField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	Output: UseOutput;
	Вывод: UseOutput;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	SelectedText: string;
	ВыделенныйТекст: string;
	GetTextSelectionBounds(... params): void;
	ПолучитьГраницыВыделения(... params): void;
	SetTextSelectionBounds(... params): void;
	УстановитьГраницыВыделения(... params): void;
}
interface FormWindowOpeningMode {
}
interface AutoSaveFormDataInSettings {
}
interface ItemsAndTitlesAlignVariant {
}
interface FormItemSpacing {
}
interface ChildFormItemsWidth {
}
interface FormMainItem {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	WindowOpeningMode: FormWindowOpeningMode;
	РежимОткрытияОкна: FormWindowOpeningMode;
	EnterKeyBehavior: EnterKeyBehaviorType;
	ПоведениеКлавишиEnter: EnterKeyBehaviorType;
	SaveDataInSettings: SaveFormDataInSettings;
	СохранениеДанныхВНастройках: SaveFormDataInSettings;
	AutoSaveDataInSettings: AutoSaveFormDataInSettings;
	АвтоматическоеСохранениеДанныхВНастройках: AutoSaveFormDataInSettings;
	AutoTitle: boolean;
	АвтоЗаголовок: boolean;
	Title: string;
	Заголовок: string;
	Group: ChildFormItemsGroup;
	Группировка: ChildFormItemsGroup;
	ItemsAndTitlesAlign: ItemsAndTitlesAlignVariant;
	ВыравниваниеЭлементовИЗаголовков: ItemsAndTitlesAlignVariant;
	HorizontalSpacing: FormItemSpacing;
	ГоризонтальныйИнтервал: FormItemSpacing;
	VerticalSpacing: FormItemSpacing;
	ВертикальныйИнтервал: FormItemSpacing;
	ChildItemsHorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложениеПодчиненных: ItemHorizontalLocation;
	ChildItemsVerticalAlign: ItemVerticalAlign;
	ВертикальноеПоложениеПодчиненных: ItemVerticalAlign;
	ChildItemsWidth: ChildFormItemsWidth;
	ШиринаПодчиненныхЭлементов: ChildFormItemsWidth;
	VerticalScroll: VerticalFormScroll;
	ВертикальнаяПрокрутка: VerticalFormScroll;
	AutoFillCheck: boolean;
	ПроверятьЗаполнениеАвтоматически: boolean;
	Enabled: boolean;
	Доступность: boolean;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	CommandBarLocation: FormCommandBarLabelLocation;
	ПоложениеКоманднойПанели: FormCommandBarLabelLocation;
	CommandBar: FormGroup;
	КоманднаяПанель: FormGroup;
	ConditionalAppearance: DataCompositionConditionalAppearance;
	УсловноеОформление: DataCompositionConditionalAppearance;
	ChildItems: FormItems;
	ПодчиненныеЭлементы: FormItems;
	PurposeUseKey: string;
	КлючНазначенияИспользования: string;
	WindowOptionsKey: string;
	КлючСохраненияПоложенияОкна: string;
	AutoURL;
	АвтоНавигационнаяСсылка;
	URL;
	НавигационнаяСсылка;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	ShowCloseButton: boolean;
	ОтображатьКнопкуЗакрытия: boolean;
	GetAction(... params);
	ПолучитьДействие(... params);
	SetAction(... params): void;
	УстановитьДействие(... params): void;
}
interface TextReader {
	Open(... params): void;
	Открыть(... params): void;
	Close(): void;
	Закрыть(): void;
	Read(... params): string;
	Прочитать(... params): string;
	ReadLine(... params): string;
	ПрочитатьСтроку(... params): string;
}
declare type ЧтениеТекста = TextReader;
interface ClientInterfaceFavoritesTable {
	Columns: ValueTableColumnCollection;
	Колонки: ValueTableColumnCollection;
	Indexes: CollectionIndexes;
	Индексы: CollectionIndexes;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(): ValueTableRow;
	Добавить(): ValueTableRow;
	Insert(... params): ValueTableRow;
	Вставить(... params): ValueTableRow;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Find(... params): ValueTableRow;
	Найти(... params): ValueTableRow;
	FindRows(... params): ArrayV8;
	НайтиСтроки(... params): ArrayV8;
	Total(... params): number;
	Итог(... params): number;
	Sort(... params): void;
	Сортировать(... params): void;
	LoadColumn(... params): void;
	ЗагрузитьКолонку(... params): void;
	UnloadColumn(... params): ArrayV8;
	ВыгрузитьКолонку(... params): ArrayV8;
	Get(... params): ValueTableRow;
	Получить(... params): ValueTableRow;
	Copy(... params): ValueTable;
	Скопировать(... params): ValueTable;
	CopyColumns(... params): ValueTable;
	СкопироватьКолонки(... params): ValueTable;
	GroupBy(... params): void;
	Свернуть(... params): void;
	FillValues(... params): void;
	ЗаполнитьЗначения(... params): void;
	ChooseRow(... params): ValueTableRow;
	ВыбратьСтроку(... params): ValueTableRow;
}
interface EnumCalculationRegisterPeriodType {
	RegistrationPeriod;
	ПериодРегистрации;
	ActionPeriod;
	ПериодДействия;
	ActualActionPeriod;
	ФактическийПериодДействия;
	BasePeriod;
	БазовыйПериод;
}
declare type ПеречислениеВидПериодаРегистраРасчета = EnumCalculationRegisterPeriodType;
interface HTMLTableCellElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	CellIndex: number;
	ИндексЯчейки: number;
	Abbr: string;
	Сокращение: string;
	Align: string;
	Выравнивание: string;
	Axis: string;
	Ось: string;
	BgColor: string;
	ЦветФона: string;
	ColSpan: number;
	ОбъединениеКолонок: number;
	Headers: string;
	Заголовки: string;
	Height: string;
	Высота: string;
	NoWrap: boolean;
	НеПереносить: boolean;
	RowSpan: number;
	ОбъединениеСтрок: number;
	Scope: string;
	ОбластьВидимости: string;
	VAlign: string;
	ВертикальноеПоложение: string;
	Width: string;
	Ширина: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface CommandBarButtonType {
}
interface DendrogramTitleArea {
	Text: string;
	Текст: string;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
}
interface FileStreamsManager {
	Create(... params): FileStream;
	Создать(... params): FileStream;
	Open(... params): FileStream;
	Открыть(... params): FileStream;
	OpenForRead(... params): FileStream;
	ОткрытьДляЧтения(... params): FileStream;
	OpenForWrite(... params): FileStream;
	ОткрытьДляЗаписи(... params): FileStream;
	OpenForAppend(... params): FileStream;
	ОткрытьДляДописывания(... params): FileStream;
	CreateTempFile(... params): FileStream;
	СоздатьВременныйФайл(... params): FileStream;
	BeginCreate(... params): void;
	НачатьСоздание(... params): void;
	BeginOpen(... params): void;
	НачатьОткрытие(... params): void;
	BeginOpenForRead(... params): void;
	НачатьОткрытиеДляЧтения(... params): void;
	BeginOpenForWrite(... params): void;
	НачатьОткрытиеДляЗаписи(... params): void;
	BeginOpenForAppend(... params): void;
	НачатьОткрытиеДляДописывания(... params): void;
	BeginCreateTempFile(... params): void;
	НачатьСозданиеВременногоФайла(... params): void;
}
interface EnumCryptoCertificateStoreType {
	PersonalCertificates;
	ПерсональныеСертификаты;
	RecipientCertificates;
	СертификатыПолучателей;
	CertificationAuthorityCertificates;
	СертификатыУдостоверяющихЦентров;
	RootCertificates;
	КорневыеСертификаты;
}
declare type ПеречислениеТипХранилищаСертификатовКриптографии = EnumCryptoCertificateStoreType;
interface EnumDataLockMode {
	Shared;
	Разделяемый;
	Exclusive;
	Исключительный;
}
declare type ПеречислениеРежимБлокировкиДанных = EnumDataLockMode;
interface AutoSeriesSeparation {
}
interface GraphicalSchemaItemStart {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Border;
	Рамка;
	Value;
	Значение;
}
interface EnumDataCompositionAreaTemplateType {
	Header;
	Заголовок;
	Footer;
	Подвал;
	HierarchicalHeader;
	ЗаголовокИерархии;
	HierarchicalFooter;
	ПодвалИерархии;
	OverallHeader;
	ОбщийИтогЗаголовок;
	OverallFooter;
	ОбщийИтогПодвал;
}
declare type ПеречислениеТипМакетаОбластиКомпоновкиДанных = EnumDataCompositionAreaTemplateType;
interface EnumDataCompositionChartLegendPlacement {
	None;
	Нет;
	Left;
	Лево;
	Right;
	Право;
	Top;
	Верх;
	Bottom;
	Низ;
}
declare type ПеречислениеРасположениеЛегендыДиаграммыКомпоновкиДанных = EnumDataCompositionChartLegendPlacement;
interface DataCompositionGroupTemplateType {
}
interface ZIPStorePathMode {
}
interface GraphicalSchemaItemCondition {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Border;
	Рамка;
	Value;
	Значение;
}
interface AutoShowClearButtonMode {
}
interface FormGanttChartField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
}
interface ConversionToCanonicalXML {
	CanonicalizeToFile(... params): void;
	КанонизироватьВФайл(... params): void;
	CanonicalizeToString(... params): string;
	КанонизироватьВСтроку(... params): string;
	CanonicalizeToStream(... params): void;
	КанонизироватьВПоток(... params): void;
}
declare type ПреобразованиеККаноническомуXML = ConversionToCanonicalXML;
interface StandardTabularSectionDescription {
	Synonym;
	Синоним;
	Comment;
	Комментарий;
	ToolTip;
	Подсказка;
	FillChecking;
	ПроверкаЗаполнения;
	StandardAttributes;
	СтандартныеРеквизиты;
}
interface EnumGraphicalSchemeElementSideType {
	Left;
	Лево;
	Top;
	Верх;
	Right;
	Право;
	Bottom;
	Низ;
	Center;
	Центр;
}
declare type ПеречислениеТипСтороныЭлементаГрафическойСхемы = EnumGraphicalSchemeElementSideType;
interface EnumDataAnalysisStandardizationType {
	DontStandardize;
	НеСтандартизировать;
	Standardize;
	Стандартизировать;
}
declare type ПеречислениеТипСтандартизацииАнализаДанных = EnumDataAnalysisStandardizationType;
interface EnumPostingModeUse {
	Regular;
	Неоперативный;
	RealTime;
	Оперативный;
	Ask;
	Запрашивать;
	Auto;
	Авто;
}
declare type ПеречислениеИспользованиеРежимаПроведения = EnumPostingModeUse;
interface EnumGeographicalSchemaLayerSeriesShowMode {
	DontShow;
	НеОтображать;
	Text;
	Текст;
	Column;
	Гистограмма;
	ShapeSize;
	РазмерФигуры;
	ShapeColor;
	ЦветФигуры;
	ShapeColorHue;
	ОттенокЦветаФигуры;
	Picture;
	Картинка;
	Pie;
	Круговая;
	SizedPie;
	КруговаяСРазмером;
}
declare type ПеречислениеТипОтображенияСерииСлояГеографическойСхемы = EnumGeographicalSchemaLayerSeriesShowMode;
interface EnumShowChartScaleTitle {
	Auto;
	Авто;
	DontShow;
	НеОтображать;
	Show;
	Отображать;
}
declare type ПеречислениеОтображениеЗаголовкаШкалыДиаграммы = EnumShowChartScaleTitle;
interface GeographicalSchemaMultipointObjectPoints {
	Count(): number;
	Количество(): number;
	Get(... params): GeographicCoordinates;
	Получить(... params): GeographicCoordinates;
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
}
interface SpreadsheetDocumentShiftType {
}
interface TaskListMode {
}
interface DataCompositionDetailsProcessDescription {
	Data: string;
	Данные: string;
	ID: DataCompositionDetailsID;
	Идентификатор: DataCompositionDetailsID;
	UsedSettings: DataCompositionSettings;
	ПрименяемыеНастройки: DataCompositionSettings;
}
declare type ОписаниеОбработкиРасшифровкиКомпоновкиДанных = DataCompositionDetailsProcessDescription;
interface EnumTaskListMode {
	AllTasks;
	ВсеЗадачи;
	ByPerformer;
	ПоИсполнителю;
}
declare type ПеречислениеРежимСпискаЗадач = EnumTaskListMode;
interface RadioButton {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	Caption: string;
	Заголовок: string;
	TitleLocation: TitleLocation;
	ПоложениеЗаголовка: TitleLocation;
	HorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложение: HorizontalAlign;
	VerticalAlign: VerticalAlign;
	ВертикальноеПоложение: VerticalAlign;
	SelectionValue;
	ВыбираемоеЗначение;
}
declare type Переключатель = RadioButton;
interface HTTPServiceResponse {
	StatusCode: number;
	КодСостояния: number;
	Reason: string;
	Причина: string;
	Headers: Map;
	Заголовки: Map;
	SetBodyFromString(... params): void;
	УстановитьТелоИзСтроки(... params): void;
	SetBodyFromBinaryData(... params): void;
	УстановитьТелоИзДвоичныхДанных(... params): void;
	SetBodyFileName(... params): void;
	УстановитьИмяФайлаТела(... params): void;
	GetBodyAsString(): string;
	ПолучитьТелоКакСтроку(): string;
	GetBodyAsBinaryData(): BinaryData;
	ПолучитьТелоКакДвоичныеДанные(): BinaryData;
	GetBodyFileName(): string;
	ПолучитьИмяФайлаТела(): string;
	GetBodyAsStream(): Stream;
	ПолучитьТелоКакПоток(): Stream;
}
declare type HTTPСервисОтвет = HTTPServiceResponse;
interface FilterItemControl {
	Name: string;
	Имя: string;
	Enabled: boolean;
	Доступность: boolean;
}
interface FilterSettings {
	Add(... params): FilterItemControl;
	Добавить(... params): FilterItemControl;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): FilterItemControl;
	Найти(... params): FilterItemControl;
	Get(... params);
	Получить(... params);
}
interface EventLogAccessEventUseDescription {
	Object;
	Объект;
	AccessFields;
	ПоляДоступа;
	LoggedFields;
	ПоляРегистрации;
}
declare type ОписаниеИспользованияСобытияДоступЖурналаРегистрации = EventLogAccessEventUseDescription;
interface RoundMode {
}
interface EnumDataCompositionDataSetsLinkType {
	Outer;
	Внешняя;
	Inner;
	Внутренняя;
}
declare type ПеречислениеТипСвязиНаборовДанныхКомпоновкиДанных = EnumDataCompositionDataSetsLinkType;
interface CheckBox {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	Caption: string;
	Заголовок: string;
	TitleLocation: TitleLocation;
	ПоложениеЗаголовка: TitleLocation;
	HorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложение: HorizontalAlign;
	VerticalAlign: VerticalAlign;
	ВертикальноеПоложение: VerticalAlign;
	ThreeState: boolean;
	ТриСостояния: boolean;
}
declare type Флажок = CheckBox;
interface RepresentableDocumentBatchItem {
	Data;
	Данные;
}
interface RepresentableDocumentBatchItems {
	Count(): number;
	Количество(): number;
	Add(... params): RepresentableDocumentBatchItem;
	Добавить(... params): RepresentableDocumentBatchItem;
	Insert(... params): RepresentableDocumentBatchItem;
	Вставить(... params): RepresentableDocumentBatchItem;
	Delete(... params): void;
	Удалить(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Get(... params): RepresentableDocumentBatchItem;
	Получить(... params): RepresentableDocumentBatchItem;
}
interface EnumGanttChartScaleKeeping {
	Fixed;
	Фиксированная;
	Period;
	Период;
	AllData;
	ВсеДанные;
	Auto;
	Авто;
}
declare type ПеречислениеПоддержкаМасштабаДиаграммыГанта = EnumGanttChartScaleKeeping;
interface XSIdentityConstraintCategory {
}
interface XSIdentityConstraintDefinition {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Category: XSIdentityConstraintCategory;
	Категория: XSIdentityConstraintCategory;
	ReferencedKeyName: XMLExpandedName;
	ИмяСсылочногоКлюча: XMLExpandedName;
	ReferencedKey: XSIdentityConstraintDefinition;
	СсылочныйКлюч: XSIdentityConstraintDefinition;
	Selector: XSXPathDefinition;
	Селектор: XSXPathDefinition;
	Fields: XSComponentList;
	Поля: XSComponentList;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ОпределениеОграниченияИдентичностиXS = XSIdentityConstraintDefinition;
interface SettingsChoice {
	SettingsKey;
	КлючНастроек;
	AdditionalProperties: Structure;
	ДополнительныеСвойства: Structure;
}
declare type ВыборНастроек = SettingsChoice;
interface DataCompositionSchemaTotalFieldsTemplate {
	GroupFields1: ArrayV8;
	ПоляГруппировки1: ArrayV8;
	GroupName1: string;
	ИмяГруппировки1: string;
	TemplateType1: DataCompositionAreaTemplateType;
	ТипМакета1: DataCompositionAreaTemplateType;
	GroupFields2: ArrayV8;
	ПоляГруппировки2: ArrayV8;
	GroupName2: string;
	ИмяГруппировки2: string;
	TemplateType2: DataCompositionAreaTemplateType;
	ТипМакета2: DataCompositionAreaTemplateType;
	Template: string;
	Макет: string;
}
interface DeliverableNotificationSubscriberType {
}
interface DeliverableNotification {
	Title: string;
	Заголовок: string;
	Text: string;
	Текст: string;
	Data: string;
	Данные: string;
	Recipients: ArrayV8;
	Получатели: ArrayV8;
	FireDateUniversalTime: Date;
	ДатаПоявленияУниверсальноеВремя: Date;
	RepeatInterval: number;
	ИнтервалПовтора: number;
	SoundAlert: DeliverableNotificationSubscriberType | string;
	ЗвуковоеОповещение: DeliverableNotificationSubscriberType | string;
	Badge: number;
	Наклейка: number;
}
declare type ДоставляемоеУведомление = DeliverableNotification;
interface Deflation {
}
interface EnumStringEncodingMethod {
	URLEncoding;
	КодировкаURL;
	URLInURLEncoding;
	URLВКодировкеURL;
}
declare type ПеречислениеСпособКодированияСтроки = EnumStringEncodingMethod;
interface EnumDataCompositionFieldPlacement {
	Auto;
	Авто;
	Horizontally;
	Горизонтально;
	Vertically;
	Вертикально;
	SpecialColumn;
	ОтдельнаяКолонка;
	Together;
	Вместе;
}
declare type ПеречислениеРасположениеПоляКомпоновкиДанных = EnumDataCompositionFieldPlacement;
interface EmbeddedTable {
	Area: SpreadsheetDocumentRange;
	Область: SpreadsheetDocumentRange;
	Name: string;
	Имя: string;
}
interface AssociationGroup {
	Items: FixedArray;
	Элементы: FixedArray;
	CaseCount: number;
	КоличествоСлучаев: number;
	Support: number;
	ПроцентСлучаев: number;
}
interface ButtonGroupRepresentation {
}
interface FormButtonsGroup {
	Representation: ButtonGroupRepresentation;
	Отображение: ButtonGroupRepresentation;
}
interface XSTotalDigitsFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Fixed: boolean;
	Фиксированный: boolean;
	Value: number;
	Значение: number;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетОбщегоКоличестваРазрядовXS = XSTotalDigitsFacet;
interface HTMLAppletElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Align: string;
	Выравнивание: string;
	Alt: string;
	АльтернативныйТекст: string;
	Archive: string;
	Архив: string;
	Code: string;
	Код: string;
	CodeBase: string;
	БазаКода: string;
	Height: string;
	Высота: string;
	Hspace: number;
	ГоризонтальныйОтступ: number;
	Name: string;
	Имя: string;
	Object: string;
	Объект: string;
	Vspace: number;
	ВертикальныйОтступ: number;
	Width: string;
	Ширина: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface ViewStatus {
	Width: number;
	Ширина: number;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	BackColor: Color;
	ЦветФона: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопок: Color;
	TextColor: Color;
	ЦветТекста: Color;
	Font: Font;
	Шрифт: Font;
	TitleTextColor: Color;
	ЦветТекстаЗаголовка: Color;
	TitleFont: Font;
	ШрифтЗаголовка: Font;
	BorderColor: Color;
	ЦветРамки: Color;
	Border: Border;
	Рамка: Border;
	HorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложение: ItemHorizontalLocation;
}
interface ChartTitleArea {
	Text: string;
	Текст: string;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
}
interface ChartPlotArea {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	ShowScale: boolean;
	ОтображатьШкалу: boolean;
	ShowScaleValueLines: boolean;
	ОтображатьЛинииЗначенийШкалы: boolean;
	ShowSeriesScaleLabels: boolean;
	ОтображатьПодписиШкалыСерий: boolean;
	ShowPointsScaleLabels: boolean;
	ОтображатьПодписиШкалыТочек: boolean;
	ShowValuesScaleLabels: boolean;
	ОтображатьПодписиШкалыЗначений: boolean;
	ValueScaleFormat: string;
	ФорматШкалыЗначений: string;
	VerticalLabels: boolean;
	ВертикальныеМетки: boolean;
	LabelsOrientation: ChartLabelsOrientation;
	ОриентацияМеток: ChartLabelsOrientation;
	ScaleColor: Color;
	ЦветШкалы: Color;
	ScaleLines: Line;
	ЛинииШкалы: Line;
	ShowDataTable: boolean;
	ОтображатьТаблицуДанных: boolean;
	VerticalLinesDataTable: boolean;
	ВертикальныеЛинииВТаблицеДанных: boolean;
	HorizontalLinesInDataTable: boolean;
	ГоризонтальныеЛинииВТаблицеДанных: boolean;
	AlignDataTable: HorizontalAlign;
	ВыравниваниеВТаблицеДанных: HorizontalAlign;
	FormatDataTable: string;
	ФорматВТаблицеДанных: string;
	KeysInDataTable: boolean;
	КлючиВТаблицеДанных: boolean;
	SurfaceColor: Color;
	ЦветПоверхности: Color;
	RadarChartScaleType: RadarChartScaleType;
	ТипШкалыРадарнойДиаграммы: RadarChartScaleType;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
	PointsScale: ChartScale;
	ШкалаТочек: ChartScale;
	ValuesScale: ChartScale;
	ШкалаЗначений: ChartScale;
	SeriesScale: ChartScale;
	ШкалаСерий: ChartScale;
}
interface ChartOrientation {
}
interface MaxSeries {
}
interface ChartSpaceMode {
}
interface ChartPoint {
	Text: string;
	Текст: string;
	Details;
	Расшифровка;
	Color: Color;
	Цвет: Color;
	ColorPriority: boolean;
	ПриоритетЦвета: boolean;
	Value;
	Значение;
	Pure(): void;
	Пустой(): void;
}
interface ChartPoints {
	Count(): number;
	Количество(): number;
	Add(... params): ChartPoint;
	Добавить(... params): ChartPoint;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): ChartPoint;
	Получить(... params): ChartPoint;
}
interface ChartSeriesCollection {
	Count(): number;
	Количество(): number;
	Add(... params): ChartSeries;
	Добавить(... params): ChartSeries;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): ChartSeries;
	Получить(... params): ChartSeries;
}
interface GaugeChartValueRepresentation {
}
interface ChartColorPalette {
}
interface ChartBubbleSizeValueSource {
}
interface ChartBubbleSizing {
}
interface Chart {
	TitleArea: ChartTitleArea;
	ОбластьЗаголовка: ChartTitleArea;
	LegendArea: ChartLegendArea;
	ОбластьЛегенды: ChartLegendArea;
	PlotArea: ChartPlotArea;
	ОбластьПостроения: ChartPlotArea;
	PointCount: number;
	КоличествоТочек: number;
	SeriesCount: number;
	КоличествоСерий: number;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Outline: boolean;
	Окантовка: boolean;
	Light: boolean;
	Свет: boolean;
	Gradient: boolean;
	Градиент: boolean;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	ShowLegend: boolean;
	ОтображатьЛегенду: boolean;
	BackColor: Color;
	ЦветФона: Color;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	ChartType: ChartType;
	ТипДиаграммы: ChartType;
	LabelType: ChartLabelType;
	ВидПодписей: ChartLabelType;
	LabelDelimiter: string;
	РазделительПодписей: string;
	LabelLocation: ChartLabelLocation;
	ПоложениеПодписей: ChartLabelLocation;
	ValueLabelFormat: string;
	ФорматЗначенийВПодписях: string;
	PercentLabelFormat: string;
	ФорматПроцентовВПодписях: string;
	LabelTextColor: Color;
	ЦветТекстаПодписей: Color;
	LabelFont: Font;
	ШрифтПодписей: Font;
	TransparentLabel: boolean;
	ПрозрачныйФонПодписей: boolean;
	LabelBackColor: Color;
	ЦветФонаПодписей: Color;
	LabelBorder: Border;
	РамкаПодписей: Border;
	LabelBorderColor: Color;
	ЦветРамкиПодписей: Color;
	Orientation: ChartOrientation;
	Ориентация: ChartOrientation;
	MaxSeries: MaxSeries;
	МаксимумСерий: MaxSeries;
	MaxSeriesCount: number;
	МаксимумСерийКоличество: number;
	MaxSeriesPercent: number;
	МаксимумСерийПроцент: number;
	SpaceMode: ChartSpaceMode;
	РежимПробелов: ChartSpaceMode;
	BaseValue: number;
	БазовоеЗначение: number;
	HideBaseValue: boolean;
	ПропускатьБазовоеЗначение: boolean;
	AutoMaxValue: boolean;
	АвтоМаксимальноеЗначение: boolean;
	MaxValue: number;
	МаксимальноеЗначение: number;
	AutoMinValue: boolean;
	АвтоМинимальноеЗначение: boolean;
	MinValue: number;
	МинимальноеЗначение: number;
	ActivePoint: ChartPoint;
	АктивнаяТочка: ChartPoint;
	ActiveSeries: ChartSeries;
	АктивнаяСерия: ChartSeries;
	Points: ChartPoints;
	Точки: ChartPoints;
	SummarySeries: ChartSeries;
	СводнаяСерия: ChartSeries;
	Series: ChartSeriesCollection;
	Серии: ChartSeriesCollection;
	DataSource;
	ИсточникДанных;
	SeriesInRows: boolean;
	СерииВСтроках: boolean;
	AutoSeriesSeparation: AutoSeriesSeparation;
	АвтоРаздвижениеСерий: AutoSeriesSeparation;
	AutoSeriesLabels: boolean;
	АвтоУстановкаИменСерий: boolean;
	AutoSeriesText: boolean;
	АвтоУстановкаТекстаСерий: boolean;
	AutoPointLabels: boolean;
	АвтоУстановкаИменТочек: boolean;
	AutoPointText: boolean;
	АвтоУстановкаТекстаТочек: boolean;
	RefreshEnabled: boolean;
	Обновление: boolean;
	AutoTransposition: boolean;
	АвтоТранспонирование: boolean;
	GaugeChartValueRepresentation: GaugeChartValueRepresentation;
	ОтображениеЗначенияИзмерительнойДиаграммы: GaugeChartValueRepresentation;
	GaugeChartQualityBands: GaugeChartQualityBands;
	ПолосыИзмерительнойДиаграммы: GaugeChartQualityBands;
	BeginGaugeAngle: number;
	НачальныйУголИзмерительнойДиаграммы: number;
	EndGaugeAngle: number;
	КонечныйУголИзмерительнойДиаграммы: number;
	GaugeThickness: number;
	ТолщинаШкалыИзмерительнойДиаграммы: number;
	GaugeChartValuesScaleLabelsLocation: GaugeChartValuesScaleLabelsLocation;
	ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы: GaugeChartValuesScaleLabelsLocation;
	GaugeChartValuesScaleLabelsArcDirection: boolean;
	ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы: boolean;
	GaugeBushThickness: number;
	ТолщинаВтулкиИзмерительнойДиаграммы: number;
	GaugeBushColor: Color;
	ЦветВтулкиИзмерительнойДиаграммы: Color;
	ColorPalette: ChartColorPalette;
	ПалитраЦветов: ChartColorPalette;
	SplineMode: ChartSplineMode;
	РежимСглаживания: ChartSplineMode;
	SplineStrain: number;
	НатяжениеСглаживания: number;
	SemitransparencyMode: ChartSemitransparencyMode;
	РежимПолупрозрачности: ChartSemitransparencyMode;
	SemitransparencyPercent: number;
	ПроцентПолупрозрачности: number;
	FunnelNeckHeight: number;
	ВысотаГорлаВоронки: number;
	FunnelNeckWidth: number;
	ШиринаГорлаВоронки: number;
	FunnelSpace: number;
	ПробелыВоронки: number;
	ValuesBySeriesConnection: ChartValuesBySeriesConnectionType;
	СоединениеЗначенийПоСериям: ChartValuesBySeriesConnectionType;
	ValuesBySeriesConnectionLines: Line;
	ЛинииСоединенияЗначенийПоСериям: Line;
	ValuesBySeriesConnectionColor: Color;
	ЦветСоединенияЗначенийПоСериям: Color;
	Animation: ChartAnimation;
	Анимация: ChartAnimation;
	SeriesOrderInLegend: ChartSeriesOrderInLegend;
	ПорядокСерийВЛегенде: ChartSeriesOrderInLegend;
	ValuesAxis: ChartAxis;
	ОсьЗначений: ChartAxis;
	PointsAxis: ChartAxis;
	ОсьТочек: ChartAxis;
	PointsAxisValuesSource: ChartPointsAxisValuesSource;
	ИсточникЗначенийОсиТочек: ChartPointsAxisValuesSource;
	PointsAxisSeries: ChartSeries;
	СерияНаОсиТочек: ChartSeries;
	BubbleSizeValueSource: ChartBubbleSizeValueSource;
	ИсточникЗначенияРазмераПузырька: ChartBubbleSizeValueSource;
	BubbleSizeCommonSeries: ChartSeries;
	ОбщаяСерияРазмераПузырька: ChartSeries;
	BubbleSizing: ChartBubbleSizing;
	ВлияниеРазмераНаПузырек: ChartBubbleSizing;
	DefaultBubbleSize: number;
	РазмерПузырькаПоУмолчанию: number;
	MinBubbleSize: number;
	МинимальныйРазмерПузырька: number;
	MaxBubbleSize: number;
	МаксимальныйРазмерПузырька: number;
	BubbleChartNegativeValuesShowMode: BubbleChartNegativeValuesShowMode;
	ОтображениеОтрицательныхЗначенийПузырьковойДиаграммы: BubbleChartNegativeValuesShowMode;
	PointsConnection: ChartPointsConnectionType;
	СоединениеТочек: ChartPointsConnectionType;
	BarChartPointsOrder: BarChartPointsOrder;
	ПорядокОтображенияТочекГоризонтальнойГистограммы: BarChartPointsOrder;
	GradientPaletteMaxColors: number;
	МаксимальноеКоличествоЦветовГрадиентнойПалитры: number;
	GradientPaletteStartColor: Color;
	ЦветНачалаГрадиентнойПалитры: Color;
	GradientPaletteEndColor: Color;
	ЦветКонцаГрадиентнойПалитры: Color;
	SetValue(... params): void;
	УстановитьЗначение(... params): void;
	GetValue(... params);
	ПолучитьЗначение(... params);
	Clear(): void;
	Очистить(): void;
	Transpose(): void;
	Транспонировать(): void;
	GetPicture(... params): Picture;
	ПолучитьКартинку(... params): Picture;
	SetSeries(... params): ChartSeries;
	УстановитьСерию(... params): ChartSeries;
	SetPoint(... params): ChartPoint;
	УстановитьТочку(... params): ChartPoint;
	SetPalette(... params): ChartPoint;
	УстановитьПалитру(... params): ChartPoint;
	GetPalette(): ChartPoint;
	ПолучитьПалитру(): ChartPoint;
}
declare type Диаграмма = Chart;
interface PeriodAppearance {
	BeginOfPeriod: Date;
	НачалоПериода: Date;
	EndOfPeriod: Date;
	КонецПериода: Date;
	TextColor: Color;
	ЦветТекста: Color;
	BackColor: Color;
	ЦветФона: Color;
	Font: Font;
	Шрифт: Font;
	Enabled: boolean;
	Доступность: boolean;
	Dates: DateAppearanceCollection;
	Даты: DateAppearanceCollection;
}
interface ConditionalAppearanceSetting {
	Add(... params): ConditionalAppearanceSettingControl;
	Добавить(... params): ConditionalAppearanceSettingControl;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): ConditionalAppearanceSettingControl;
	Найти(... params): ConditionalAppearanceSettingControl;
	Get(... params);
	Получить(... params);
}
interface Label {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	Caption: string;
	Заголовок: string;
	HorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложение: HorizontalAlign;
	VerticalAlign: VerticalAlign;
	ВертикальноеПоложение: VerticalAlign;
	Hyperlink: string;
	Гиперссылка: string;
	MarkNegatives: string;
	ВыделятьОтрицательные: string;
	ScrollingText: ScrollingTextMode;
	БегущаяСтрока: ScrollingTextMode;
	Format: string;
	Формат: string;
	LabelPictureLocation: LabelPictureLocation;
	ПоложениеКартинкиНадписи: LabelPictureLocation;
	PictureSize: PictureSize;
	РазмерКартинки: PictureSize;
	Picture: Picture;
	Картинка: Picture;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
}
declare type Надпись = Label;
interface ScheduledJobDialog {
	Schedule: JobSchedule;
	Расписание: JobSchedule;
	DoModal(): boolean;
	ОткрытьМодально(): boolean;
	Show(... params): void;
	Показать(... params): void;
}
declare type ДиалогРасписанияРегламентногоЗадания = ScheduledJobDialog;
interface CommandParameterUseMode {
}
interface ChoiceHistorySettings {
}
interface EnumDataAnalysisFieldType {
	Field;
	Поле;
	DataAnalysisObject;
	ОбъектАнализаДанных;
}
declare type ПеречислениеТипПоляАнализаДанных = EnumDataAnalysisFieldType;
interface ButtonPictureLocation {
}
interface Button {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	Caption: string;
	Заголовок: string;
	HorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложение: HorizontalAlign;
	VerticalAlign: VerticalAlign;
	ВертикальноеПоложение: VerticalAlign;
	PictureLocation: ButtonPictureLocation;
	ПоложениеКартинки: ButtonPictureLocation;
	Picture: Picture;
	Картинка: Picture;
	PictureSize: PictureSize;
	РазмерКартинки: PictureSize;
	MultiLine: boolean;
	МногострочныйРежим: boolean;
	MenuMode: number;
	РежимМеню: number;
	Buttons;
	Кнопки;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
}
declare type Кнопка = Button;
interface ConfigurationExtensionApplicationIssueInformation {
	Extension: ConfigurationExtension;
	Расширение: ConfigurationExtension;
	Description: string;
	Описание: string;
	Severity: ConfigurationExtensionApplicationIssueSeverity;
	Важность: ConfigurationExtensionApplicationIssueSeverity;
}
interface Splitter {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	Orientation: Orientation;
	Ориентация: Orientation;
}
declare type Разделитель = Splitter;
interface QuerySchema {
	QueryBatch: QuerySchemaQueryBatch;
	ПакетЗапросов: QuerySchemaQueryBatch;
	GetQueryText(): string;
	ПолучитьТекстЗапроса(): string;
	SetQueryText(... params): void;
	УстановитьТекстЗапроса(... params): void;
	FindParameters(): QueryParametersDescription;
	НайтиПараметры(): QueryParametersDescription;
}
declare type СхемаЗапроса = QuerySchema;
interface CollaborationSystemInfoBaseRegistrationParameters {
	ServerAddress: string;
	АдресСервера: string;
	Email: string;
	АдресЭлектроннойПочты: string;
	InfoBaseName: string;
	ИмяИнформационнойБазы: string;
	ActivationCode: string;
	КодАктивации: string;
}
declare type ПараметрыРегистрацииИнформационнойБазыСистемыВзаимодействия = CollaborationSystemInfoBaseRegistrationParameters;
interface PivotChartLabelsOrientation {
}
interface PivotChartPlotArea {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	ValueScaleFormat: string;
	ФорматШкалыЗначений: string;
	LabelsOrientation: ChartLabelsOrientation;
	ОриентацияМеток: ChartLabelsOrientation;
	ScaleColor: Color;
	ЦветШкалы: Color;
	ScaleLines: Line;
	ЛинииШкалы: Line;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
	PointsScale: ChartScale;
	ШкалаТочек: ChartScale;
	ValuesScale: ChartScale;
	ШкалаЗначений: ChartScale;
	SeriesScale: ChartScale;
	ШкалаСерий: ChartScale;
	HorizontalScaleLabelsOrientation: PivotChartLabelsOrientation;
	ОриентацияМетокГоризонтальнойШкалы: PivotChartLabelsOrientation;
	HorizontalScaleTopLevelCount: number;
	КоличествоВерхнихУровнейГоризонтальнойШкалы: number;
}
interface FormPictureField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	ValuesPicture: Picture;
	КартинкаЗначений: Picture;
	PictureSize: PictureSize;
	РазмерКартинки: PictureSize;
	Zoomable: boolean;
	Масштабировать: boolean;
	Hyperlink: boolean;
	Гиперссылка: boolean;
	NonselectedPictureText: string;
	ТекстНевыбраннойКартинки: string;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	EnableStartDrag: boolean;
	РазрешитьНачалоПеретаскивания: boolean;
	EnableDrag: boolean;
	РазрешитьПеретаскивание: boolean;
	Refresh(): void;
	Обновить(): void;
}
interface StandardTabularSectionDescriptions {
}
interface CommandInterfaceCommand {
	ThisObject;
	ЭтотОбъект;
}
declare type КомандаКомандногоИнтерфейса = CommandInterfaceCommand;
interface EnumAccumulationRegisterAggregateUse {
	Auto;
	Авто;
	Always;
	Всегда;
}
declare type ПеречислениеИспользованиеАгрегатаРегистраНакопления = EnumAccumulationRegisterAggregateUse;
interface EnumDendrogramOrientation {
	Top;
	Верх;
	Bottom;
	Низ;
	Right;
	Право;
	Left;
	Лево;
}
declare type ПеречислениеОриентацияДендрограммы = EnumDendrogramOrientation;
interface FastInfosetWriter {
	NamespaceContext: XMLNamespaceContext;
	КонтекстПространствИмен: XMLNamespaceContext;
	WriteXMLDeclaration(): void;
	ЗаписатьОбъявлениеXML(): void;
	WriteStartElement(... params): void;
	ЗаписатьНачалоЭлемента(... params): void;
	WriteEndElement(): void;
	ЗаписатьКонецЭлемента(): void;
	WriteText(... params): void;
	ЗаписатьТекст(... params): void;
	WriteAttribute(... params): void;
	ЗаписатьАтрибут(... params): void;
	WriteNamespaceMapping(... params): void;
	ЗаписатьСоответствиеПространстваИмен(... params): void;
	WriteProcessingInstruction(... params): void;
	ЗаписатьИнструкциюОбработки(... params): void;
	WriteComment(... params): void;
	ЗаписатьКомментарий(... params): void;
	WriteRaw(... params): void;
	ЗаписатьБезОбработки(... params): void;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	WriteDocumentType(... params): void;
	ЗаписатьТипДокумента(... params): void;
	WriteCDATASection(... params): void;
	ЗаписатьСекциюCDATA(... params): void;
	WriteEntityReference(... params): void;
	ЗаписатьСсылкуНаСущность(... params): void;
	WriteStartAttribute(... params): void;
	ЗаписатьНачалоАтрибута(... params): void;
	WriteEndAttribute(): void;
	ЗаписатьКонецАтрибута(): void;
	WriteCurrent(... params): void;
	ЗаписатьТекущий(... params): void;
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	SetBinaryData(): void;
	УстановитьДвоичныеДанные(): void;
	Close();
	Закрыть();
	SetEncoding(... params): void;
	УстановитьКодировку(... params): void;
	OpenStream(... params): void;
	ОткрытьПоток(... params): void;
}
declare type ЗаписьFastInfoset = FastInfosetWriter;
interface IncompleteChoiceMode {
}
interface ComboBox {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	HorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложение: HorizontalAlign;
	VerticalAlign: VerticalAlign;
	ВертикальноеПоложение: VerticalAlign;
	ChoiceButton: boolean;
	КнопкаВыбора: boolean;
	ClearButton: boolean;
	КнопкаОчистки: boolean;
	SpinButton: boolean;
	КнопкаРегулирования: boolean;
	OpenButton: boolean;
	КнопкаОткрытия: boolean;
	MarkNegatives: boolean;
	ВыделятьОтрицательные: boolean;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	ChoiceButtonPicture: Picture;
	КартинкаКнопкиВыбора: Picture;
	ChoiceListHeight: number;
	ВысотаСпискаВыбора: number;
	ChoiceListWidth: number;
	ШиринаСпискаВыбора: number;
	Picture: Picture;
	Картинка: Picture;
	ChoiceList: ValueList;
	СписокВыбора: ValueList;
	IncompleteChoiceMode: IncompleteChoiceMode;
	РежимВыбораНезаполненного: IncompleteChoiceMode;
	SelectedText: string;
	ВыделенныйТекст: string;
	AutoMarkIncomplete: boolean;
	АвтоОтметкаНезаполненного: boolean;
	MarkIncomplete: boolean;
	ОтметкаНезаполненного: boolean;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
}
declare type ПолеВыбора = ComboBox;
interface HTMLBodyElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	ALink: string;
	АктивнаяСсылка: string;
	Background: string;
	Фон: string;
	BgColor: string;
	ЦветФона: string;
	Link: string;
	Связь: string;
	Text: string;
	ЦветТекста: string;
	VLink: string;
	ПосещеннаяСсылка: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface WSServiceCollection {
	Count(): number;
	Количество(): number;
	Get(... params): WSService;
	Получить(... params): WSService;
}
interface EnumCryptoCertificateIncludeMode {
	DontInclude;
	НеВключать;
	IncludeSubjectCertificate;
	ВключатьСертификатСубъекта;
	IncludeChainWithoutRoot;
	ВключатьЦепочкуБезКорневого;
	IncludeWholeChain;
	ВключатьПолнуюЦепочку;
}
declare type ПеречислениеРежимВключенияСертификатовКриптографии = EnumCryptoCertificateIncludeMode;
interface HTMLAnchorElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	AccessKey: string;
	КлавишаДоступа: string;
	Charset: string;
	НаборСимволов: string;
	Coords: string;
	Координаты: string;
	Href: string;
	Гиперссылка: string;
	Hreflang: string;
	БазовыйЯзык: string;
	Name: string;
	Имя: string;
	Rel: string;
	Отношение: string;
	Rev: string;
	ОбратнаяСсылка: string;
	Shape: string;
	Очертание: string;
	TabIndex: number;
	ПорядокОбхода: number;
	Target: string;
	Цель: string;
	Type: string;
	Тип: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface ZIPSubDirProcessingMode {
}
interface CryptoCertificateCheckMode {
}
interface DataCompositionDetailsProcess {
	Execute(... params): DataCompositionSettings;
	Выполнить(... params): DataCompositionSettings;
	ChooseAction(... params): void;
	ВыбратьДействие(... params): void;
	ShowActionChoice(... params): void;
	ПоказатьВыборДействия(... params): void;
	DrillDown(... params): DataCompositionSettings;
	Расшифровать(... params): DataCompositionSettings;
	OpenValue(... params): void;
	ОткрытьЗначение(... params): void;
	Filter(... params): DataCompositionSettings;
	Отфильтровать(... params): DataCompositionSettings;
	Order(... params): DataCompositionSettings;
	Упорядочить(... params): DataCompositionSettings;
	Group(... params): DataCompositionSettings;
	Сгруппировать(... params): DataCompositionSettings;
	ApplySettings(... params): DataCompositionSettings;
	ПрименитьНастройки(... params): DataCompositionSettings;
}
declare type ОбработкаРасшифровкиКомпоновкиДанных = DataCompositionDetailsProcess;
interface FullTextSearchOnInputByString {
}
interface EnumClientConnectionSpeed {
	Normal;
	Обычная;
	Low;
	Низкая;
}
declare type ПеречислениеСкоростьКлиентскогоСоединения = EnumClientConnectionSpeed;
interface HTTPServiceRequest {
	Headers: FixedMap;
	Заголовки: FixedMap;
	QueryOptions: FixedMap;
	ПараметрыЗапроса: FixedMap;
	BaseURL: string;
	БазовыйURL: string;
	RelativeURL: string;
	ОтносительныйURL: string;
	URLParameters: FixedMap;
	ПараметрыURL: FixedMap;
	HTTPMethod: string;
	HTTPМетод: string;
	GetBodyAsString(... params): string;
	ПолучитьТелоКакСтроку(... params): string;
	GetBodyAsBinaryData(): BinaryData;
	ПолучитьТелоКакДвоичныеДанные(): BinaryData;
	GetBodyAsStream(): Stream;
	ПолучитьТелоКакПоток(): Stream;
}
interface BusinessProcessRoutePoints {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params);
	Получить(... params);
}
interface FieldList {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): Field;
	Получить(... params): Field;
	Find(... params): Field;
	Найти(... params): Field;
}
interface BusinessProcessRoutePointType {
}
interface EnumAutoShowStateMode {
	Auto;
	Авто;
	DontShow;
	НеОтображать;
	Show;
	Отображать;
	ShowOnComposition;
	ОтображатьПриФормировании;
}
declare type ПеречислениеРежимАвтоОтображенияСостояния = EnumAutoShowStateMode;
interface EnumDataAnalysisColumnTypeClusterization {
	NotUsed;
	НеИспользуемая;
	Input;
	Входная;
	Predictable;
	Прогнозируемая;
	InputAndPredictable;
	ВходнаяИПрогнозируемая;
	Key;
	Ключ;
}
declare type ПеречислениеТипКолонкиАнализаДанныхКластеризация = EnumDataAnalysisColumnTypeClusterization;
interface DataCompositionAreaTemplate {
	Add(... params): DataCompositionAreaTemplateTableRow;
	Добавить(... params): DataCompositionAreaTemplateTableRow;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAreaTemplateTableRow;
	Вставить(... params): DataCompositionAreaTemplateTableRow;
	Get(... params): DataCompositionAreaTemplateTableRow;
	Получить(... params): DataCompositionAreaTemplateTableRow;
}
declare type МакетОбластиКомпоновкиДанных = DataCompositionAreaTemplate;
interface EnumChartScaleTitleTextSource {
	Auto;
	Авто;
	UseText;
	ИспользоватьТекст;
	AutoText;
	АвтоТекст;
}
declare type ПеречислениеСпособЗаполненияТекстаЗаголовкаШкалыДиаграммы = EnumChartScaleTitleTextSource;
interface InAppPurchaseService {
}
interface InAppPurchaseReceipt {
	Service: InAppPurchaseService;
	Сервис: InAppPurchaseService;
	Data: BinaryData;
	Данные: BinaryData;
}
interface AllowedMessageNo {
}
interface CryptoKeysContainer {
	Unload(... params): BinaryData;
	Выгрузить(... params): BinaryData;
	BeginInitialization(... params): void;
	НачатьИнициализацию(... params): void;
	BeginUnload(... params): void;
	НачатьВыгрузку(... params): void;
}
declare type КонтейнерКлючейКриптографии = CryptoKeysContainer;
interface HTMLObjectElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Code: string;
	Код: string;
	Align: string;
	Выравнивание: string;
	Archive: string;
	Архив: string;
	Border: string;
	Рамка: string;
	CodeBase: string;
	БазаКода: string;
	CodeType: string;
	ТипКода: string;
	Data: string;
	Данные: string;
	Declare: boolean;
	Объявление: boolean;
	Height: string;
	Высота: string;
	Hspace: number;
	ГоризонтальныйОтступ: number;
	Name: string;
	Имя: string;
	StandBy: string;
	СообщениеПриЗагрузке: string;
	TabIndex: number;
	ПорядокОбхода: number;
	Type: string;
	Тип: string;
	UseMap: string;
	ИспользоватьКарту: string;
	Vspace: number;
	ВертикальныйОтступ: number;
	Width: string;
	Ширина: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface EnumContactDataPhoneNumberType {
	Work;
	Рабочий;
	Home;
	Домашний;
	Other;
	Другой;
	Mobile;
	Мобильный;
	iPhone;
	Main;
	Основной;
	HomeFax;
	ДомашнийФакс;
	WorkFax;
	РабочийФакс;
	OtherFax;
	ДругойФакс;
	WorkMobile;
	РабочийМобильный;
}
declare type ПеречислениеТипНомераТелефонаДанныхКонтакта = EnumContactDataPhoneNumberType;
interface FormCalendarField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	SelectionMode: DateSelectionMode;
	РежимВыделения: DateSelectionMode;
	ShowCurrentDate: boolean;
	ОтображатьТекущуюДату: boolean;
	CalendarNavigation: boolean;
	ПеремещениеПоКалендарю: boolean;
	BeginOfRepresentationPeriod: Date;
	НачалоПериодаОтображения: Date;
	EndOfRepresentationPeriod: Date;
	КонецПериодаОтображения: Date;
	SelectedDates: ArrayV8;
	ВыделенныеДаты: ArrayV8;
	Font: Font;
	Шрифт: Font;
	BorderColor: Color;
	ЦветРамки: Color;
	Border: Border;
	Рамка: Border;
	EnableStartDrag: boolean;
	РазрешитьНачалоПеретаскивания: boolean;
	EnableDrag: boolean;
	РазрешитьПеретаскивание: boolean;
	ShowMonthsPanel: boolean;
	ОтображатьПанельМесяцев: boolean;
	WidthInMonths: number;
	ШиринаВМесяцах: number;
	HeightInMonths: number;
	ВысотаВМесяцах: number;
	Refresh(): void;
	Обновить(): void;
}
interface ControlEdge {
}
interface EnumChartMarkerType {
	None;
	Нет;
	Rect;
	Квадрат;
	Circle;
	Круг;
	Rhomb;
	Ромб;
	Auto;
	Авто;
	Alternation;
	Чередование;
}
declare type ПеречислениеТипМаркераДиаграммы = EnumChartMarkerType;
interface XSAppInfo {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Source: string;
	Источник: string;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ИнформацияДляПриложенияXS = XSAppInfo;
interface EnumGraphicalSchemaShapes {
	None;
	Нет;
	File;
	Файл;
	Folder;
	Папка;
	RightArrow;
	СтрелкаВправо;
	LeftArrow;
	СтрелкаВлево;
	UpArrow;
	СтрелкаВверх;
	DownArrow;
	СтрелкаВниз;
	LeftRightArrow;
	СтрелкаВлевоВправо;
	UpDownArrow;
	СтрелкаВверхВниз;
	HorizontalBrackets;
	СкобкиГоризонтальные;
	VerticalBrackets;
	СкобкиВертикальные;
	Document;
	Документ;
	Block;
	Блок;
	Ellipse;
	Эллипс;
}
declare type ПеречислениеФигурыГрафическойСхемы = EnumGraphicalSchemaShapes;
interface VideoQuality  {
}
interface Range {
	Begin;
	Начало;
	End;
	Конец;
}
declare type Диапазон = Range;
interface ChoiceButtonRepresentation {
}
interface AutoShowOpenButtonMode {
}
interface SpecialTextInputMode {
}
interface OnScreenKeyboardReturnKeyText {
}
interface FormInputField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	MarkNegatives: boolean;
	ВыделятьОтрицательные: boolean;
	EditFormat: string;
	ФорматРедактирования: string;
	Format: string;
	Формат: string;
	Wrap: boolean;
	АвтоПереносСтрок: boolean;
	PasswordMode: boolean;
	РежимПароля: boolean;
	MultiLine: boolean;
	МногострочныйРежим: boolean;
	ExtendedEdit: boolean;
	РасширенноеРедактирование: boolean;
	ChoiceListButton: boolean;
	КнопкаСпискаВыбора: boolean;
	DropListButton: boolean;
	КнопкаВыпадающегоСписка: boolean;
	ChoiceButton: boolean;
	КнопкаВыбора: boolean;
	ClearButton: boolean;
	КнопкаОчистки: boolean;
	SpinButton: boolean;
	КнопкаРегулирования: boolean;
	OpenButton: boolean;
	КнопкаОткрытия: boolean;
	CreateButton: boolean;
	КнопкаСоздания: boolean;
	MinValue;
	МинимальноеЗначение;
	MaxValue;
	МаксимальноеЗначение;
	Mask: string;
	Маска: string;
	ListChoiceMode: boolean;
	РежимВыбораИзСписка: boolean;
	ChoiceButtonPicture: Picture;
	КартинкаКнопкиВыбора: Picture;
	ChoiceListHeight: number;
	ВысотаСпискаВыбора: number;
	DropListWidth: number;
	ШиринаВыпадающегоСписка: number;
	AutoChoiceIncomplete: boolean;
	АвтоВыборНезаполненного: boolean;
	AutoMarkIncomplete: boolean;
	АвтоОтметкаНезаполненного: boolean;
	IncompleteChoiceMode: IncompleteChoiceMode;
	РежимВыбораНезаполненного: IncompleteChoiceMode;
	ChooseType: boolean;
	ВыбиратьТип: boolean;
	QuickChoice: boolean;
	БыстрыйВыбор: boolean;
	ChoiceFoldersAndItems: FoldersAndItems;
	ВыборГруппИЭлементов: FoldersAndItems;
	AvailableTypes: TypeDescription;
	ДоступныеТипы: TypeDescription;
	TypeDomainEnabled: boolean;
	РазрешитьСоставнойТип: boolean;
	ChoiceParameterLinks: FixedArray;
	СвязиПараметровВыбора: FixedArray;
	ChoiceParameters: FixedArray;
	ПараметрыВыбора: FixedArray;
	ChoiceList: ValueList;
	СписокВыбора: ValueList;
	MarkIncomplete: boolean;
	ОтметкаНезаполненного: boolean;
	ChoiceForm: string;
	ФормаВыбора: string;
	TextEdit: boolean;
	РедактированиеТекста: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	SelectedText: string;
	ВыделенныйТекст: string;
	EditText: string;
	ТекстРедактирования: string;
	TypeLink: TypeLink;
	СвязьПоТипу: TypeLink;
	EditTextUpdate: EditTextUpdate;
	ОбновлениеТекстаРедактирования: EditTextUpdate;
	InputHint: string;
	ПодсказкаВвода: string;
	ChoiceButtonRepresentation: ChoiceButtonRepresentation;
	ОтображениеКнопкиВыбора: ChoiceButtonRepresentation;
	ChoiceHistoryOnInput: ChoiceHistoryOnInput;
	ИсторияВыбораПриВводе: ChoiceHistoryOnInput;
	AutoShowClearButton: AutoShowClearButtonMode;
	АвтоОтображениеКнопкиОчистки: AutoShowClearButtonMode;
	AutoShowOpenButton: AutoShowOpenButtonMode;
	АвтоОтображениеКнопкиОткрытия: AutoShowOpenButtonMode;
	AutoCorrectionOnTextInput: AutoCorrectionOnTextInput;
	АвтоИсправлениеПриВводеТекста: AutoCorrectionOnTextInput;
	SpellCheckingOnTextInput: SpellCheckingOnTextInput;
	ПроверкаПравописанияПриВводеТекста: SpellCheckingOnTextInput;
	AutoCapitalizationOnTextInput: AutoCapitalizationOnTextInput;
	АвтоИзменениеРегистраПриВводеТекста: AutoCapitalizationOnTextInput;
	SpecialTextInputMode: SpecialTextInputMode;
	СпециальныйРежимВводаТекста: SpecialTextInputMode;
	OnScreenKeyboardReturnKeyText: OnScreenKeyboardReturnKeyText;
	ТекстКнопкиВводаЭкраннойКлавиатуры: OnScreenKeyboardReturnKeyText;
	HeightControlVariant: ItemHeightControlVariant;
	ВариантУправленияВысотой: ItemHeightControlVariant;
	GetTextSelectionBounds(... params): void;
	ПолучитьГраницыВыделения(... params): void;
	SetTextSelectionBounds(... params): void;
	УстановитьГраницыВыделения(... params): void;
	UpdateEditText(): void;
	ОбновитьТекстРедактирования(): void;
}
interface DataCompositionResultItemType {
}
interface DataCompositionResultItem {
	ItemType: DataCompositionResultItemType;
	ТипЭлемента: DataCompositionResultItemType;
	Template: string;
	Макет: string;
	Templates: DataCompositionTemplateAreaTemplateDefinitions;
	Макеты: DataCompositionTemplateAreaTemplateDefinitions;
	ParameterValues: DataCompositionTemplateParameterValues;
	ЗначенияПараметров: DataCompositionTemplateParameterValues;
	NestedItemsLayout: DataCompositionResultNestedItemsLayout;
	РасположениеВложенныхЭлементов: DataCompositionResultNestedItemsLayout;
	OutputPercent: number;
	ПроцентВывода: number;
}
declare type ЭлементРезультатаКомпоновкиДанных = DataCompositionResultItem;
interface DataCompositionProcessor {
	Initialize(... params): void;
	Инициализировать(... params): void;
	Reset(): void;
	Сбросить(): void;
	Next(): DataCompositionResultItem;
	Следующий(): DataCompositionResultItem;
}
declare type ПроцессорКомпоновкиДанных = DataCompositionProcessor;
interface ConfigurationExtensionsSource {
}
interface CommonAttributeContent {
	Count();
	Количество();
	Find(... params);
	Найти(... params);
	Contains(... params);
	Содержит(... params);
}
interface EnumAnalysisDataType {
	Contiguous;
	Непрерывные;
	Discrete;
	Дискретные;
}
declare type ПеречислениеВидДанныхАнализа = EnumAnalysisDataType;
interface DataCompositionFieldsTitleType {
}
interface EnumSeriesValuesDrawingMode {
	ShowAsValue;
	ОтображатьКакЗначение;
	ShowAsPart;
	ОтображатьКакДолю;
}
declare type ПеречислениеРежимОтображенияЗначенийСерии = EnumSeriesValuesDrawingMode;
interface CommandBarButtonOrder {
}
interface ZIPCompressionMethod {
}
interface EnumTimeScalePosition {
	Top;
	Верх;
	Bottom;
	Низ;
	Left;
	Лево;
	Right;
	Право;
}
declare type ПеречислениеПоложениеШкалыВремени = EnumTimeScalePosition;
interface EnumResultCompositionMode {
	Auto;
	Авто;
	Background;
	Фоновый;
	Directly;
	Непосредственно;
}
declare type ПеречислениеРежимКомпоновкиРезультата = EnumResultCompositionMode;
interface GraphicalSchemaItemProcessing {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Border;
	Рамка;
	Value;
	Значение;
}
interface PivotChartValuesShowMode {
}
interface EnumTelephonyToolsCallType {
	Outgoing;
	Исходящий;
	Incoming;
	Входящий;
	Missed;
	Пропущенный;
}
declare type ПеречислениеТипЗвонкаСредствТелефонии = EnumTelephonyToolsCallType;
interface EnumUserNotificationStatus {
	Information;
	Информация;
	Important;
	Важное;
}
declare type ПеречислениеСтатусОповещенияПользователя = EnumUserNotificationStatus;
interface AccumulationRecordType {
}
interface BinaryDataBuffer {
	Size: number;
	Размер: number;
	ReadOnly: boolean;
	ТолькоЧтение: boolean;
	ByteOrder: ByteOrder;
	ПорядокБайтов: ByteOrder;
	SetReadOnly(): void;
	УстановитьТолькоЧтение(): void;
	GetSlice(... params): BinaryDataBuffer;
	ПолучитьСрез(... params): BinaryDataBuffer;
	Get(... params): number;
	Получить(... params): number;
	Set(... params): void;
	Установить(... params): void;
	Read(... params): BinaryDataBuffer;
	Прочитать(... params): BinaryDataBuffer;
	ReadInt16(... params): number;
	ПрочитатьЦелое16(... params): number;
	ReadInt32(... params): number;
	ПрочитатьЦелое32(... params): number;
	ReadInt64(... params);
	ПрочитатьЦелое64(... params);
	WriteInt16(... params): void;
	ЗаписатьЦелое16(... params): void;
	WriteInt32(... params): void;
	ЗаписатьЦелое32(... params): void;
	WriteInt64(... params): void;
	ЗаписатьЦелое64(... params): void;
	Copy(): BinaryDataBuffer;
	Скопировать(): BinaryDataBuffer;
	Write(... params): void;
	Записать(... params): void;
	Reverse(): BinaryDataBuffer;
	Перевернуть(): BinaryDataBuffer;
	Concat(... params);
	Соединить(... params);
	Split(... params): ArrayV8;
	Разделить(... params): ArrayV8;
	WriteBitwiseAnd(... params): void;
	ЗаписатьПобитовоеИ(... params): void;
	WriteBitwiseOr(... params): void;
	ЗаписатьПобитовоеИли(... params): void;
	WriteBitwiseXor(... params): void;
	ЗаписатьПобитовоеИсключительноеИли(... params): void;
	WriteBitwiseAndNot(... params): void;
	ЗаписатьПобитовоеИНе(... params): void;
	Invert(... params): void;
	Инвертировать(... params): void;
}
declare type БуферДвоичныхДанных = BinaryDataBuffer;
interface EnumAccountingRecordType {
	Debit;
	Дебет;
	Credit;
	Кредит;
}
declare type ПеречислениеВидДвиженияБухгалтерии = EnumAccountingRecordType;
interface InAppPurchase {
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Description: string;
	Описание: string;
	Price: number;
	Цена: number;
	Currency: string;
	Валюта: string;
}
declare type ВстроеннаяПокупка = InAppPurchase;
interface EnumGaugeChartValueRepresentation {
	Needle;
	Стрелка;
	Sector;
	Сектор;
}
declare type ПеречислениеОтображениеЗначенияИзмерительнойДиаграммы = EnumGaugeChartValueRepresentation;
interface DataCompositionDetailsFieldValue {
	Field: string;
	Поле: string;
	Value;
	Значение;
	Hierarchy: boolean;
	Иерархия: boolean;
}
interface PlannerItemsTimeRepresentation {
}
interface HTMLDivElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Align: string;
	Выравнивание: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface EnumChartType {
	Line;
	График;
	Step;
	ГрафикПоШагам;
	Area;
	ГрафикСОбластями;
	StackedArea;
	ГрафикСОбластямиИНакоплением;
	Column;
	Гистограмма;
	StackedColumn;
	ГистограммаСНакоплением;
	NormalizedColumn;
	ГистограммаНормированная;
	Column3D;
	ГистограммаОбъемная;
	StackedColumn3D;
	ГистограммаСНакоплениемОбъемная;
	NormalizedColumn3D;
	ГистограммаНормированнаяОбъемная;
	Bar;
	ГистограммаГоризонтальная;
	StackedBar;
	ГистограммаСНакоплениемГоризонтальная;
	NormalizedBar;
	ГистограммаНормированнаяГоризонтальная;
	Bar3D;
	ГистограммаГоризонтальнаяОбъемная;
	StackedBar3D;
	ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	NormalizedBar3D;
	ГистограммаНормированнаяГоризонтальнаяОбъемная;
	Pie;
	Круговая;
	Pie3D;
	КруговаяОбъемная;
	Stock;
	Биржевая;
	OpenHighLowClose;
	БиржеваяСвеча;
	BarGraph;
	Изометрическая;
	CeilGraph;
	ИзометрическаяНепрерывная;
	TapeGraph;
	ИзометрическаяЛента;
	PyramidGraph;
	ИзометрическаяПирамида;
	Waterfall;
	Водопад;
	WireframeSurface;
	КаркаснаяПоверхность;
	Honeycomb;
	Сотовая;
	Surface;
	Поверхность;
	ConvexSurface;
	ВыпуклаяПоверхность;
	ConcaveSurface;
	ВогнутаяПоверхность;
	ShadedSurface;
	ЗатененнаяПоверхность;
	StackedLine;
	ГрафикСНакоплением;
	NormalizedArea;
	ГрафикСОбластямиНормированный;
	RadarLine;
	РадарныйГрафик;
	RadarArea;
	РадарныйГрафикСОбластями;
	RadarStackedLine;
	РадарныйГрафикСНакоплением;
	RadarStackedArea;
	РадарныйГрафикСОбластямиИНакоплением;
	RadarNormalizedArea;
	РадарныйГрафикСОбластямиНормированный;
	Gauge;
	Измерительная;
	Funnel;
	Воронка;
	Funnel3D;
	ВоронкаОбъемная;
	NormalizedFunnel;
	ВоронкаНормированная;
	NormalizedFunnel3D;
	ВоронкаНормированнаяОбъемная;
	Scatter;
	Точечная;
	Bubble;
	Пузырьковая;
}
declare type ПеречислениеТипДиаграммы = EnumChartType;
interface HelpSettings {
}
declare type НастройкиСправки = HelpSettings;
interface XSInclude {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	SchemaLocation: string;
	РасположениеСхемы: string;
	ResolvedSchema: XMLSchema;
	РазрешеннаяСхема: XMLSchema;
	IncorporatedSchema: XMLSchema;
	ОбъединеннаяСхема: XMLSchema;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ВключениеXS = XSInclude;
interface WSParameterCollection {
	Count(): number;
	Количество(): number;
	Get(... params): WSParameter;
	Получить(... params): WSParameter;
}
interface FormTrackBarField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	MinValue: number;
	МинимальноеЗначение: number;
	MaxValue: number;
	МаксимальноеЗначение: number;
	Step: number;
	Шаг: number;
	Orientation: FormItemOrientation;
	Ориентация: FormItemOrientation;
	LargeStep: number;
	БольшойШаг: number;
	MarkingStep: number;
	ШагРазметки: number;
	MarkingAppearance: TrackBarMarkingAppearance;
	ОтображениеРазметки: TrackBarMarkingAppearance;
}
interface EnumByteOrderMarkUsage {
	Auto;
	Авто;
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеИспользованиеByteOrderMark = EnumByteOrderMarkUsage;
interface EnumBusinessProcessRoutePointType {
	Start;
	Старт;
	End;
	Завершение;
	Condition;
	Условие;
	Activity;
	Действие;
	Switch;
	ВыборВарианта;
	Split;
	Разделение;
	Join;
	Слияние;
	Processing;
	Обработка;
	SubBusinessProcess;
	ВложенныйБизнесПроцесс;
}
declare type ПеречислениеВидТочкиМаршрутаБизнесПроцесса = EnumBusinessProcessRoutePointType;
interface WSDefinitions {
	XDTOFactory: XDTOFactory;
	ФабрикаXDTO: XDTOFactory;
	Services: WSServiceCollection;
	Сервисы: WSServiceCollection;
	Documentation: string;
	Документация: string;
}
declare type WSОпределения = WSDefinitions;
interface ReportObject {
}
interface MMSAttachment {
	Data: string;
	Данные: string;
	MIMEType: BinaryData;
	ТипСодержимого: BinaryData;
}
declare type MMSВложение = MMSAttachment;
interface DataAnalysisSummaryStatistics {
}
interface EnumAccumulationRecordType {
	Receipt;
	Приход;
	Expense;
	Расход;
}
declare type ПеречислениеВидДвиженияНакопления = EnumAccumulationRecordType;
interface AccountType {
}
interface StandardAttributeDescriptions {
}
interface DataCompositionSettingsWizard {
	Initialize(... params): void;
	Инициализировать(... params): void;
	SetSettings(... params): boolean;
	УстановитьНастройки(... params): boolean;
	DoModal(): boolean;
	ОткрытьМодально(): boolean;
	GetSettings();
	ПолучитьНастройки();
}
declare type КонструкторНастроекКомпоновкиДанных = DataCompositionSettingsWizard;
interface SizeChangeMode {
}
interface PredictionModelResultColumns {
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Get(... params): PredictionModelInputColumnSetting;
	Получить(... params): PredictionModelInputColumnSetting;
	Add(... params): PredictionModelInputColumnSetting;
	Добавить(... params): PredictionModelInputColumnSetting;
	Insert(... params): PredictionModelInputColumnSetting;
	Вставить(... params): PredictionModelInputColumnSetting;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Set(... params): void;
	Установить(... params): void;
}
interface EnumAutoCorrectionOnTextInput {
	Auto;
	Авто;
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеАвтоИсправлениеПриВводеТекста = EnumAutoCorrectionOnTextInput;
interface DataAnalysisSequentialPatterns {
}
interface FormPeriodField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
}
interface ZIPCompressionLevel {
}
interface KeyAndValue {
	Key;
	Ключ;
	Value;
	Значение;
}
interface UserMessage {
	Text: string;
	Текст: string;
	Field: string;
	Поле: string;
	DataPath: string;
	ПутьКДанным: string;
	TargetID: UUID;
	ИдентификаторНазначения: UUID;
	DataKey;
	КлючДанных;
	Message(): void;
	Сообщить(): void;
	SetData(... params): void;
	УстановитьДанные(... params): void;
}
declare type СообщениеПользователю = UserMessage;
interface ExternalDataSourceState {
}
interface DataAnalysisColumnsControl {
	Name: string;
	Имя: string;
	Enabled: boolean;
	Доступность: boolean;
}
interface DataHashing {
	HashFunction: HashFunction;
	ХешФункция: HashFunction;
	HashSum: BinaryData | number;
	ХешСумма: BinaryData | number;
	Append(... params): void;
	Добавить(... params): void;
	AppendFile(... params): void;
	ДобавитьФайл(... params): void;
}
declare type ХешированиеДанных = DataHashing;
interface SpreadsheetDocumentCellLineType {
}
interface HTMLFrameElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	FrameBorder: string;
	РамкаФрейма: string;
	LongDesc: string;
	Описание: string;
	MarginHeight: string;
	ВысотаПоля: string;
	MarginWidth: string;
	ШиринаПоля: string;
	Name: string;
	Имя: string;
	NoResize: boolean;
	ФиксированныйРазмер: boolean;
	Scrolling: string;
	Прокрутка: string;
	Src: string;
	Источник: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface FormTextDocumentField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	Output: UseOutput;
	Вывод: UseOutput;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	SelectedText: string;
	ВыделенныйТекст: string;
	GetTextSelectionBounds(... params): void;
	ПолучитьГраницыВыделения(... params): void;
	SetTextSelectionBounds(... params): void;
	УстановитьГраницыВыделения(... params): void;
}
interface FormGeographicalSchemaField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	Output: UseOutput;
	Вывод: UseOutput;
	BorderColor: Color;
	ЦветРамки: Color;
}
interface EnumPivotTableRowTotalPosition {
	Top;
	Верх;
	Bottom;
	Низ;
}
declare type ПеречислениеПоложениеИтоговСтрокСводнойТаблицы = EnumPivotTableRowTotalPosition;
interface XMLCanonicalizingWriter {
	NamespaceContext: XMLNamespaceContext;
	КонтекстПространствИмен: XMLNamespaceContext;
	WriteXMLDeclaration(): void;
	ЗаписатьОбъявлениеXML(): void;
	WriteStartElement(... params): void;
	ЗаписатьНачалоЭлемента(... params): void;
	WriteEndElement(): void;
	ЗаписатьКонецЭлемента(): void;
	WriteText(... params): void;
	ЗаписатьТекст(... params): void;
	WriteAttribute(... params): void;
	ЗаписатьАтрибут(... params): void;
	WriteNamespaceMapping(... params): void;
	ЗаписатьСоответствиеПространстваИмен(... params): void;
	WriteProcessingInstruction(... params): void;
	ЗаписатьИнструкциюОбработки(... params): void;
	WriteComment(... params): void;
	ЗаписатьКомментарий(... params): void;
	WriteRaw(... params): void;
	ЗаписатьБезОбработки(... params): void;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	WriteDocumentType(... params): void;
	ЗаписатьТипДокумента(... params): void;
	WriteCDATASection(... params): void;
	ЗаписатьСекциюCDATA(... params): void;
	WriteEntityReference(... params): void;
	ЗаписатьСсылкуНаСущность(... params): void;
	WriteStartAttribute(... params): void;
	ЗаписатьНачалоАтрибута(... params): void;
	WriteEndAttribute(): void;
	ЗаписатьКонецАтрибута(): void;
	WriteCurrent(... params): void;
	ЗаписатьТекущий(... params): void;
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	SetString(... params): void;
	УстановитьСтроку(... params): void;
	Close(): string;
	Закрыть(): string;
}
declare type КаноническаяЗаписьXML = XMLCanonicalizingWriter;
interface EnumOrientation {
	Vertical;
	Вертикально;
	Horizontal;
	Горизонтально;
	Auto;
	Авто;
}
declare type ПеречислениеОриентация = EnumOrientation;
interface DataAnalysisResultTableFillType {
}
interface SMSMessage {
	From: string;
	Отправитель: string;
	To: ArrayV8;
	Получатели: ArrayV8;
	DateReceived: Date;
	ДатаПолучения: Date;
	Text: string;
	Текст: string;
	Attachments: ArrayV8;
	Вложения: ArrayV8;
}
declare type SMSСообщение = SMSMessage;
interface OSCertificationAuthorityCertificates {
}
declare type СертификатыУдостоверяющихЦентровОС = OSCertificationAuthorityCertificates;
interface EnumDimensionAttributePlacementType {
	WithDimensions;
	ВместеСИзмерениями;
	Separately;
	Отдельно;
	Together;
	Вместе;
}
declare type ПеречислениеТипРазмещенияРеквизитовИзмерений = EnumDimensionAttributePlacementType;
interface TransactionsIsolationLevel {
}
interface SearchString {
	Width: number;
	Ширина: number;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
}
interface PredictionModelInformation {
}
interface DOMBuilderAction {
}
interface EnumPivotChartValuesShowMode {
	AllValues;
	ВсеЗначения;
	LastLevelValues;
	ЗначенияПоследнегоУровня;
}
declare type ПеречислениеОтображениеЗначенийСводнойДиаграммы = EnumPivotChartValuesShowMode;
interface EnumDataCompositionFilterApplicationType {
	Items;
	Элементы;
	Hierarchy;
	Иерархия;
	HierarchyOnly;
	ТолькоИерархия;
}
declare type ПеречислениеТипПримененияОтбораКомпоновкиДанных = EnumDataCompositionFilterApplicationType;
interface HTMLEmbedElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Align: string;
	Выравнивание: string;
	Height: string;
	Высота: string;
	Name: string;
	Имя: string;
	Src: string;
	Источник: string;
	Type: string;
	Тип: string;
	Width: string;
	Ширина: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface EnumSpreadsheetDocumentDrawingType {
	Line;
	Прямая;
	Rectangle;
	Прямоугольник;
	Text;
	Текст;
	Ellipse;
	Эллипс;
	Picture;
	Картинка;
	Object;
	Объект;
	Group;
	Группа;
	Chart;
	Диаграмма;
	GanttChart;
	ДиаграммаГанта;
	PivotChart;
	СводнаяДиаграмма;
	Dendrogram;
	Дендрограмма;
	GeographicalSchema;
	ГеографическаяСхема;
	Control;
	ЭлементУправления;
	Comment;
	Примечание;
}
declare type ПеречислениеТипРисункаТабличногоДокумента = EnumSpreadsheetDocumentDrawingType;
interface CollaborationSystemUserIDCollection {
	Count(): number;
	Количество(): number;
	Add(... params): void;
	Добавить(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	Clear(): void;
	Очистить(): void;
}
interface PrintDialogUseMode {
}
interface WindowSettings {
}
declare type НастройкиОкна = WindowSettings;
interface WSReturnValue {
	Type;
	Тип;
	Nillable;
	ВозможноПустое;
	Documentation;
	Документация;
}
interface LocalContactKey {
}
interface StandardAttributeDescription {
}
interface DataAnalysisParametersSetting {
	Add(... params): DataAnalysisParametersControl;
	Добавить(... params): DataAnalysisParametersControl;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataAnalysisParametersControl;
	Найти(... params): DataAnalysisParametersControl;
	Get(... params);
	Получить(... params);
}
interface XSNotationDeclaration {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	Name: string;
	Имя: string;
	NamespaceURI: string;
	URIПространстваИмен: string;
	SystemId: string;
	СистемныйИдентификатор: string;
	PublicId: string;
	ПубличныйИдентификатор: string;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ОбъявлениеНотацииXS = XSNotationDeclaration;
interface DataAnalysisColumnTypeSequentialPatterns {
}
interface HTMLHRElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Color: string;
	Цвет: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface PivotChartDimensionItemCollection {
	Parent: PivotChartDimensionItem;
	Родитель: PivotChartDimensionItem;
	Insert(... params): PivotChartDimensionItem;
	Вставить(... params): PivotChartDimensionItem;
	Add(): PivotChartDimensionItem;
	Добавить(): PivotChartDimensionItem;
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	Get(... params): PivotChartDimensionItem;
	Получить(... params): PivotChartDimensionItem;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface PivotChartDimensionItem {
	Parent: PivotChartDimensionItem;
	Родитель: PivotChartDimensionItem;
	Items: PivotChartDimensionItemCollection;
	Элементы: PivotChartDimensionItemCollection;
	Value;
	Значение;
	Details;
	Расшифровка;
	Text: string;
	Текст: string;
	ColorPriority: boolean;
	ПриоритетЦвета: boolean;
	Color: Color;
	Цвет: Color;
	SecondColor: Color;
	ДополнительныйЦвет: Color;
	Level(): number;
	Уровень(): number;
}
interface DataAnalysisColumnType {
}
interface SpreadsheetDocumentGroupHeaderPlacement {
}
interface DataCompositionSettingsRefreshMethod {
}
interface DecisionTreeSimplificationType {
}
interface SpreadsheetDocumentDrawingLineType {
}
interface ExchangePlanContent {
	Count(): number;
	Количество(): number;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	Find(... params): ExchangePlanContentItem;
	Найти(... params): ExchangePlanContentItem;
}
interface EnumAssociationRulesPruneType {
	Redundant;
	Избыточные;
	Covered;
	Покрытые;
}
declare type ПеречислениеТипОтсеченияПравилАссоциации = EnumAssociationRulesPruneType;
interface FunctionalOptionContent {
	Count();
	Количество();
	IndexOf(... params);
	Индекс(... params);
	Find(... params);
	Найти(... params);
	Get(... params);
	Получить(... params);
	Contains(... params);
	Содержит(... params);
}
interface DataCompositionDetailsAreaParameterFieldExpression {
	Field: string;
	Поле: string;
	Expression: string;
	Выражение: string;
}
interface ReadDataResult {
	Size: number;
	Размер: number;
	MarkerFound: boolean;
	МаркерНайден: boolean;
	MarkerIndex: number;
	ИндексМаркера: number;
	GetBinaryData(): BinaryData;
	ПолучитьДвоичныеДанные(): BinaryData;
	GetBinaryDataBuffer(): BinaryDataBuffer;
	ПолучитьБуферДвоичныхДанных(): BinaryDataBuffer;
	OpenStreamForRead(): Stream;
	ОткрытьПотокДляЧтения(): Stream;
	BeginGetBinaryData(... params): void;
	НачатьПолучениеДвоичныхДанных(... params): void;
	BeginGetBinaryDataBuffer(... params): void;
	НачатьПолучениеБуфераДвоичныхДанных(... params): void;
}
interface DataReader {
	TextEncoding: string;
	КодировкаТекста: string;
	ByteOrder: ByteOrder;
	ПорядокБайтов: ByteOrder;
	LineSplitter: string;
	РазделительСтрок: string;
	ConvertibleSplitterOfLines: string;
	КонвертируемыйРазделительСтрок: string;
	ReadCompleted: boolean;
	ЧтениеЗавершено: boolean;
	SourceStream(): Stream;
	ИсходныйПоток(): Stream;
	Close(): void;
	Закрыть(): void;
	ReadByte(): number;
	ПрочитатьБайт(): number;
	ReadInt16(... params): number;
	ПрочитатьЦелое16(... params): number;
	ReadInt32(... params): number;
	ПрочитатьЦелое32(... params): number;
	ReadInt64(... params): number;
	ПрочитатьЦелое64(... params): number;
	ReadIntoBinaryDataBuffer(... params): BinaryDataBuffer;
	ПрочитатьВБуферДвоичныхДанных(... params): BinaryDataBuffer;
	Read(... params): ReadDataResult;
	Прочитать(... params): ReadDataResult;
	ReadChars(... params): string;
	ПрочитатьСимволы(... params): string;
	ReadLine(... params): string;
	ПрочитатьСтроку(... params): string;
	ReadTo(... params): ReadDataResult;
	ПрочитатьДо(... params): ReadDataResult;
	Split(... params): ArrayV8;
	Разделить(... params): ArrayV8;
	SplitInPartsOf(... params): ArrayV8;
	РазделитьНаЧастиПо(... params): ArrayV8;
	Skip(... params): number;
	Пропустить(... params): number;
	SkipTo(... params): number;
	ПропуститьДо(... params): number;
	CopyTo(... params): number;
	КопироватьВ(... params): number;
	BeginClose(... params): void;
	НачатьЗакрытие(... params): void;
	BeginReadByte(... params): void;
	НачатьЧтениеБайта(... params): void;
	BeginReadInt16(... params): void;
	НачатьЧтениеЦелого16(... params): void;
	BeginReadInt32(... params): void;
	НачатьЧтениеЦелого32(... params): void;
	BeginReadInt64(... params): void;
	НачатьЧтениеЦелого64(... params): void;
	BeginReadIntoBinaryDataBuffer(... params): void;
	НачатьЧтениеВБуферДвоичныхДанных(... params): void;
	BeginRead(... params): void;
	НачатьЧтение(... params): void;
	BeginReadChars(... params): void;
	НачатьЧтениеСимволов(... params): void;
	BeginReadLine(... params): void;
	НачатьЧтениеСтроки(... params): void;
	BeginReadTo(... params): void;
	НачатьЧтениеДо(... params): void;
	BeginSplit(... params): void;
	НачатьРазделение(... params): void;
	BeginSplitInPartsOf(... params): void;
	НачатьРазделениеНаЧастиПо(... params): void;
	BeginSkip(... params): void;
	НачатьПропуск(... params): void;
	BeginSkipTo(... params): void;
	НачатьПропускДо(... params): void;
	BeginCopyTo(... params): void;
	НачатьКопированиеВ(... params): void;
}
declare type ЧтениеДанных = DataReader;
interface EnumReportBuilderDimensionType {
	Items;
	Элементы;
	Hierarchy;
	Иерархия;
	HierarchyOnly;
	ТолькоИерархия;
}
declare type ПеречислениеТипИзмеренияПостроителяОтчета = EnumReportBuilderDimensionType;
interface XSParticle {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	MinOccurs: number;
	МинимальноВходит: number;
	MaxOccurs: number;
	МаксимальноВходит: number;
	Term;
	Часть;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
	IsEmptiable(): boolean;
	ДопускаетсяПустой(): boolean;
	IsSubset(... params): boolean;
	ЯвляетсяПодмножеством(... params): boolean;
}
declare type ФрагментXS = XSParticle;
interface EnumGeographicalSchemaPointObjectDrawingType {
	Char;
	Символ;
	Marker;
	Маркер;
	Picture;
	Картинка;
}
declare type ПеречислениеТипОтображенияТочечногоОбъектаГеографическойСхемы = EnumGeographicalSchemaPointObjectDrawingType;
interface SearchControl {
	Width: number;
	Ширина: number;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
}
interface EnumDataCompositionGroupType {
	Items;
	Элементы;
	Hierarchy;
	Иерархия;
	HierarchyOnly;
	ТолькоИерархия;
}
declare type ПеречислениеТипГруппировкиКомпоновкиДанных = EnumDataCompositionGroupType;
interface DataSelection {
	Next();
	Следующий();
	Reset(): void;
	Сбросить(): void;
	Get();
	Получить();
}
interface DataCompositionTemplateChartBodyTemplate {
	GroupTemplate: string;
	МакетГруппировки: string;
	Template: string;
	Макет: string;
}
interface DataCompositionTemplateChartBodyTemplates {
	Add(): DataCompositionTemplateChartBodyTemplate;
	Добавить(): DataCompositionTemplateChartBodyTemplate;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionTemplateChartBodyTemplate;
	Вставить(... params): DataCompositionTemplateChartBodyTemplate;
	Get(... params): DataCompositionTemplateChartBodyTemplate;
	Получить(... params): DataCompositionTemplateChartBodyTemplate;
}
interface FormCheckBoxField {
	CheckBoxType: CheckBoxType;
	ВидФлажка: CheckBoxType;
	ThreeState: boolean;
	ТриСостояния: boolean;
	BackColor: Color;
	ЦветФона: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	EditFormat: string;
	ФорматРедактирования: string;
	TextColor: Color;
	ЦветТекста: Color;
	Font: Font;
	Шрифт: Font;
	ItemTitleHeight: number;
	ВысотаЗаголовкаЭлемента: number;
	ItemWidth: number;
	ШиринаЭлемента: number;
	ItemHeight: number;
	ВысотаЭлемента: number;
	EqualItemsWidth: boolean;
	ОдинаковаяШиринаЭлементов: boolean;
}
interface StandardTabularSectionDescriptions {
}
interface EnumDataCompositionLengthUnit {
	Default;
	ПоУмолчанию;
	mm;
	мм;
	pt;
	пт;
	px;
	пкс;
	ex;
	сс;
}
declare type ПеречислениеЕдиницаДлиныКомпоновкиДанных = EnumDataCompositionLengthUnit;
interface HTMLAttributeMap {
	Count(): number;
	Количество(): number;
	GetNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	ПолучитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	SetNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	УстановитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	RemoveNamedItem(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	УдалитьИменованныйЭлемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Item(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Элемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
interface DataCompositionGroupUseVariant {
}
interface MultimediaData {
	MIMEType: string;
	ТипСодержимого: string;
	FileExtention: string;
	РасширениеФайла: string;
	GetBinaryData(): BinaryData;
	ПолучитьДвоичныеДанные(): BinaryData;
}
interface MultimediaTools {
	MakePhoto(... params): MultimediaData;
	СделатьФотоснимок(... params): MultimediaData;
	MakeAudioRecording(): MultimediaData;
	СделатьАудиозапись(): MultimediaData;
	MakeVideoRecording(... params): MultimediaData;
	СделатьВидеозапись(... params): MultimediaData;
	ShowBarcodeScanning(... params): void;
	ПоказатьСканированиеШтрихКодов(... params): void;
	CloseBarcodeScanning(): void;
	ЗакрытьСканированиеШтрихКодов(): void;
	BarcodeScanningSupported(): boolean;
	ПоддерживаетсяСканированиеШтрихКодов(): boolean;
	PhotoSupported(... params): boolean;
	ПоддерживаетсяФотоснимок(... params): boolean;
	AudioRecordingSupported(): boolean;
	ПоддерживаетсяАудиозапись(): boolean;
	VideoRecordingSupported(... params): boolean;
	ПоддерживаетсяВидеозапись(... params): boolean;
	GetSupportedCameraResolutions(... params): ArrayV8;
	ПолучитьПоддерживаемыеРазрешенияКамеры(... params): ArrayV8;
	PlaySoundAlert(... params): void;
	ВоспроизвестиЗвуковоеОповещение(... params): void;
	PlayAudio(... params): void;
	ВоспроизвестиАудио(... params): void;
	StopAudioPlayback(): void;
	ОстановитьВоспроизведениеАудио(): void;
	GetAudioDuration(... params): number;
	ПолучитьПродолжительностьАудио(... params): number;
	PlayText(... params): void;
	ВоспроизвестиТекст(... params): void;
	StopTextPlayback(): void;
	ОстановитьВоспроизведениеТекста(): void;
	TextPlaybackSupported(... params): boolean;
	ПоддерживаетсяВоспроизведениеТекста(... params): boolean;
}
interface EnumXDTOVariety {
	Atomic;
	Атомарный;
	List;
	Список;
	Union;
	Объединение;
}
declare type ПеречислениеВариантXDTO = EnumXDTOVariety;
interface UsualGroupControlRepresentation {
}
interface EnumDataCompositionGroupTemplateType {
	Auto;
	Авто;
	Horizontal;
	Горизонтальный;
	Vertical;
	Вертикальный;
}
declare type ПеречислениеТипМакетаГруппировкиКомпоновкиДанных = EnumDataCompositionGroupTemplateType;
interface JSONDateFormat {
}
interface EnumHashFunction {
	CRC32;
	MD5;
	SHA1;
	SHA256;
}
declare type ПеречислениеХешФункция = EnumHashFunction;
interface XSDisallowedSubstitutions {
}
interface EnumDataCompositionConditionalAppearanceUse {
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеИспользованиеУсловногоОформленияКомпоновкиДанных = EnumDataCompositionConditionalAppearanceUse;
interface FormUsualGroup {
	Group: ChildFormItemsGroup;
	Группировка: ChildFormItemsGroup;
	ItemsAndTitlesAlign: ItemsAndTitlesAlignVariant;
	ВыравниваниеЭлементовИЗаголовков: ItemsAndTitlesAlignVariant;
	HorizontalSpacing: FormItemSpacing;
	ГоризонтальныйИнтервал: FormItemSpacing;
	VerticalSpacing: FormItemSpacing;
	ВертикальныйИнтервал: FormItemSpacing;
	ChildItemsHorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложениеПодчиненных: ItemHorizontalLocation;
	ChildItemsVerticalAlign: ItemVerticalAlign;
	ВертикальноеПоложениеПодчиненных: ItemVerticalAlign;
	ChildItemsWidth: ChildFormItemsWidth;
	ШиринаПодчиненныхЭлементов: ChildFormItemsWidth;
	Representation: UsualGroupRepresentation;
	Отображение: UsualGroupRepresentation;
	Behavior: UsualGroupBehavior;
	Поведение: UsualGroupBehavior;
	ControlRepresentation: UsualGroupControlRepresentation;
	ОтображениеУправления: UsualGroupControlRepresentation;
	ThroughAlign: ThroughAlign;
	СквозноеВыравнивание: ThroughAlign;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	ShowLeftMargin: boolean;
	ОтображатьОтступСлева: boolean;
	Format: string;
	Формат: string;
	TitleDataPath: string;
	ПутьКДаннымЗаголовка: string;
	BackColor: Color;
	ЦветФона: Color;
	CollapsedRepresentationTitle: string;
	ЗаголовокСвернутогоОтображения: string;
	United: boolean;
	Объединенная: boolean;
}
interface EnumDataAnalysisSequentialPatternsOrderType {
	BySupport;
	ПоКоличествуСлучаев;
	ByLength;
	ПоДлине;
}
declare type ПеречислениеТипУпорядочиванияШаблоновПоследовательностейАнализаДанных = EnumDataAnalysisSequentialPatternsOrderType;
interface FormPictureDecoration {
	Picture: Picture;
	Картинка: Picture;
	Hyperlink: boolean;
	Гиперссылка: boolean;
	PictureSize: PictureSize;
	РазмерКартинки: PictureSize;
	Zoomable: boolean;
	Масштабировать: boolean;
	NonselectedPictureText: string;
	ТекстНевыбраннойКартинки: string;
	BorderColor: Color;
	ЦветРамки: Color;
	Border: Border;
	Рамка: Border;
	EnableStartDrag: boolean;
	РазрешитьНачалоПеретаскивания: boolean;
	EnableDrag: boolean;
	РазрешитьПеретаскивание: boolean;
}
interface EnumDataCompositionSettingsRefreshMethod {
	CheckAvailability;
	ПроверятьДоступность;
	Full;
	Полное;
}
declare type ПеречислениеСпособВосстановленияНастроекКомпоновкиДанных = EnumDataCompositionSettingsRefreshMethod;
interface XMLSchemaBuilder {
	CreateXMLSchema(... params): XMLSchema;
	СоздатьСхемуXML(... params): XMLSchema;
	CreateXSComponent(... params);
	СоздатьКомпонентуXS(... params);
}
declare type ПостроительСхемXML = XMLSchemaBuilder;
interface GanttChartScaleKeeping {
}
interface ComparisonSettings {
}
declare type НастройкиСравнения = ComparisonSettings;
interface EnumGeographicalSchemaDataSourceOrganizationType {
	AtRow;
	ВСтроке;
	AtIntersection;
	НаПересечении;
}
declare type ПеречислениеТипОрганизацииИсточникаДанныхГеографическойСхемы = EnumGeographicalSchemaDataSourceOrganizationType;
interface CollaborationSystemNotification {
	Conversation;
	Обсуждение;
}
declare type ОповещениеСистемыВзаимодействия = CollaborationSystemNotification;
interface CompareValues {
	Compare(... params);
	Сравнить(... params);
}
declare type СравнениеЗначений = CompareValues;
interface EnumLocationRelativeToGeofence {
	Inside;
	Внутри;
	Outside;
	Снаружи;
}
declare type ПеречислениеПоложениеОтносительноГеозоны = EnumLocationRelativeToGeofence;
interface DataCompositionSettingsComposer {
	Settings: DataCompositionSettings;
	Настройки: DataCompositionSettings;
	UserSettings: DataCompositionUserSettings;
	ПользовательскиеНастройки: DataCompositionUserSettings;
	FixedSettings: DataCompositionSettings;
	ФиксированныеНастройки: DataCompositionSettings;
	Initialize(... params): void;
	Инициализировать(... params): void;
	GetAvailableSettingsSource();
	ПолучитьИсточникДоступныхНастроек();
	LoadSettings(... params): void;
	ЗагрузитьНастройки(... params): void;
	GetSettings(): DataCompositionSettings;
	ПолучитьНастройки(): DataCompositionSettings;
	Refresh(... params): void;
	Восстановить(... params): void;
	ExpandAutoFields(): void;
	РазвернутьАвтоПоля(): void;
	LoadUserSettings(... params): void;
	ЗагрузитьПользовательскиеНастройки(... params): void;
	LoadFixedSettings(... params): void;
	ЗагрузитьФиксированныеНастройки(... params): void;
}
declare type КомпоновщикНастроекКомпоновкиДанных = DataCompositionSettingsComposer;
interface DynamicList {
	Order: DataCompositionOrder;
	Порядок: DataCompositionOrder;
	Filter: DataCompositionFilter;
	Отбор: DataCompositionFilter;
	Group: DataCompositionGroupFieldCollection;
	Группировка: DataCompositionGroupFieldCollection;
	ConditionalAppearance: DataCompositionConditionalAppearance;
	УсловноеОформление: DataCompositionConditionalAppearance;
	Parameters: DataCompositionDataParameterValues;
	Параметры: DataCompositionDataParameterValues;
	SettingsComposer: DataCompositionSettingsComposer;
	КомпоновщикНастроек: DataCompositionSettingsComposer;
	CurrentUserSettingsKey: string;
	КлючТекущихПользовательскихНастроек: string;
	AutoSaveUserSettings: boolean;
	АвтоматическоеСохранениеПользовательскихНастроек: boolean;
	QueryText: string;
	ТекстЗапроса: string;
	MainTable: string;
	ОсновнаяТаблица: string;
	DynamicDataRead: boolean;
	ДинамическоеСчитываниеДанных: boolean;
	CustomQuery: boolean;
	ПроизвольныйЗапрос: boolean;
	AutoFillAvailableFields: boolean;
	АвтоЗаполнениеДоступныхПолей: boolean;
	GetInvisibleFieldPresentations: boolean;
	ПолучениеПредставленийДляНевидимыхПолей: boolean;
	SetRequiredUse(... params): void;
	УстановитьОбязательноеИспользование(... params): void;
	GetRequiredUse(... params): boolean;
	ПолучитьОбязательноеИспользование(... params): boolean;
	SetRestrictionsForUseInGroup(... params): void;
	УстановитьОграниченияИспользованияВГруппировке(... params): void;
	SetRestrictionsForUseInOrder(... params): void;
	УстановитьОграниченияИспользованияВПорядке(... params): void;
	SetRestrictionsForUseInFilter(... params): void;
	УстановитьОграниченияИспользованияВОтборе(... params): void;
	GetRestrictionsForUseInGroup(): ArrayV8;
	ПолучитьОграниченияИспользованияВГруппировке(): ArrayV8;
	GetRestrictionsForUseInOrder(): ArrayV8;
	ПолучитьОграниченияИспользованияВПорядке(): ArrayV8;
	GetRestrictionsForUseInFilter(): ArrayV8;
	ПолучитьОграниченияИспользованияВОтборе(): ArrayV8;
}
interface EnumDataCompositionTotalPlacement {
	None;
	Нет;
	Begin;
	Начало;
	End;
	Конец;
	BeginAndEnd;
	НачалоИКонец;
	Auto;
	Авто;
}
declare type ПеречислениеРасположениеИтоговКомпоновкиДанных = EnumDataCompositionTotalPlacement;
interface DataCompositionSettingsViewMode {
}
interface FileCompare {
	CompareMethod: EnumFileCompareMethod;
	СпособСравнения: EnumFileCompareMethod;
	FirstFile: string;
	ПервыйФайл: string;
	SecondFile: string;
	ВторойФайл: string;
	IgnoreWhiteSpace: boolean;
	ИгнорироватьПустоеПространство: boolean;
	CaseSensitive: boolean;
	УчитыватьРегистр: boolean;
	EOLSensitive: boolean;
	УчитыватьРазделителиСтрок: boolean;
	Compare(): boolean;
	Сравнить(): boolean;
	ShowDifferences(): void;
	ПоказатьРазличия(): void;
	ShowDifferencesModally(): void;
	ПоказатьРазличияМодально(): void;
}
declare type СравнениеФайлов = FileCompare;
interface QueryDataSource {
	DataSource;
	ИсточникДанных;
	Columns;
	Колонки;
}
interface EnumBarChartPointsOrder {
	Auto;
	Авто;
	TopToBottom;
	СверхуВниз;
	BottomToTop;
	СнизуВверх;
}
declare type ПеречислениеПорядокОтображенияТочекГоризонтальнойГистограммы = EnumBarChartPointsOrder;
interface EnumClusterizationMethod {
	KMeans;
	КСредних;
	NearestNeighbor;
	БлижняяСвязь;
	FurthestNeighbor;
	ДальняяСвязь;
	Centroid;
	ЦентрТяжести;
}
declare type ПеречислениеМетодКластеризации = EnumClusterizationMethod;
interface AccumulationRegisterAggregatePeriodicity {
}
interface AccumulationRegisterAggregate {
	Use: AccumulationRegisterAggregateUse;
	Использование: AccumulationRegisterAggregateUse;
	Dimensions;
	Измерения;
	Periodicity: AccumulationRegisterAggregatePeriodicity;
	Периодичность: AccumulationRegisterAggregatePeriodicity;
}
interface XSMinInclusiveFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Fixed: boolean;
	Фиксированный: boolean;
	Value;
	Значение;
	Inclusive: boolean;
	Включающий: boolean;
	Exclusive: boolean;
	Исключающий: boolean;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетМинимальногоВключающегоЗначенияXS = XSMinInclusiveFacet;
interface ControlCollapseMode {
}
interface TextBox {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	ChoiceListButton: boolean;
	КнопкаСпискаВыбора: boolean;
	HorizontalAlign: HorizontalAlign;
	ГоризонтальноеПоложение: HorizontalAlign;
	VerticalAlign: VerticalAlign;
	ВертикальноеПоложение: VerticalAlign;
	ChoiceButton: boolean;
	КнопкаВыбора: boolean;
	ClearButton: boolean;
	КнопкаОчистки: boolean;
	SpinButton: boolean;
	КнопкаРегулирования: boolean;
	OpenButton: boolean;
	КнопкаОткрытия: boolean;
	TextEdit: boolean;
	РедактированиеТекста: boolean;
	Wrap: boolean;
	АвтоПереносСтрок: boolean;
	MarkNegatives: boolean;
	ВыделятьОтрицательные: boolean;
	ReadOnly: boolean;
	ТолькоПросмотр: boolean;
	ChoiceButtonPicture: Picture;
	КартинкаКнопкиВыбора: Picture;
	ChoiceListHeight: number;
	ВысотаСпискаВыбора: number;
	ChoiceListWidth: number;
	ШиринаСпискаВыбора: number;
	Picture: Picture;
	Картинка: Picture;
	ChoiceList: ValueList;
	СписокВыбора: ValueList;
	HorizontalScrollBar: ScrollBarUse;
	ГоризонтальнаяПолосаПрокрутки: ScrollBarUse;
	VerticalScrollBar: ScrollBarUse;
	ВертикальнаяПолосаПрокрутки: ScrollBarUse;
	AutoChoiceIncomplete: boolean;
	АвтоВыборНезаполненного: boolean;
	ChoiceIncomplete: boolean;
	ВыборНезаполненного: boolean;
	IncompleteChoiceMode: IncompleteChoiceMode;
	РежимВыбораНезаполненного: IncompleteChoiceMode;
	SelectedText: string;
	ВыделенныйТекст: string;
	AutoMarkIncomplete: boolean;
	АвтоОтметкаНезаполненного: boolean;
	MarkIncomplete: boolean;
	ОтметкаНезаполненного: boolean;
	TypeLinkItem;
	ЭлементСвязиПоТипу;
	Shortcut: Shortcut;
	СочетаниеКлавиш: Shortcut;
	ChooseType: boolean;
	ВыбиратьТип: boolean;
	TypeRestriction;
	ОграничениеТипа;
	Format: string;
	Формат: string;
	ListChoiceMode: boolean;
	РежимВыбораИзСписка: boolean;
	SetTextSelectionBounds(... params): void;
	УстановитьГраницыВыделения(... params): void;
	GetTextSelectionBounds(... params): void;
	ПолучитьГраницыВыделения(... params): void;
}
declare type ПолеВвода = TextBox;
interface EnumPredefinedDataUpdate {
	Auto;
	Авто;
	AutoUpdate;
	ОбновлятьАвтоматически;
	DontAutoUpdate;
	НеОбновлятьАвтоматически;
}
declare type ПеречислениеОбновлениеПредопределенныхДанных = EnumPredefinedDataUpdate;
interface GeographicalSchemaPolygonObjectContours {
	Count(): number;
	Количество(): number;
	Get(... params): GeographicalSchemaPolygonObjectContours;
	Получить(... params): GeographicalSchemaPolygonObjectContours;
	Add(): GeographicalSchemaPolygonObjectContours;
	Добавить(): GeographicalSchemaPolygonObjectContours;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
}
interface DataExchangeParameters {
	Recipients: NodeSet;
	Получатели: NodeSet;
	Sender;
	Отправитель;
	Load;
	Загрузка;
}
interface DataCompositionGroupPlacement {
}
interface FileAccess {
}
interface EnumExternalDataSourceState {
	Connected;
	Подключен;
	Disconnected;
	Отключен;
}
declare type ПеречислениеСостояниеВнешнегоИсточникаДанных = EnumExternalDataSourceState;
interface MetadataObjectCollection {
}
interface EnumContactDataAddressType {
	Work;
	Рабочий;
	Home;
	Домашний;
	Other;
	Другой;
}
declare type ПеречислениеТипАдресаДанныхКонтакта = EnumContactDataAddressType;
interface GraphicalSchemaItemConnectionLine {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	LineColor: ColorType;
	ЦветЛинии: ColorType;
	Line;
	Линия;
	TextLocation: ConnectorTextLocation;
	ПоложениеТекста: ConnectorTextLocation;
	EndItem;
	КонецЭлемент;
	EndSide: GraphicalSchemeElementSideType;
	КонецСторона: GraphicalSchemeElementSideType;
	EndCase;
	КонецВариант;
	EndLeft: number;
	КонецЛево: number;
	EndTop: number;
	КонецВерх: number;
	BeginItem;
	НачалоЭлемент;
	BeginSide: GraphicalSchemeElementSideType;
	НачалоСторона: GraphicalSchemeElementSideType;
	BeginCase;
	НачалоВариант;
	BeginLeft: number;
	НачалоЛево: number;
	BeginTop: number;
	НачалоВерх: number;
}
interface StandardTabularSectionDescription {
	Presentation();
	Представление();
}
interface DynamicListRow {
	Data: FormDataStructure;
	Данные: FormDataStructure;
	Appearance: DynamicListCellAppearances;
	Оформление: DynamicListCellAppearances;
}
interface DynamicListRows {
	Count(): number;
	Количество(): number;
	Get(... params): DynamicListRow;
	Получить(... params): DynamicListRow;
	GetKeys(): ArrayV8;
	ПолучитьКлючи(): ArrayV8;
}
interface EnumReportBuilderDetailsFillType {
	DontFill;
	НеЗаполнять;
	GroupValues;
	ЗначенияГруппировок;
	Details;
	Расшифровка;
}
declare type ПеречислениеВидЗаполненияРасшифровкиПостроителяОтчета = EnumReportBuilderDetailsFillType;
interface DataCompositionGroupFieldsPlacement {
}
interface EnumDataAnalysisColumnTypeDecisionTree {
	NotUsed;
	НеИспользуемая;
	Input;
	Входная;
	Predictable;
	Прогнозируемая;
}
declare type ПеречислениеТипКолонкиАнализаДанныхДеревоРешений = EnumDataAnalysisColumnTypeDecisionTree;
interface PostingModeUse {
}
interface JSONDateWritingVariant {
}
interface JSONSerializerSettings {
	DateSerializationFormat: JSONDateFormat;
	ФорматСериализацииДаты: JSONDateFormat;
	SerializeArraysAsObjects: boolean;
	СериализовыватьМассивыКакОбъекты: boolean;
	DateWritingVariant: JSONDateWritingVariant;
	ВариантЗаписиДаты: JSONDateWritingVariant;
}
declare type НастройкиСериализацииJSON = JSONSerializerSettings;
interface DataCompositionDetailsFieldValues {
	Add(): DataCompositionDetailsFieldValue;
	Добавить(): DataCompositionDetailsFieldValue;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionDetailsFieldValue;
	Найти(... params): DataCompositionDetailsFieldValue;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionDetailsFieldValue;
	Вставить(... params): DataCompositionDetailsFieldValue;
	Get(... params): DataCompositionDetailsFieldValue;
	Получить(... params): DataCompositionDetailsFieldValue;
}
declare type ЗначенияПолейРасшифровкиКомпоновкиДанных = DataCompositionDetailsFieldValues;
interface FormDataStructureAndCollection {
	Count(): number;
	Количество(): number;
	Add(): FormDataCollectionItem;
	Добавить(): FormDataCollectionItem;
	Insert(... params): FormDataCollectionItem;
	Вставить(... params): FormDataCollectionItem;
	Delete(... params): void;
	Удалить(... params): void;
	IndexOf(... params): number;
	Индекс(... params): number;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Get(... params): FormDataCollectionItem;
	Получить(... params): FormDataCollectionItem;
	FindByID(... params): FormDataCollectionItem;
	НайтиПоИдентификатору(... params): FormDataCollectionItem;
	Total(... params): number;
	Итог(... params): number;
	Sort(... params): void;
	Сортировать(... params): void;
	FindRows(... params): ArrayV8;
	НайтиСтроки(... params): ArrayV8;
	Load(... params): void;
	Загрузить(... params): void;
	Unload(... params): ValueTable;
	Выгрузить(... params): ValueTable;
	Property(... params): boolean;
	Свойство(... params): boolean;
}
interface GraphicalSchemaField {
}
declare type ПолеГрафическойСхемы = GraphicalSchemaField;
interface EnumShowInChart {
	Auto;
	Авто;
	Show;
	Отображать;
	DontShow;
	НеОтображать;
}
declare type ПеречислениеОтображениеВДиаграмме = EnumShowInChart;
interface CryptoCertificateStoreType {
}
interface FormAttribute {
	Path: string;
	Путь: string;
	Name: string;
	Имя: string;
	Title: string;
	Заголовок: string;
	ValueType: TypeDescription;
	ТипЗначения: TypeDescription;
	StoredData: boolean;
	СохраняемыеДанные: boolean;
}
declare type РеквизитФормы = FormAttribute;
interface AssociationRule {
	Antecedent: FixedArray;
	Предпосылка: FixedArray;
	Consequent: FixedArray;
	Следствие: FixedArray;
	CaseCount: number;
	КоличествоСлучаев: number;
	Support: number;
	ПроцентСлучаев: number;
	Confidence: number;
	Достоверность: number;
	Importance: number;
	Значимость: number;
}
interface HTMLNodeList {
	Count(): number;
	Количество(): number;
	Item(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Элемент(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
}
interface EnumQuerySchemaOrderDirection {
	Ascending;
	ПоВозрастанию;
	Descending;
	ПоУбыванию;
	HierarchyAscending;
	ПоВозрастаниюИерархии;
	HierarchyDescending;
	ПоУбываниюИерархии;
}
declare type ПеречислениеНаправлениеПорядкаСхемыЗапроса = EnumQuerySchemaOrderDirection;
interface DeliverableNotificationSubscriberID {
	SubscriberType: DeliverableNotificationSubscriberType;
	ТипПодписчика: DeliverableNotificationSubscriberType;
	DeviceID: string;
	ИдентификаторУстройства: string;
	ApplicationID: string;
	ИдентификаторПриложения: string;
	InfoBaseID: string;
	ИдентификаторИнформационнойБазы: string;
}
interface COMSafeArray {
	GetType();
	GetLength(... params);
	GetLowerBound(... params);
	GetUpperBound(... params);
	GetValue(... params);
	SetValue(... params): void;
	Unload();
	Выгрузить();
	IsResizable();
	Resize(... params): void;
	GetDimensions();
}
interface FormFlowchartField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	Output: UseOutput;
	Вывод: UseOutput;
	Edit: boolean;
	Редактирование: boolean;
	CurrentItem;
	ТекущийЭлемент;
	BorderColor: Color;
	ЦветРамки: Color;
}
interface ValueStorage {
	Get();
	Получить();
}
declare type ХранилищеЗначения = ValueStorage;
interface AccumulationRegisterAggregates {
	Count(): number;
	Количество(): number;
	Get(... params);
	Получить(... params);
}
interface DataWriter {
	TextEncoding: string;
	КодировкаТекста: string;
	ByteOrder: ByteOrder;
	ПорядокБайтов: ByteOrder;
	LineSplitter: string;
	РазделительСтрок: string;
	ConvertibleSplitterOfLines: string;
	КонвертируемыйРазделительСтрок: string;
	TargetStream(): Stream;
	ЦелевойПоток(): Stream;
	Flush(): void;
	СброситьБуферы(): void;
	Close(): void;
	Закрыть(): void;
	WriteByte(... params): void;
	ЗаписатьБайт(... params): void;
	WriteInt16(... params): void;
	ЗаписатьЦелое16(... params): void;
	WriteInt32(... params): void;
	ЗаписатьЦелое32(... params): void;
	WriteInt64(... params): void;
	ЗаписатьЦелое64(... params): void;
	WriteBinaryDataBuffer(... params): void;
	ЗаписатьБуферДвоичныхДанных(... params): void;
	Write(... params): void;
	Записать(... params): void;
	WriteChars(... params): void;
	ЗаписатьСимволы(... params): void;
	WriteLine(... params): void;
	ЗаписатьСтроку(... params): void;
	BeginFlush(... params): void;
	НачатьСбросБуферов(... params): void;
	BeginClose(... params): void;
	НачатьЗакрытие(... params): void;
	BeginWriteByte(... params): void;
	НачатьЗаписьБайта(... params): void;
	BeginWriteIn16(... params): void;
	НачатьЗаписьЦелого16(... params): void;
	BeginWriteInt32(... params): void;
	НачатьЗаписьЦелого32(... params): void;
	BeginWriteInt64(... params): void;
	НачатьЗаписьЦелого64(... params): void;
	BeginWriteBinaryDataBuffer(... params): void;
	НачатьЗаписьБуфераДвоичныхДанных(... params): void;
	BeginWrite(... params): void;
	НачатьЗапись(... params): void;
	BeginWriteChars(... params): void;
	НачатьЗаписьСимволов(... params): void;
	BeginWriteLine(... params): void;
	НачатьЗаписьСтроки(... params): void;
}
declare type ЗаписьДанных = DataWriter;
interface EnumMaxSeries {
	NotDefined;
	НеЗадано;
	Limited;
	Ограничено;
	Percent;
	Процент;
}
declare type ПеречислениеМаксимумСерий = EnumMaxSeries;
interface PictureProcessor {
	SelectKeyArea(... params): Picture;
	ВыделитьЗначимуюЧасть(... params): Picture;
	Rotate(... params): Picture;
	Повернуть(... params): Picture;
}
declare type ОбработкаКартинок = PictureProcessor;
interface GeographicalSchemaObjectPolygon {
	Details;
	Расшифровка;
	ToolTip: string;
	Подсказка: string;
	ShowData: boolean;
	ОтображатьДанные: boolean;
	Visible: boolean;
	Видимость: boolean;
	Value;
	Значение;
	Layer: GeographicalSchemaLayer;
	Слой: GeographicalSchemaLayer;
	BoundaryBox: GeographicalSchemaRectangle;
	ОграничивающийПрямоугольник: GeographicalSchemaRectangle;
	Contours;
	Контуры;
	Color: Color;
	Цвет: Color;
	BorderColor: Color;
	ЦветГраницы: Color;
}
interface EnumSpreadsheetDocumentDrawingLineType {
	None;
	НетЛинии;
	Solid;
	Сплошная;
	Dashed;
	Пунктир;
	Dotted;
	Точечная;
	DashDotted;
	ПунктирТочка;
	DashDottedDotted;
	ПунктирТочкаТочка;
}
declare type ПеречислениеТипЛинииРисункаТабличногоДокумента = EnumSpreadsheetDocumentDrawingLineType;
interface EnumDataCompositionSettingsItemState {
	Enabled;
	Включен;
	Disabled;
	Отключен;
	DeletedByUser;
	УдаленПользователем;
}
declare type ПеречислениеСостояниеЭлементаНастройкиКомпоновкиДанных = EnumDataCompositionSettingsItemState;
interface EnumHTMLDocumentFieldMode {
	Browse;
	Просмотр;
	Design;
	Редактирование;
}
declare type ПеречислениеРежимПоляHTMLДокумента = EnumHTMLDocumentFieldMode;
interface CommandInterfaceSettings {
	SectionsPanelRepresentation;
	ОтображениеПанелиРазделов;
}
declare type НастройкиКомандногоИнтерфейса = CommandInterfaceSettings;
interface EnumDataCompositionBalanceType {
	None;
	Нет;
	OpeningBalance;
	НачальныйОстаток;
	ClosingBalance;
	КонечныйОстаток;
}
declare type ПеречислениеТипОстаткаКомпоновкиДанных = EnumDataCompositionBalanceType;
interface EnumDataCompositionResultItemType {
	Begin;
	Начало;
	End;
	Конец;
	BeginAndEnd;
	НачалоИКонец;
}
declare type ПеречислениеТипЭлементаРезультатаКомпоновкиДанных = EnumDataCompositionResultItemType;
interface DataCompositionAreaTemplateChartGroupAppearance {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
}
interface EnumWSParameterDirection {
	In;
	Входной;
	Out;
	Выходной;
	InOut;
	ВходнойВыходной;
}
declare type ПеречислениеWSНаправлениеПараметра = EnumWSParameterDirection;
interface EnumChartLabelType {
	None;
	Нет;
	Series;
	Серия;
	Value;
	Значение;
	Percent;
	Процент;
	SeriesPercent;
	СерияПроцент;
	SeriesValue;
	СерияЗначение;
	SeriesValuePercent;
	СерияЗначениеПроцент;
	ValuePercent;
	ЗначениеПроцент;
	Point;
	Точка;
	PointPercent;
	ТочкаПроцент;
	PointValue;
	ТочкаЗначение;
	PointValuePercent;
	ТочкаЗначениеПроцент;
	SeriesPoint;
	СерияТочка;
	SeriesPointPercent;
	СерияТочкаПроцент;
	SeriesPointValue;
	СерияТочкаЗначение;
	SeriesPointValuePercent;
	СерияТочкаЗначениеПроцент;
	ValueSize;
	ЗначениеРазмер;
	SeriesSize;
	СерияРазмер;
	SeriesValueSize;
	СерияЗначениеРазмер;
	SeriesPointSize;
	СерияТочкаРазмер;
	SeriesPointValueSize;
	СерияТочкаЗначениеРазмер;
	PointSize;
	ТочкаРазмер;
	PointValueSize;
	ТочкаЗначениеРазмер;
}
declare type ПеречислениеВидПодписейКДиаграмме = EnumChartLabelType;
interface WSOperation {
	Name;
	Имя;
	Parameters;
	Параметры;
	ReturnValue;
	ВозвращаемоеЗначение;
	Documentation;
	Документация;
}
interface WSOperationCollection {
	Count(): number;
	Количество(): number;
	Get(... params): WSOperation;
	Получить(... params): WSOperation;
}
interface QuestionDialogMode {
}
interface HomePageForms {
	LeftColumn: ArrayV8;
	ЛеваяКолонка: ArrayV8;
	RightColumn: ArrayV8;
	ПраваяКолонка: ArrayV8;
}
declare type СоставФормНачальнойСтраницы = HomePageForms;
interface HomePageSettings {
	GetForms(): HomePageForms;
	ПолучитьСоставФорм(): HomePageForms;
	SetForms(... params): void;
	УстановитьСоставФорм(... params): void;
}
declare type НастройкиНачальнойСтраницы = HomePageSettings;
interface FormPlannerField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	SelectedItems: FixedArray;
	ВыделенныеЭлементы: FixedArray;
	EnableStartDrag: boolean;
	РазрешитьНачалоПеретаскивания: boolean;
	EnableDrag: boolean;
	РазрешитьПеретаскивание: boolean;
}
interface EnumChartLabelsOrientation {
	Horizontal;
	Горизонтально;
	Vertical;
	Вертикально;
	Auto;
	Авто;
}
declare type ПеречислениеОриентацияМетокДиаграммы = EnumChartLabelsOrientation;
interface EnumPivotChartType {
	Column;
	Гистограмма;
	Column3D;
	ГистограммаОбъемная;
}
declare type ПеречислениеТипСводнойДиаграммы = EnumPivotChartType;
interface ReportBuilderDimensionType {
}
interface TransferableFileDescription {
	Location;
	Хранение;
	Name;
	Имя;
}
declare type ОписаниеПередаваемогоФайла = TransferableFileDescription;
interface HTMLTableRowElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	RowIndex: string;
	ИндексСтроки: string;
	Cells: string;
	Ячейки: string;
	Align: string;
	Выравнивание: string;
	BgColor: string;
	ЦветФона: string;
	VAlign: string;
	ВертикальноеПоложение: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	InsertCell(... params): Map;
	ВставитьЯчейку(... params): Map;
	DeleteCell(): void;
	УдалитьЯчейку(): void;
}
interface DataCompositionFieldDetailsItem {
	ID: DataCompositionDetailsID;
	Идентификатор: DataCompositionDetailsID;
	MainAction: DataCompositionDetailsProcessingAction;
	ОсновноеДействие: DataCompositionDetailsProcessingAction;
	GetParents(): ArrayV8;
	ПолучитьРодителей(): ArrayV8;
	GetFields(): DataCompositionDetailsFieldValues;
	ПолучитьПоля(): DataCompositionDetailsFieldValues;
}
declare type ЭлементРасшифровкиКомпоновкиДанныхПоля = DataCompositionFieldDetailsItem;
interface EnumChartSplineMode {
	None;
	Нет;
	SmoothCurve;
	ГладкаяКривая;
}
declare type ПеречислениеРежимСглаживанияДиаграммы = EnumChartSplineMode;
interface ContactManager {
	GetContact(... params): AccountContactData;
	ПолучитьКонтакт(... params): AccountContactData;
	AddContact(... params): LocalContactKey;
	ДобавитьКонтакт(... params): LocalContactKey;
	UpdateContact(... params): void;
	ИзменитьКонтакт(... params): void;
	DeleteContact(... params): void;
	УдалитьКонтакт(... params): void;
	GetContactCount(): number;
	ПолучитьКоличествоКонтактов(): number;
	FindContacts(... params): ArrayV8;
	НайтиКонтакты(... params): ArrayV8;
	GetContactAccounts(): ArrayV8;
	ПолучитьУчетныеЗаписиКонтактов(): ArrayV8;
	GetLocalContactAccount(): ContactAccount;
	ПолучитьЛокальнуюУчетнуюЗаписьКонтактов(): ContactAccount;
	GlobalContactsKeysSupported(): boolean;
	ПоддерживаютсяГлобальныеКлючиКонтактов(): boolean;
	ContactEditingSupported(... params): boolean;
	ПоддерживаетсяИзменениеКонтакта(... params): boolean;
	ContactsAddingSupported(): boolean;
	ПоддерживаетсяДобавлениеКонтактов(): boolean;
}
declare type МенеджерКонтактов = ContactManager;
interface DataAnalysisColumnsSetting {
	Add(... params): DataAnalysisColumnsControl;
	Добавить(... params): DataAnalysisColumnsControl;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataAnalysisColumnsControl;
	Найти(... params): DataAnalysisColumnsControl;
	Get(... params);
	Получить(... params);
}
interface WorkingDateMode {
}
interface EnumChartScaleTitlePlacement {
	WithAxis;
	РядомСОсью;
	PlotArea;
	ВОбластиПостроения;
	SpecialArea;
	ВВыделеннойОбласти;
}
declare type ПеречислениеРасположениеЗаголовкаШкалыДиаграммы = EnumChartScaleTitlePlacement;
interface DataAnalysisDiscreteFieldInformation {
	Name: string;
	Имя: string;
	Count: number;
	Количество: number;
	UniqueValueCount: number;
	КоличествоУникальных: number;
	Mode;
	Мода;
	FrequencyTable: ValueTable;
	ТаблицаЧастот: ValueTable;
}
interface DragAllowedActions {
}
interface EnumItemHeightControlVariant {
	Auto;
	Авто;
	UseHeightInFormRows;
	ВСтрокахФормы;
	UseContentHeight;
	ПоСодержимому;
}
declare type ПеречислениеВариантУправленияВысотойЭлемента = EnumItemHeightControlVariant;
interface GanttChartTitleArea {
	Text: string;
	Текст: string;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
}
interface GanttChart {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Outline: boolean;
	Окантовка: boolean;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	ShowLegend: boolean;
	ОтображатьЛегенду: boolean;
	BackColor: Color;
	ЦветФона: Color;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	AutoMinValue: boolean;
	АвтоМинимальноеЗначение: boolean;
	RefreshEnabled: boolean;
	Обновление: boolean;
	SplineMode: ChartSplineMode;
	РежимСглаживания: ChartSplineMode;
	SplineStrain: number;
	НатяжениеСглаживания: number;
	SemitransparencyMode: ChartSemitransparencyMode;
	РежимПолупрозрачности: ChartSemitransparencyMode;
	SemitransparencyPercent: number;
	ПроцентПолупрозрачности: number;
	FunnelNeckHeight: number;
	ВысотаГорлаВоронки: number;
	FunnelNeckWidth: number;
	ШиринаГорлаВоронки: number;
	FunnelSpace: number;
	ПробелыВоронки: number;
	ValuesBySeriesConnection: ChartValuesBySeriesConnectionType;
	СоединениеЗначенийПоСериям: ChartValuesBySeriesConnectionType;
	ValuesBySeriesConnectionLines: Line;
	ЛинииСоединенияЗначенийПоСериям: Line;
	ValuesBySeriesConnectionColor: Color;
	ЦветСоединенияЗначенийПоСериям: Color;
	Animation: ChartAnimation;
	Анимация: ChartAnimation;
	SeriesOrderInLegend: ChartSeriesOrderInLegend;
	ПорядокСерийВЛегенде: ChartSeriesOrderInLegend;
	ValuesAxis: ChartAxis;
	ОсьЗначений: ChartAxis;
	PointsAxis: ChartAxis;
	ОсьТочек: ChartAxis;
	PointsAxisValuesSource: ChartPointsAxisValuesSource;
	ИсточникЗначенийОсиТочек: ChartPointsAxisValuesSource;
	PointsAxisSeries: ChartSeries;
	СерияНаОсиТочек: ChartSeries;
	BubbleSizeValueSource: ChartBubbleSizeValueSource;
	ИсточникЗначенияРазмераПузырька: ChartBubbleSizeValueSource;
	BubbleSizeCommonSeries: ChartSeries;
	ОбщаяСерияРазмераПузырька: ChartSeries;
	BubbleSizing: ChartBubbleSizing;
	ВлияниеРазмераНаПузырек: ChartBubbleSizing;
	DefaultBubbleSize: number;
	РазмерПузырькаПоУмолчанию: number;
	MinBubbleSize: number;
	МинимальныйРазмерПузырька: number;
	MaxBubbleSize: number;
	МаксимальныйРазмерПузырька: number;
	BubbleChartNegativeValuesShowMode: BubbleChartNegativeValuesShowMode;
	ОтображениеОтрицательныхЗначенийПузырьковойДиаграммы: BubbleChartNegativeValuesShowMode;
	PointsConnection: ChartPointsConnectionType;
	СоединениеТочек: ChartPointsConnectionType;
	BarChartPointsOrder: BarChartPointsOrder;
	ПорядокОтображенияТочекГоризонтальнойГистограммы: BarChartPointsOrder;
	GradientPaletteMaxColors: number;
	МаксимальноеКоличествоЦветовГрадиентнойПалитры: number;
	GradientPaletteStartColor: Color;
	ЦветНачалаГрадиентнойПалитры: Color;
	GradientPaletteEndColor: Color;
	ЦветКонцаГрадиентнойПалитры: Color;
	Points: GanttChartPointCollection;
	Точки: GanttChartPointCollection;
	Series: GanttChartSeriesCollection;
	Серии: GanttChartSeriesCollection;
	TitleArea: GanttChartTitleArea;
	ОбластьЗаголовка: GanttChartTitleArea;
	LegendArea: GanttChartLegendArea;
	ОбластьЛегенды: GanttChartLegendArea;
	PlotArea: GanttChartPlotArea;
	ОбластьПостроения: GanttChartPlotArea;
	ShowEmptyValues: boolean;
	ОтображатьПустыеЗначения: boolean;
	ScaleKeeping: GanttChartScaleKeeping;
	ПоддержкаМасштаба: GanttChartScaleKeeping;
	PeriodicVariantUnit: TimeScaleUnitType;
	ЕдиницаПериодическогоВарианта: TimeScaleUnitType;
	PeriodicVariantRepetition: number;
	КратностьПериодическогоВарианта: number;
	AutoDetectWholeInterval: boolean;
	АвтоОпределениеПолногоИнтервала: boolean;
	BeginOfWholeInterval: Date;
	НачалоПолногоИнтервала: Date;
	EndOfWholeInterval: Date;
	КонецПолногоИнтервала: Date;
	IntervalRepresentation: GanttChartIntervalRepresentation;
	ОтображениеИнтервала: GanttChartIntervalRepresentation;
	AutoPointText: boolean;
	АвтоУстановкаТекстаТочек: boolean;
	AutoSeriesText: boolean;
	АвтоУстановкаТекстаСерий: boolean;
	VerticalStretch: GanttChartVerticalStretch;
	РастягиваниеПоВертикали: GanttChartVerticalStretch;
	VerticalScroll: boolean;
	ВертикальнаяПрокрутка: boolean;
	ValueTextRepresentation: GanttChartValueTextRepresentation;
	ОтображениеТекстаЗначения: GanttChartValueTextRepresentation;
	BackgroundIntervals: GanttChartBackgroundIntervalCollection;
	ИнтервалыФона: GanttChartBackgroundIntervalCollection;
	GetPicture(... params): Picture;
	ПолучитьКартинку(... params): Picture;
	GetValue(... params): GanttChartValue;
	ПолучитьЗначение(... params): GanttChartValue;
	SetPoint(... params): GanttChartPoint;
	УстановитьТочку(... params): GanttChartPoint;
	SetSeries(... params): GanttChartSeries;
	УстановитьСерию(... params): GanttChartSeries;
	PointExpanded(... params): boolean;
	РазвернутаТочка(... params): boolean;
	ExpandPoint(... params): void;
	РазвернутьТочку(... params): void;
	CollapsePoint(... params): void;
	СвернутьТочку(... params): void;
	ShowPointLevel(... params): void;
	ПоказатьУровеньТочек(... params): void;
	SeriesExpanded(... params): boolean;
	РазвернутаСерия(... params): boolean;
	ExpandSeries(... params): void;
	РазвернутьСерию(... params): void;
	CollapseSeries(... params): void;
	СвернутьСерию(... params): void;
	ShowSeriesLevel(... params): void;
	ПоказатьУровеньСерий(... params): void;
	SetWholeInterval(... params): void;
	УстановитьПолныйИнтервал(... params): void;
	Clear(): void;
	Очистить(): void;
}
declare type ДиаграммаГанта = GanttChart;
interface EnumCommonAttributeUse {
	Auto;
	Авто;
	Use;
	Использовать;
	DontUse;
	НеИспользовать;
}
declare type ПеречислениеИспользованиеОбщегоРеквизита = EnumCommonAttributeUse;
interface DataCompositionAvailableSettingsSource {
}
declare type ИсточникДоступныхНастроекКомпоновкиДанных = DataCompositionAvailableSettingsSource;
interface SectionsPanelRepresentation {
}
interface EnumChartLineType {
	None;
	НетЛинии;
	Solid;
	Сплошная;
	Dotted;
	Точечная;
	Dashed;
	Пунктир;
	DashDotted;
	ПунктирТочка;
	DashDottedDotted;
	ПунктирТочкаТочка;
}
declare type ПеречислениеТипЛинииДиаграммы = EnumChartLineType;
declare function Add();
declare function Добавить();
declare function Delete(... params): void;
declare function Удалить(... params): void;
declare function Clear(): void;
declare function Очистить(): void;
declare function Count(): number;
declare function Количество(): number;
declare function IndexOf(... params): number;
declare function Индекс(... params): number;
declare function Find(... params);
declare function Найти(... params);
declare function Move(... params): void;
declare function Сдвинуть(... params): void;
declare function Insert(... params);
declare function Вставить(... params);
declare function Get(... params);
declare function Получить(... params);
interface ChartsViewSettings {
	Animation: ChartAnimation;
	Анимация: ChartAnimation;
}
declare type НастройкаОтображенияДиаграмм = ChartsViewSettings;
interface DOMNodeWriter {
	NamespaceContext: XMLNamespaceContext;
	КонтекстПространствИмен: XMLNamespaceContext;
	DOMNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	УзелDOM: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	WriteXMLDeclaration(): void;
	ЗаписатьОбъявлениеXML(): void;
	WriteStartElement(... params): void;
	ЗаписатьНачалоЭлемента(... params): void;
	WriteEndElement(): void;
	ЗаписатьКонецЭлемента(): void;
	WriteText(... params): void;
	ЗаписатьТекст(... params): void;
	WriteAttribute(... params): void;
	ЗаписатьАтрибут(... params): void;
	WriteNamespaceMapping(... params): void;
	ЗаписатьСоответствиеПространстваИмен(... params): void;
	WriteProcessingInstruction(... params): void;
	ЗаписатьИнструкциюОбработки(... params): void;
	WriteComment(... params): void;
	ЗаписатьКомментарий(... params): void;
	WriteRaw(... params): void;
	ЗаписатьБезОбработки(... params): void;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	WriteDocumentType(... params): void;
	ЗаписатьТипДокумента(... params): void;
	WriteCDATASection(... params): void;
	ЗаписатьСекциюCDATA(... params): void;
	WriteEntityReference(... params): void;
	ЗаписатьСсылкуНаСущность(... params): void;
	WriteStartAttribute(... params): void;
	ЗаписатьНачалоАтрибута(... params): void;
	WriteEndAttribute(): void;
	ЗаписатьКонецАтрибута(): void;
	WriteCurrent(... params): void;
	ЗаписатьТекущий(... params): void;
	Open(... params): void;
	Открыть(... params): void;
	Close(): void;
	Закрыть(): void;
}
declare type ЗаписьУзловDOM = DOMNodeWriter;
interface EnumChartValuesBySeriesConnectionType {
	None;
	Нет;
	EdgesConnection;
	СоединениеКраев;
}
declare type ПеречислениеТипСоединенияЗначенийПоСериямДиаграммы = EnumChartValuesBySeriesConnectionType;
interface FormPage {
	Picture: Picture;
	Картинка: Picture;
	Group: ChildFormItemsGroup;
	Группировка: ChildFormItemsGroup;
	ItemsAndTitlesAlign: ItemsAndTitlesAlignVariant;
	ВыравниваниеЭлементовИЗаголовков: ItemsAndTitlesAlignVariant;
	HorizontalSpacing: FormItemSpacing;
	ГоризонтальныйИнтервал: FormItemSpacing;
	VerticalSpacing: FormItemSpacing;
	ВертикальныйИнтервал: FormItemSpacing;
	ChildItemsHorizontalAlign: ItemHorizontalLocation;
	ГоризонтальноеПоложениеПодчиненных: ItemHorizontalLocation;
	ChildItemsVerticalAlign: ItemVerticalAlign;
	ВертикальноеПоложениеПодчиненных: ItemVerticalAlign;
	ChildItemsWidth: ChildFormItemsWidth;
	ШиринаПодчиненныхЭлементов: ChildFormItemsWidth;
	Format: string;
	Формат: string;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	TitleDataPath: string;
	ПутьКДаннымЗаголовка: string;
	BackColor: Color;
	ЦветФона: Color;
	VerticalScrollOnReduceSize: boolean;
	ВертикальнаяПрокруткаПриСжатии: boolean;
}
interface InAppPurchasesManager {
	PurchasesSupported(): boolean;
	ПоддерживаютсяПокупки(): boolean;
	PurchaseConsumingSupported(): boolean;
	ПоддерживаетсяРасходованиеПокупок(): boolean;
	GetList(... params): ArrayV8;
	ПолучитьСписок(... params): ArrayV8;
	UpdatePurchaseInformation(... params): void;
	ОбновитьИнформациюОПриобретении(... params): void;
	Purchased(... params): boolean;
	Приобретена(... params): boolean;
	BeginPurchasing(... params): boolean;
	НачатьПриобретение(... params): boolean;
	ConsumePurchase(... params): boolean;
	ИзрасходоватьПокупку(... params): boolean;
}
declare type МенеджерВстроенныхПокупок = InAppPurchasesManager;
interface CommonAttributeUse {
}
interface EnumChartBubbleSizing {
	IncreaseDiameter;
	УвеличениеДиаметра;
	IncreaseArea;
	УвеличениеПлощади;
	DecreaseDiameter;
	УменьшениеДиаметра;
	DecreaseArea;
	УменьшениеПлощади;
}
declare type ПеречислениеВлияниеРазмераНаПузырекДиаграммы = EnumChartBubbleSizing;
interface PivotChartScaleKeeping {
}
interface PivotChart {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Outline: boolean;
	Окантовка: boolean;
	Light: boolean;
	Свет: boolean;
	Gradient: boolean;
	Градиент: boolean;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	ShowLegend: boolean;
	ОтображатьЛегенду: boolean;
	BackColor: Color;
	ЦветФона: Color;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	LabelType: ChartLabelType;
	ВидПодписей: ChartLabelType;
	LabelDelimiter: string;
	РазделительПодписей: string;
	LabelLocation: ChartLabelLocation;
	ПоложениеПодписей: ChartLabelLocation;
	ValueLabelFormat: string;
	ФорматЗначенийВПодписях: string;
	PercentLabelFormat: string;
	ФорматПроцентовВПодписях: string;
	LabelTextColor: Color;
	ЦветТекстаПодписей: Color;
	LabelFont: Font;
	ШрифтПодписей: Font;
	TransparentLabel: boolean;
	ПрозрачныйФонПодписей: boolean;
	LabelBackColor: Color;
	ЦветФонаПодписей: Color;
	LabelBorder: Border;
	РамкаПодписей: Border;
	LabelBorderColor: Color;
	ЦветРамкиПодписей: Color;
	SpaceMode: ChartSpaceMode;
	РежимПробелов: ChartSpaceMode;
	AutoMinValue: boolean;
	АвтоМинимальноеЗначение: boolean;
	SplineMode: ChartSplineMode;
	РежимСглаживания: ChartSplineMode;
	SplineStrain: number;
	НатяжениеСглаживания: number;
	SemitransparencyMode: ChartSemitransparencyMode;
	РежимПолупрозрачности: ChartSemitransparencyMode;
	SemitransparencyPercent: number;
	ПроцентПолупрозрачности: number;
	FunnelNeckHeight: number;
	ВысотаГорлаВоронки: number;
	FunnelNeckWidth: number;
	ШиринаГорлаВоронки: number;
	FunnelSpace: number;
	ПробелыВоронки: number;
	ValuesBySeriesConnection: ChartValuesBySeriesConnectionType;
	СоединениеЗначенийПоСериям: ChartValuesBySeriesConnectionType;
	ValuesBySeriesConnectionLines: Line;
	ЛинииСоединенияЗначенийПоСериям: Line;
	ValuesBySeriesConnectionColor: Color;
	ЦветСоединенияЗначенийПоСериям: Color;
	Animation: ChartAnimation;
	Анимация: ChartAnimation;
	SeriesOrderInLegend: ChartSeriesOrderInLegend;
	ПорядокСерийВЛегенде: ChartSeriesOrderInLegend;
	ValuesAxis: ChartAxis;
	ОсьЗначений: ChartAxis;
	PointsAxis: ChartAxis;
	ОсьТочек: ChartAxis;
	PointsAxisValuesSource: ChartPointsAxisValuesSource;
	ИсточникЗначенийОсиТочек: ChartPointsAxisValuesSource;
	PointsAxisSeries: ChartSeries;
	СерияНаОсиТочек: ChartSeries;
	BubbleSizeValueSource: ChartBubbleSizeValueSource;
	ИсточникЗначенияРазмераПузырька: ChartBubbleSizeValueSource;
	BubbleSizeCommonSeries: ChartSeries;
	ОбщаяСерияРазмераПузырька: ChartSeries;
	BubbleSizing: ChartBubbleSizing;
	ВлияниеРазмераНаПузырек: ChartBubbleSizing;
	DefaultBubbleSize: number;
	РазмерПузырькаПоУмолчанию: number;
	MinBubbleSize: number;
	МинимальныйРазмерПузырька: number;
	MaxBubbleSize: number;
	МаксимальныйРазмерПузырька: number;
	BubbleChartNegativeValuesShowMode: BubbleChartNegativeValuesShowMode;
	ОтображениеОтрицательныхЗначенийПузырьковойДиаграммы: BubbleChartNegativeValuesShowMode;
	PointsConnection: ChartPointsConnectionType;
	СоединениеТочек: ChartPointsConnectionType;
	BarChartPointsOrder: BarChartPointsOrder;
	ПорядокОтображенияТочекГоризонтальнойГистограммы: BarChartPointsOrder;
	GradientPaletteMaxColors: number;
	МаксимальноеКоличествоЦветовГрадиентнойПалитры: number;
	GradientPaletteStartColor: Color;
	ЦветНачалаГрадиентнойПалитры: Color;
	GradientPaletteEndColor: Color;
	ЦветКонцаГрадиентнойПалитры: Color;
	TitleArea: PivotChartTitleArea;
	ОбластьЗаголовка: PivotChartTitleArea;
	LegendArea: PivotChartLegendArea;
	ОбластьЛегенды: PivotChartLegendArea;
	PlotArea: PivotChartPlotArea;
	ОбластьПостроения: PivotChartPlotArea;
	DataSource;
	ИсточникДанных;
	PointsValuesShowMode: PivotChartValuesShowMode;
	ОтображениеЗначенийТочек: PivotChartValuesShowMode;
	SeriesValuesShowMode: PivotChartValuesShowMode;
	ОтображениеЗначенийСерий: PivotChartValuesShowMode;
	HorizontalScaleKeeping: PivotChartScaleKeeping;
	ГоризонтальнаяПоддержкаМасштаба: PivotChartScaleKeeping;
	HorizontalScaleValueCount: number;
	КоличествоЗначенийГоризонтальнойШкалы: number;
	HorizontalScaleValueMinWidth: number;
	МинимальнаяШиринаЗначенияГоризонтальнойШкалы: number;
	PivotChartType: PivotChartType;
	ТипСводнойДиаграммы: PivotChartType;
	FieldAreasTransparent: boolean;
	ПрозрачныйФонОбластейПолей: boolean;
	FieldAreasBackColor: Color;
	ЦветФонаОбластейПолей: Color;
	FieldAreasTextColor: Color;
	ЦветТекстаОбластейПолей: Color;
	ShowFields: boolean;
	ОтображатьПоля: boolean;
	Fields: PivotChartFieldCollection;
	Поля: PivotChartFieldCollection;
	Points: PivotChartFieldCollection;
	Точки: PivotChartFieldCollection;
	Series: PivotChartFieldCollection;
	Серии: PivotChartFieldCollection;
	Resources: PivotChartFieldCollection;
	Ресурсы: PivotChartFieldCollection;
	Attributes: PivotChartFieldCollection;
	Реквизиты: PivotChartFieldCollection;
	GetPicture(... params): Picture;
	ПолучитьКартинку(... params): Picture;
	Refresh(): void;
	Обновить(): void;
}
declare type СводнаяДиаграмма = PivotChart;
interface ZipFileEntries {
	Count(): number;
	Количество(): number;
	Find(... params): ZipFileEntry;
	Найти(... params): ZipFileEntry;
	Get(... params): ZipFileEntry;
	Получить(... params): ZipFileEntry;
}
interface EnumNumericValueType {
	Cardinal;
	Количественное;
	Ordinal;
	Порядковое;
}
declare type ПеречислениеВидЧисловогоЗначения = EnumNumericValueType;
interface RepresentableDocumentBatch {
	Content: RepresentableDocumentBatchItems;
	Состав: RepresentableDocumentBatchItems;
	Copies: number;
	КоличествоЭкземпляров: number;
	Collate: boolean;
	РазборПоКопиям: boolean;
	PrinterName: string;
	ИмяПринтера: string;
	DuplexPrinting: DuplexPrintingType;
	ДвусторонняяПечать: DuplexPrintingType;
	PrintAccuracy;
	ТочностьПечати;
	Output;
	Вывод;
	Title;
	Заголовок;
	Print(... params): void;
	Напечатать(... params): void;
	WriteFileForPrinting(... params): void;
	ЗаписатьФайлДляПечати(... params): void;
	BeginWritingFileForPrinting(... params): void;
	НачатьЗаписьФайлаДляПечати(... params): void;
}
declare type ПакетОтображаемыхДокументов = RepresentableDocumentBatch;
interface EnumGanttChartLinkType {
	BeginEnd;
	НачалоКонец;
	BeginBegin;
	НачалоНачало;
	EndBegin;
	КонецНачало;
	EndEnd;
	КонецКонец;
}
declare type ПеречислениеТипСвязиДиаграммыГанта = EnumGanttChartLinkType;
interface DataCompositionAppearanceTemplateArea {
	Add(): DataCompositionAppearanceTemplateAreaItem;
	Добавить(): DataCompositionAppearanceTemplateAreaItem;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAppearanceTemplateAreaItem;
	Вставить(... params): DataCompositionAppearanceTemplateAreaItem;
	Get(... params): DataCompositionAppearanceTemplateAreaItem;
	Получить(... params): DataCompositionAppearanceTemplateAreaItem;
}
declare type ОбластьМакетаОформленияКомпоновкиДанных = DataCompositionAppearanceTemplateArea;
interface EnumSpreadsheetDocumentPointerType {
	Special;
	Специальные;
	Regular;
	Обычные;
}
declare type ПеречислениеТипКурсоровТабличногоДокумента = EnumSpreadsheetDocumentPointerType;
interface FormDendrogramField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
}
interface DendrogramLinkCollection {
	Insert(... params): DendrogramLink;
	Вставить(... params): DendrogramLink;
	Add(): DendrogramLink;
	Добавить(): DendrogramLink;
	IndexOf(... params): number;
	Индекс(... params): number;
	Count(): number;
	Количество(): number;
	Clear(): void;
	Очистить(): void;
	Get(... params): DendrogramLink;
	Получить(... params): DendrogramLink;
	Move(... params): void;
	Сдвинуть(... params): void;
	Delete(... params): void;
	Удалить(... params): void;
}
interface DendrogramPlotArea {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	ValueScaleFormat: string;
	ФорматШкалыЗначений: string;
	LabelsOrientation: ChartLabelsOrientation;
	ОриентацияМеток: ChartLabelsOrientation;
	ScaleColor: Color;
	ЦветШкалы: Color;
	ScaleLines: Line;
	ЛинииШкалы: Line;
	Left: number;
	Лево: number;
	Top: number;
	Верх: number;
	Right: number;
	Право: number;
	Bottom: number;
	Низ: number;
	PointsScale: ChartScale;
	ШкалаТочек: ChartScale;
	ValuesScale: ChartScale;
	ШкалаЗначений: ChartScale;
	SeriesScale: ChartScale;
	ШкалаСерий: ChartScale;
	VerticalLabels: boolean;
	ВертикальныеМетки: boolean;
	LineColor: Color;
	ЦветЛиний: Color;
	LinkLines: Line;
	ЛинииСвязей: Line;
}
interface DendrogramOrientation {
}
interface Dendrogram {
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	ShowTitle: boolean;
	ОтображатьЗаголовок: boolean;
	BackColor: Color;
	ЦветФона: Color;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	AutoMinValue: boolean;
	АвтоМинимальноеЗначение: boolean;
	RefreshEnabled: boolean;
	Обновление: boolean;
	SplineMode: ChartSplineMode;
	РежимСглаживания: ChartSplineMode;
	SplineStrain: number;
	НатяжениеСглаживания: number;
	SemitransparencyMode: ChartSemitransparencyMode;
	РежимПолупрозрачности: ChartSemitransparencyMode;
	SemitransparencyPercent: number;
	ПроцентПолупрозрачности: number;
	FunnelNeckHeight: number;
	ВысотаГорлаВоронки: number;
	FunnelNeckWidth: number;
	ШиринаГорлаВоронки: number;
	FunnelSpace: number;
	ПробелыВоронки: number;
	ValuesBySeriesConnection: ChartValuesBySeriesConnectionType;
	СоединениеЗначенийПоСериям: ChartValuesBySeriesConnectionType;
	ValuesBySeriesConnectionLines: Line;
	ЛинииСоединенияЗначенийПоСериям: Line;
	ValuesBySeriesConnectionColor: Color;
	ЦветСоединенияЗначенийПоСериям: Color;
	Animation: ChartAnimation;
	Анимация: ChartAnimation;
	SeriesOrderInLegend: ChartSeriesOrderInLegend;
	ПорядокСерийВЛегенде: ChartSeriesOrderInLegend;
	ValuesAxis: ChartAxis;
	ОсьЗначений: ChartAxis;
	PointsAxis: ChartAxis;
	ОсьТочек: ChartAxis;
	PointsAxisValuesSource: ChartPointsAxisValuesSource;
	ИсточникЗначенийОсиТочек: ChartPointsAxisValuesSource;
	PointsAxisSeries: ChartSeries;
	СерияНаОсиТочек: ChartSeries;
	BubbleSizeValueSource: ChartBubbleSizeValueSource;
	ИсточникЗначенияРазмераПузырька: ChartBubbleSizeValueSource;
	BubbleSizeCommonSeries: ChartSeries;
	ОбщаяСерияРазмераПузырька: ChartSeries;
	BubbleSizing: ChartBubbleSizing;
	ВлияниеРазмераНаПузырек: ChartBubbleSizing;
	DefaultBubbleSize: number;
	РазмерПузырькаПоУмолчанию: number;
	MinBubbleSize: number;
	МинимальныйРазмерПузырька: number;
	MaxBubbleSize: number;
	МаксимальныйРазмерПузырька: number;
	BubbleChartNegativeValuesShowMode: BubbleChartNegativeValuesShowMode;
	ОтображениеОтрицательныхЗначенийПузырьковойДиаграммы: BubbleChartNegativeValuesShowMode;
	PointsConnection: ChartPointsConnectionType;
	СоединениеТочек: ChartPointsConnectionType;
	BarChartPointsOrder: BarChartPointsOrder;
	ПорядокОтображенияТочекГоризонтальнойГистограммы: BarChartPointsOrder;
	GradientPaletteMaxColors: number;
	МаксимальноеКоличествоЦветовГрадиентнойПалитры: number;
	GradientPaletteStartColor: Color;
	ЦветНачалаГрадиентнойПалитры: Color;
	GradientPaletteEndColor: Color;
	ЦветКонцаГрадиентнойПалитры: Color;
	Items: DendrogramItemCollection;
	Элементы: DendrogramItemCollection;
	Links: DendrogramLinkCollection;
	Связи: DendrogramLinkCollection;
	TitleArea: DendrogramTitleArea;
	ОбластьЗаголовка: DendrogramTitleArea;
	PlotArea: DendrogramPlotArea;
	ОбластьПостроения: DendrogramPlotArea;
	Orientation: DendrogramOrientation;
	Ориентация: DendrogramOrientation;
	ScaleKeeping: DendrogramScaleKeeping;
	ПоддержкаМасштаба: DendrogramScaleKeeping;
	ScaleItemCount: number;
	КоличествоЭлементовШкалы: number;
	ItemMinWidth: number;
	МинимальнаяШиринаЭлемента: number;
	AutoItemText: boolean;
	АвтоУстановкаТекстаЭлементов: boolean;
	GetPicture(... params): Picture;
	ПолучитьКартинку(... params): Picture;
	Clear(): void;
	Очистить(): void;
	SetItem(... params): DendrogramItem;
	УстановитьЭлемент(... params): DendrogramItem;
}
declare type Дендрограмма = Dendrogram;
interface DataCompositionAttributesPlacement {
}
interface ClientInterfaceHistoryTable {
	Columns: ValueTableColumnCollection;
	Колонки: ValueTableColumnCollection;
	Indexes: CollectionIndexes;
	Индексы: CollectionIndexes;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(): ValueTableRow;
	Добавить(): ValueTableRow;
	Insert(... params): ValueTableRow;
	Вставить(... params): ValueTableRow;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Find(... params): ValueTableRow;
	Найти(... params): ValueTableRow;
	FindRows(... params): ArrayV8;
	НайтиСтроки(... params): ArrayV8;
	Total(... params): number;
	Итог(... params): number;
	Sort(... params): void;
	Сортировать(... params): void;
	LoadColumn(... params): void;
	ЗагрузитьКолонку(... params): void;
	UnloadColumn(... params): ArrayV8;
	ВыгрузитьКолонку(... params): ArrayV8;
	Get(... params): ValueTableRow;
	Получить(... params): ValueTableRow;
	Copy(... params): ValueTable;
	Скопировать(... params): ValueTable;
	CopyColumns(... params): ValueTable;
	СкопироватьКолонки(... params): ValueTable;
	GroupBy(... params): void;
	Свернуть(... params): void;
	FillValues(... params): void;
	ЗаполнитьЗначения(... params): void;
	ChooseRow(... params): ValueTableRow;
	ВыбратьСтроку(... params): ValueTableRow;
}
interface TextExtraction {
	FileName: string;
	ИмяФайла: string;
	GetText(): string;
	ПолучитьТекст(): string;
	Write(... params): void;
	Записать(... params): void;
}
declare type ИзвлечениеТекста = TextExtraction;
interface EnumPresentationAdditionType {
	Add;
	Добавлять;
	DontAdd;
	НеДобавлять;
}
declare type ПеречислениеТипДобавленияПредставлений = EnumPresentationAdditionType;
interface DataCompositionAppearanceTemplateAppearance {
	AvailableParameters: DataCompositionAvailableParameters;
	ДоступныеПараметры: DataCompositionAvailableParameters;
	Items: DataCompositionParameterValueCollection;
	Элементы: DataCompositionParameterValueCollection;
	FindParameterValue(... params): DataCompositionParameterValue;
	НайтиЗначениеПараметра(... params): DataCompositionParameterValue;
	SetParameterValue(... params): void;
	УстановитьЗначениеПараметра(... params): void;
}
interface EnumRowGotoDirection {
	Up;
	Вверх;
	Down;
	Вниз;
}
declare type ПеречислениеНаправлениеПереходаКСтроке = EnumRowGotoDirection;
interface EnumWindowsCertificateSelectMode {
	Auto;
	Авто;
	Choose;
	Выбирать;
}
declare type ПеречислениеСпособВыбораСертификатаWindows = EnumWindowsCertificateSelectMode;
interface EnumSpreadsheetDocumentDetailUse {
	Cell;
	Ячейка;
	Row;
	Строка;
	WithoutProcessing;
	БезОбработки;
}
declare type ПеречислениеИспользованиеРасшифровкиТабличногоДокумента = EnumSpreadsheetDocumentDetailUse;
interface EnumDataCompositionTextPlacementType {
	Block;
	Забивать;
	Cut;
	Обрезать;
	Wrap;
	Переносить;
	Overflow;
	Выступать;
}
declare type ПеречислениеТипРазмещенияТекстаКомпоновкиДанных = EnumDataCompositionTextPlacementType;
interface StandardAttributeDescription {
	Presentation();
	Представление();
}
interface DataCompositionSchemaAvailableValue {
}
interface DataCompositionSchemaAvailableValues {
	Add(): DataCompositionSchemaAvailableValue;
	Добавить(): DataCompositionSchemaAvailableValue;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaAvailableValue;
	Вставить(... params): DataCompositionSchemaAvailableValue;
	Get(... params): DataCompositionSchemaAvailableValue;
	Получить(... params): DataCompositionSchemaAvailableValue;
}
interface EnumQuerySchemaUnionType {
	Union;
	Объединить;
	UnionAll;
	ОбъединитьВсе;
}
declare type ПеречислениеТипОбъединенияСхемыЗапроса = EnumQuerySchemaUnionType;
interface EnumContactDataInstantMessagingAddressType {
	Work;
	Рабочий;
	Home;
	Домашний;
	Other;
	Другой;
}
declare type ПеречислениеТипАдресаМгновенныхСообщенийДанныхКонтакта = EnumContactDataInstantMessagingAddressType;
interface EnumDataAnalysisTimeIntervalUnitType {
	Second;
	Секунда;
	CurrentMinute;
	ТекущаяМинута;
	Minute;
	Минута;
	CurrentHour;
	ТекущийЧас;
	Hour;
	Час;
	CurrentDay;
	ТекущийДень;
	Day;
	День;
	CurrentWeek;
	ТекущаяНеделя;
	Week;
	Неделя;
	CurrentMonth;
	ТекущийМесяц;
	Month;
	Месяц;
	CurrentQuarter;
	ТекущийКвартал;
	Quarter;
	Квартал;
	CurrentYear;
	ТекущийГод;
	Year;
	Год;
	CurrentTenDays;
	ТекущаяДекада;
	TenDays;
	Декада;
	CurrentHalfYear;
	ТекущееПолугодие;
	HalfYear;
	Полугодие;
}
declare type ПеречислениеТипЕдиницыИнтервалаВремениАнализаДанных = EnumDataAnalysisTimeIntervalUnitType;
interface XSEnumerationFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Value: string;
	Значение: string;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетПеречисленияXS = XSEnumerationFacet;
interface EnumSpreadsheetDocumentPatternType {
	WithoutPattern;
	БезУзора;
	Solid;
	Сплошной;
	Pattern1;
	Узор1;
	Pattern2;
	Узор2;
	Pattern3;
	Узор3;
	Pattern4;
	Узор4;
	Pattern5;
	Узор5;
	Pattern6;
	Узор6;
	Pattern7;
	Узор7;
	Pattern8;
	Узор8;
	Pattern9;
	Узор9;
	Pattern10;
	Узор10;
	Pattern11;
	Узор11;
	Pattern12;
	Узор12;
	Pattern13;
	Узор13;
	Pattern14;
	Узор14;
	Pattern15;
	Узор15;
	Pattern16;
	Узор16;
	Pattern17;
	Узор17;
}
declare type ПеречислениеТипУзораТабличногоДокумента = EnumSpreadsheetDocumentPatternType;
interface GroupBox {
	Enabled: boolean;
	Доступность: boolean;
	Transparent: boolean;
	ПрозрачныйФон: boolean;
	Font: Font;
	Шрифт: Font;
	Border: Border;
	Рамка: Border;
	BorderColor: Color;
	ЦветРамки: Color;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	FieldBackColor: Color;
	ЦветФонаПоля: Color;
	FieldTextColor: Color;
	ЦветТекстаПоля: Color;
	ButtonBackColor: Color;
	ЦветФонаКнопки: Color;
	ButtonTextColor: Color;
	ЦветТекстаКнопки: Color;
	ToolTip: string;
	Подсказка: string;
	Caption: string;
	Заголовок: string;
}
declare type РамкаГруппы = GroupBox;
interface EnumChartPointsAxisValuesSource {
	Auto;
	Авто;
	Series;
	Серия;
	Points;
	Точки;
}
declare type ПеречислениеИсточникЗначенийОсиТочекДиаграммы = EnumChartPointsAxisValuesSource;
interface EnumDeviceCameraType {
	Rear;
	Задняя;
	Front;
	Передняя;
	Auto;
	Авто;
}
declare type ПеречислениеТипКамерыУстройства = EnumDeviceCameraType;
interface QueryResultIteration {
}
interface EnumApplicationUsePurpose {
	PersonalComputer;
	ПерсональныйКомпьютер;
	MobileDevice;
	МобильноеУстройство;
}
declare type ПеречислениеНазначениеИспользованияПриложения = EnumApplicationUsePurpose;
interface EnumAutoShowClearButtonMode {
	Auto;
	Авто;
	Always;
	Всегда;
	FilledOnly;
	ТолькоДляЗаполненного;
}
declare type ПеречислениеРежимАвтоОтображенияКнопкиОчистки = EnumAutoShowClearButtonMode;
interface DataCompositionAvailableParameterUseRestrictions {
	Add(): DataCompositionAvailableParameterUseRestriction;
	Добавить(): DataCompositionAvailableParameterUseRestriction;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Find(... params): DataCompositionAvailableParameterUseRestriction;
	Найти(... params): DataCompositionAvailableParameterUseRestriction;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionAvailableParameterUseRestriction;
	Вставить(... params): DataCompositionAvailableParameterUseRestriction;
	Get(... params): DataCompositionAvailableParameterUseRestriction;
	Получить(... params): DataCompositionAvailableParameterUseRestriction;
	ParameterEnabled(... params): boolean;
	ПараметрДоступен(... params): boolean;
}
interface LinuxCertificationAuthorityCertificates {
}
declare type СертификатыУдостоверяющихЦентровLinux = LinuxCertificationAuthorityCertificates;
interface DataAnalysisReportBuilder {
	DataSource;
	ИсточникДанных;
	AnalysisType;
	ТипАнализа;
	ColumnsSetting: DataAnalysisColumns;
	НастройкаКолонок: DataAnalysisColumns;
	Parameters: DataAnalysisParameters;
	Параметры: DataAnalysisParameters;
	Result;
	Результат;
	PredictionModel;
	МодельПрогноза;
	Template: SpreadsheetDocument;
	Макет: SpreadsheetDocument;
	ProcessUserInterruption: boolean;
	ОбрабатыватьПрерываниеПользователя: boolean;
	Execute(): void;
	Выполнить(): void;
	Put(... params): void;
	Вывести(... params): void;
	GetAnalysis(): DataAnalysis;
	ПолучитьАнализ(): DataAnalysis;
}
declare type ПостроительОтчетаАнализаДанных = DataAnalysisReportBuilder;
interface EnumDataAnalysisColumnTypeAssociationRules {
	NotUsed;
	НеИспользуемая;
	Object;
	Объект;
	Item;
	Элемент;
}
declare type ПеречислениеТипКолонкиАнализаДанныхПоискАссоциаций = EnumDataAnalysisColumnTypeAssociationRules;
interface FormSettings {
}
declare type НастройкиФормы = FormSettings;
interface AggregateInformation {
	Use;
	Использование;
	Dimensions;
	Измерения;
	Periodicity: AccumulationRegisterAggregatePeriodicity;
	Периодичность: AccumulationRegisterAggregatePeriodicity;
	BeginOfPeriod;
	НачалоПериода;
	EndOfPeriod;
	КонецПериода;
	Size;
	Размер;
}
declare type ИнформацияОбАгрегате = AggregateInformation;
interface EnumChartSeriesOrderInLegend {
	Auto;
	Авто;
	Direct;
	Прямой;
	Reverse;
	Обратный;
}
declare type ПеречислениеПорядокСерийВЛегендеДиаграммы = EnumChartSeriesOrderInLegend;
interface FillChecking {
}
interface FormButtonPictureLocation {
}
interface EnumBarcodeType {
	Linear;
	Линейный;
	Matrix;
	Двухмерный;
	All;
	Все;
}
declare type ПеречислениеТипШтрихКода = EnumBarcodeType;
interface EnumChartSpaceMode {
	None;
	Нет;
	Half;
	ПоловинаШирины;
	Full;
	ПолнаяШирина;
}
declare type ПеречислениеРежимПробеловДиаграммы = EnumChartSpaceMode;
interface XSLengthFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Fixed: boolean;
	Фиксированный: boolean;
	Value: string;
	Значение: string;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетДлиныXS = XSLengthFacet;
interface XMLTypeAssignment {
}
interface AdRepresentationManager {
	SetUsing(... params): void;
	УстановитьИспользование(... params): void;
	GetUsing(): boolean;
	ПолучитьИспользование(): boolean;
	SetFullScreenAdID(... params): void;
	УстановитьИдентификаторПолноэкраннойРекламы(... params): void;
	SetAdBannerID(... params): void;
	УстановитьИдентификаторРекламногоБаннера(... params): void;
	GetFullScreenAdID(): string;
	ПолучитьИдентификаторПолноэкраннойРекламы(): string;
	GetAdBannerID(): string;
	ПолучитьИдентификаторРекламногоБаннера(): string;
	ShowFullScreenAd(... params): void;
	ПоказатьПолноэкраннуюРекламу(... params): void;
	SetAdBannerRepresentation(... params): void;
	УстановитьОтображениеРекламногоБаннера(... params): void;
	GetAdBannerRepresentation(): AdBannerRepresentation;
	ПолучитьОтображениеРекламногоБаннера(): AdBannerRepresentation;
}
declare type МенеджерОтображенияРекламы = AdRepresentationManager;
interface EnumDataCompositionPeriodAdditionType {
	None;
	БезДополнения;
	Year;
	Год;
	HalfYear;
	Полугодие;
	Quarter;
	Квартал;
	Month;
	Месяц;
	TenDays;
	Декада;
	Week;
	Неделя;
	Day;
	День;
	Hour;
	Час;
	Minute;
	Минута;
	Second;
	Секунда;
}
declare type ПеречислениеТипДополненияПериодаКомпоновкиДанных = EnumDataCompositionPeriodAdditionType;
interface FileDialog {
	Mode: FileDialogMode;
	Режим: FileDialogMode;
	FullFileName: string;
	ПолноеИмяФайла: string;
	SelectedFiles: ArrayV8;
	ВыбранныеФайлы: ArrayV8;
	Title: string;
	Заголовок: string;
	Filter: string;
	Фильтр: string;
	FilterIndex: number;
	ИндексФильтра: number;
	DefaultExt: string;
	Расширение: string;
	Directory: string;
	Каталог: string;
	Preview: boolean;
	ПредварительныйПросмотр: boolean;
	CheckFileExist: boolean;
	ПроверятьСуществованиеФайла: boolean;
	Multiselect: boolean;
	МножественныйВыбор: boolean;
	Choose(): boolean;
	Выбрать(): boolean;
	Show(... params): void;
	Показать(... params): void;
}
declare type ДиалогВыбораФайла = FileDialog;
interface EnumDataAnalysisAssociationRulesOrderType {
	BySupport;
	ПоКоличествуСлучаев;
	ByConfidence;
	ПоДостоверности;
	ByImportance;
	ПоЗначимости;
}
declare type ПеречислениеТипУпорядочиванияПравилАссоциацииАнализаДанных = EnumDataAnalysisAssociationRulesOrderType;
interface CalculationRegisterPeriodType {
}
interface GeographicalSchemaObjectPoint {
	Details;
	Расшифровка;
	ToolTip: string;
	Подсказка: string;
	ShowData: boolean;
	ОтображатьДанные: boolean;
	Visible: boolean;
	Видимость: boolean;
	Value;
	Значение;
	Layer: GeographicalSchemaLayer;
	Слой: GeographicalSchemaLayer;
	BoundaryBox: GeographicalSchemaRectangle;
	ОграничивающийПрямоугольник: GeographicalSchemaRectangle;
	Color: Color;
	Цвет: Color;
	Char: string;
	Символ: string;
	CharacterFont: Font;
	ШрифтСимвола: Font;
	Coordinates: GeographicCoordinates;
	Координаты: GeographicCoordinates;
	Picture: Picture;
	Картинка: Picture;
	ReaperPointPosition: PaintingReferencePointPosition;
	ПоложениеОпорнойТочки: PaintingReferencePointPosition;
	Marker: GeographicalSchemaMarkerType;
	Маркер: GeographicalSchemaMarkerType;
	ShowMode: GeographicalSchemaPointObjectDrawingType;
	ТипОтрисовки: GeographicalSchemaPointObjectDrawingType;
}
interface XSMaxInclusiveFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Fixed: boolean;
	Фиксированный: boolean;
	Value;
	Значение;
	Inclusive: boolean;
	Включающий: boolean;
	Exclusive: boolean;
	Исключающий: boolean;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетМаксимальногоВключающегоЗначенияXS = XSMaxInclusiveFacet;
interface EnumDimensionPlacementType {
	Together;
	Вместе;
	Separately;
	Отдельно;
	SeparatelyAndInTotalsOnly;
	ОтдельноИТолькоВИтогах;
}
declare type ПеречислениеТипРазмещенияИзмерений = EnumDimensionPlacementType;
interface FormHTMLDocumentField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	BorderColor: Color;
	ЦветРамки: Color;
	Document;
	Документ;
	UserAgentInformation;
	ИнформацияПрограммыПросмотра;
	Output: UseOutput;
	Вывод: UseOutput;
	GoBack(): void;
	Назад(): void;
	GoForward(): void;
	Вперед(): void;
}
interface PlatformType {
}
interface EnumDataCompositionSortDirection {
	Asc;
	Возр;
	Desc;
	Убыв;
}
declare type ПеречислениеНаправлениеСортировкиКомпоновкиДанных = EnumDataCompositionSortDirection;
interface DataItemReceive {
}
interface GeographicalSchemaLayerSeriesImportModeType {
}
interface EnumDataCompositionGroupFieldsPlacement {
	Together;
	Вместе;
	Separately;
	Отдельно;
	SeparatelyAndInTotalsOnly;
	ОтдельноИТолькоВИтогах;
}
declare type ПеречислениеРасположениеПолейГруппировкиКомпоновкиДанных = EnumDataCompositionGroupFieldsPlacement;
interface ViewScalingMode {
}
interface DataCompositionResultSpreadsheetDocumentOutputProcessor {
	ShowOutputPercent: boolean;
	ОтображатьПроцентВывода: boolean;
	SetDocument(... params): void;
	УстановитьДокумент(... params): void;
	BeginOutput(): void;
	НачатьВывод(): void;
	OutputItem(... params): void;
	ВывестиЭлемент(... params): void;
	Output(... params): SpreadsheetDocument;
	Вывести(... params): SpreadsheetDocument;
	EndOutput(): SpreadsheetDocument;
	ЗакончитьВывод(): SpreadsheetDocument;
}
declare type ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент = DataCompositionResultSpreadsheetDocumentOutputProcessor;
interface DataBaseConfigurationUpdateExecutionInformationItemType {
}
interface HTMLDocumentFieldMode {
}
interface EnumDataCompositionFieldsTitleType {
	Auto;
	Авто;
	Full;
	Полный;
	Short;
	Краткий;
}
declare type ПеречислениеТипЗаголовкаПолейКомпоновкиДанных = EnumDataCompositionFieldsTitleType;
interface EnumSpreadsheetDocumentStepDirectionType {
	ByRows;
	ПоСтрокам;
	ByColumns;
	ПоКолонкам;
	WithoutMove;
	БезПерехода;
}
declare type ПеречислениеТипНаправленияПереходаТабличногоДокумента = EnumSpreadsheetDocumentStepDirectionType;
interface EnumAutoCapitalizationOnTextInput {
	Auto;
	Авто;
	None;
	Нет;
	Words;
	Слова;
	Sentences;
	Предложения;
	AllCharacters;
	ВсеСимволы;
}
declare type ПеречислениеАвтоИзменениеРегистраПриВводеТекста = EnumAutoCapitalizationOnTextInput;
interface EnumRoamingUsage {
	Used;
	Используется;
	NotUsed;
	НеИспользуется;
	Unknown;
	Неизвестно;
}
declare type ПеречислениеИспользованиеРоуминга = EnumRoamingUsage;
interface XSComplexFinal {
}
interface EnumTimeScaleDayFormat {
	MonthDay;
	ДеньМесяца;
	WeekDay;
	ДеньНедели;
	MonthDayWeekDay;
	ДеньМесяцаДеньНедели;
	WeekDayMonthDay;
	ДеньНеделиДеньМесяца;
}
declare type ПеречислениеФорматДняШкалыВремени = EnumTimeScaleDayFormat;
interface DataCompositionPivotTableDataSource {
	SetSchema(... params): void;
	УстановитьСхему(... params): void;
	SetSettings(... params): void;
	УстановитьНастройки(... params): void;
	GetSettings();
	ПолучитьНастройки();
	Refresh(): void;
	Обновить(): void;
}
declare type ИсточникДанныхСводнойТаблицыКомпоновкиДанных = DataCompositionPivotTableDataSource;
interface FormLabelField {
	Width: number;
	Ширина: number;
	Height: number;
	Высота: number;
	HorizontalStretch: boolean;
	РастягиватьПоГоризонтали: boolean;
	VerticalStretch: boolean;
	РастягиватьПоВертикали: boolean;
	AutoMaxWidth: boolean;
	АвтоМаксимальнаяШирина: boolean;
	MaxWidth: number;
	МаксимальнаяШирина: number;
	AutoMaxHeight: boolean;
	АвтоМаксимальнаяВысота: boolean;
	MaxHeight: number;
	МаксимальнаяВысота: number;
	MarkNegatives: boolean;
	ВыделятьОтрицательные: boolean;
	Format: string;
	Формат: string;
	Hyperlink: boolean;
	Гиперссылка: boolean;
	BackColor: Color;
	ЦветФона: Color;
	TextColor: Color;
	ЦветТекста: Color;
	BorderColor: Color;
	ЦветРамки: Color;
	Border: Border;
	Рамка: Border;
	Font: Font;
	Шрифт: Font;
	PasswordMode: boolean;
	РежимПароля: boolean;
}
interface EnumDecisionTreeSimplificationType {
	DontSimplify;
	НеУпрощать;
	Simplify;
	Упрощать;
}
declare type ПеречислениеТипУпрощенияДереваРешений = EnumDecisionTreeSimplificationType;
interface DataAnalysisDecisionTreeResult {
	Parameters: DataAnalysisParameters;
	Параметры: DataAnalysisParameters;
	ColumnsSetting: DataAnalysisColumns;
	НастройкаКолонок: DataAnalysisColumns;
	RootNodes: FixedArray;
	КорневыеУзлы: FixedArray;
	Classifications: FixedArray;
	Классификации: FixedArray;
	Depth: number;
	Глубина: number;
	NodeCount: number;
	КоличествоУзлов: number;
	LeafCount: number;
	КоличествоЛистьев: number;
	ObjectCount: number;
	КоличествоОбъектов: number;
	ClassCount: number;
	КоличествоКлассов: number;
	Error: number;
	Ошибка: number;
	CreatePredictionModel(): PredictionModelDecisionTree;
	СоздатьМодельПрогноза(): PredictionModelDecisionTree;
}
interface CryptoCertificateStorePlacement {
}
interface File {
	Name: string;
	Имя: string;
	FullName: string;
	ПолноеИмя: string;
	Path: string;
	Путь: string;
	BaseName: string;
	ИмяБезРасширения: string;
	Extension: string;
	Расширение: string;
	Exist(): boolean;
	Существует(): boolean;
	IsFile(): boolean;
	ЭтоФайл(): boolean;
	IsDirectory(): boolean;
	ЭтоКаталог(): boolean;
	Size(): number;
	Размер(): number;
	GetModificationTime(): Date;
	ПолучитьВремяИзменения(): Date;
	SetModificationTime(... params): void;
	УстановитьВремяИзменения(... params): void;
	GetReadOnly(): boolean;
	ПолучитьТолькоЧтение(): boolean;
	SetReadOnly(... params): void;
	УстановитьТолькоЧтение(... params): void;
	GetHidden(): boolean;
	ПолучитьНевидимость(): boolean;
	SetHidden(... params): void;
	УстановитьНевидимость(... params): void;
	GetModificationUniversalTime(): Date;
	ПолучитьУниверсальноеВремяИзменения(): Date;
	SetModificationUniversalTime(... params): void;
	УстановитьУниверсальноеВремяИзменения(... params): void;
	GetMobileDeviceLibraryFilePresentation(): string;
	ПолучитьПредставлениеФайлаБиблиотекиМобильногоУстройства(): string;
	GetMobileDeviceLibraryFileThumbnail();
	ПолучитьКартинкуПредставленияФайлаБиблиотекиМобильногоУстройства();
	BeginCheckingExistence(... params): void;
	НачатьПроверкуСуществования(... params): void;
	BeginCheckingIsFile(... params): void;
	НачатьПроверкуЭтоФайл(... params): void;
	BeginCheckingIsDirectory(... params): void;
	НачатьПроверкуЭтоКаталог(... params): void;
	BeginGettingSize(... params): void;
	НачатьПолучениеРазмера(... params): void;
	BeginGettingModificationTime(... params): void;
	НачатьПолучениеВремениИзменения(... params): void;
	BeginSettingModificationTime(... params): void;
	НачатьУстановкуВремениИзменения(... params): void;
	BeginGettingReadOnly(... params): void;
	НачатьПолучениеТолькоЧтения(... params): void;
	BeginSettingReadOnly(... params): void;
	НачатьУстановкуТолькоЧтения(... params): void;
	BeginGettingHidden(... params): void;
	НачатьПолучениеНевидимости(... params): void;
	BeginSettingHidden(... params): void;
	НачатьУстановкуНевидимости(... params): void;
	BeginGettingModificationUniversalTime(... params): void;
	НачатьПолучениеУниверсальногоВремениИзменения(... params): void;
	BeginSettingModificationUniversalTime(... params): void;
	НачатьУстановкуУниверсальногоВремениИзменения(... params): void;
	BeginInitialization(... params): void;
	НачатьИнициализацию(... params): void;
	BeginGetMobileDeviceLibraryFileThumbnail(... params): void;
	НачатьПолучениеКартинкиПредставленияФайлаБиблиотекиМобильногоУстройства(... params): void;
}
declare type Файл = File;
interface EnumDataAnalysisColumnType {
	NotUsed;
	НеИспользуемая;
}
declare type ПеречислениеТипКолонкиАнализаДанных = EnumDataAnalysisColumnType;
interface ZipFileReader {
	Items: ZipFileEntries;
	Элементы: ZipFileEntries;
	Comment: string;
	Комментарий: string;
	Open(... params): void;
	Открыть(... params): void;
	Extract(... params): void;
	Извлечь(... params): void;
	ExtractAll(... params): void;
	ИзвлечьВсе(... params): void;
	Close(): void;
	Закрыть(): void;
}
declare type ЧтениеZipФайла = ZipFileReader;
interface FormPopup {
	Representation: ButtonRepresentation;
	Отображение: ButtonRepresentation;
	Picture: Picture;
	Картинка: Picture;
	Shape: ButtonShape;
	Фигура: ButtonShape;
	ShapeRepresentation: ButtonShapeRepresentation;
	ОтображениеФигуры: ButtonShapeRepresentation;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
}
interface EnumGeographicalSchemaObjectFindType {
	Included;
	Включает;
	IncludedWholly;
	ВключаетПолностью;
	Includes;
	Включают;
	IncludesWholly;
	ВключаютПолностью;
}
declare type ПеречислениеТипПоискаОбъектовГеографическойСхемы = EnumGeographicalSchemaObjectFindType;
interface HTMLLinkElement {
	NodeName: string;
	ИмяУзла: string;
	NodeValue: string;
	ЗначениеУзла: string;
	NodeType: DOMNodeType;
	ТипУзла: DOMNodeType;
	ParentNode: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	РодительскийУзел: DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMDocumentFragment | DOMDocumentType | any;
	ChildNodes: DOMNodeList;
	ДочерниеУзлы: DOMNodeList;
	FirstChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПервыйДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	LastChild: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПоследнийДочерний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	PreviousSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ПредыдущийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	NextSibling: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	СледующийСоседний: DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	Attributes: DOMAttributeMap;
	Атрибуты: DOMAttributeMap;
	OwnerDocument: DOMDocument;
	ДокументВладелец: DOMDocument;
	NamespaceURI: string;
	URIПространстваИмен: string;
	Prefix: string;
	Префикс: string;
	LocalName: string;
	ЛокальноеИмя: string;
	BaseURI: string;
	БазовыйURI: string;
	TextContent: string;
	ТекстовоеСодержимое: string;
	TagName: string;
	ИмяЭлемента: string;
	ID: string;
	Идентификатор: string;
	Title: string;
	Заголовок: string;
	Lang: string;
	Язык: string;
	Dir: string;
	Директива: string;
	ClassName: string;
	ИмяКласса: string;
	Disabled: boolean;
	Недоступен: boolean;
	Charset: string;
	НаборСимволов: string;
	Href: string;
	Гиперссылка: string;
	Hreflang: string;
	БазовыйЯзык: string;
	Media: string;
	Носитель: string;
	Rel: string;
	Отношение: string;
	Rev: string;
	ОбратнаяСсылка: string;
	Target: string;
	Цель: string;
	Type: string;
	Тип: string;
	InsertBefore(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ВставитьПеред(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ReplaceChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ЗаменитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	RemoveChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	УдалитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	AppendChild(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	ДобавитьДочерний(... params): DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMComment | DOMProcessingInstruction | DOMDocumentType;
	HasChildNodes(): boolean;
	ЕстьДочерниеУзлы(): boolean;
	CloneNode(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	КлонироватьУзел(... params): DOMAttribute | DOMEntity | DOMElement | DOMEntityReference | DOMCDATASection | DOMText | DOMDocumentFragment | DOMComment | DOMNotation | DOMProcessingInstruction | DOMDocumentType | any;
	Normalize(): void;
	Нормализовать(): void;
	HasAttributes(): boolean;
	ЕстьАтрибуты(): boolean;
	CompareDocumentPosition(... params): DOMDocumentPosition;
	СравнитьПозициюВДокументе(... params): DOMDocumentPosition;
	IsSameNode(... params): boolean;
	УзелИдентичен(... params): boolean;
	LookupPrefix(... params): string;
	НайтиПрефикс(... params): string;
	IsDefaultNamespace(... params): boolean;
	ПространствоИменПоУмолчанию(... params): boolean;
	LookupNamespaceURI(... params): string;
	НайтиURIПространстваИмен(... params): string;
	IsEqualNode(... params): boolean;
	УзелРавен(... params): boolean;
	SetUserData(... params);
	УстановитьПользовательскиеДанные(... params);
	GetUserData(... params);
	ПолучитьПользовательскиеДанные(... params);
	GetAttribute(... params): string;
	ПолучитьАтрибут(... params): string;
	SetAttribute(... params): void;
	УстановитьАтрибут(... params): void;
	RemoveAttribute(... params): void;
	УдалитьАтрибут(... params): void;
	GetAttributeNode(... params): DOMAttribute;
	ПолучитьУзелАтрибута(... params): DOMAttribute;
	SetAttributeNode(... params): DOMAttribute;
	УстановитьУзелАтрибута(... params): DOMAttribute;
	RemoveAttributeNode(... params): DOMAttribute;
	УдалитьУзелАтрибута(... params): DOMAttribute;
	GetElementByTagName(... params): DOMNodeList;
	ПолучитьЭлементыПоИмени(... params): DOMNodeList;
	HasAttribute(... params): boolean;
	ЕстьАтрибут(... params): boolean;
	SetIdAttribute(... params): void;
	УстановитьАтрибутИдентификатор(... params): void;
	SetIdAttributeNode(... params): void;
	УстановитьУзелАтрибутаИдентификатора(... params): void;
	SetNamespaceMapping(... params): DOMAttribute;
	УстановитьСоответствиеПространстваИмен(... params): DOMAttribute;
	UnsetNamespaceMapping(... params): void;
	ОтменитьСоответствиеПространстваИмен(... params): void;
	NamespaceMappings(): Map;
	ПолучитьСоответствияПространствИмен(): Map;
}
interface EnumComparisonType {
	Equal;
	Равно;
	NotEqual;
	НеРавно;
	Less;
	Меньше;
	LessOrEqual;
	МеньшеИлиРавно;
	Greater;
	Больше;
	GreaterOrEqual;
	БольшеИлиРавно;
	Interval;
	Интервал;
	IntervalIncludingBounds;
	ИнтервалВключаяГраницы;
	IntervalIncludingLowerBound;
	ИнтервалВключаяНачало;
	IntervalIncludingUpperBound;
	ИнтервалВключаяОкончание;
	Contains;
	Содержит;
	InList;
	ВСписке;
	InListByHierarchy;
	ВСпискеПоИерархии;
	NotInList;
	НеВСписке;
	NotInListByHierarchy;
	НеВСпискеПоИерархии;
	InHierarchy;
	ВИерархии;
	NotInHierarchy;
	НеВИерархии;
	NotContains;
	НеСодержит;
}
declare type ПеречислениеВидСравнения = EnumComparisonType;
interface ExchangeMessageReader {
	XMLReader: XMLReader;
	ЧтениеXML: XMLReader;
	Sender;
	Отправитель;
	MessageNo: number;
	НомерСообщения: number;
	ReceivedNo: number;
	НомерПринятого: number;
	BeginRead(... params): void;
	НачатьЧтение(... params): void;
	EndRead(): void;
	ЗакончитьЧтение(): void;
	CancelRead(): void;
	ПрерватьЧтение(): void;
}
interface AssociationRulesDataSourceType {
}
interface NumericValueType {
}
interface DataAnalysisColumnTypeSummaryStatistics {
}
interface EnumContactDataURLType {
	Work;
	Рабочий;
	Home;
	Домашний;
	HomePage;
	ДомашняяСтраница;
	Other;
	Другой;
	Blog;
	Блог;
	Profile;
	Профиль;
	FTP;
}
declare type ПеречислениеТипВебАдресаДанныхКонтакта = EnumContactDataURLType;
interface DataCompositionSchemaTotalFieldsTemplates {
	Add(): DataCompositionSchemaTotalFieldsTemplate;
	Добавить(): DataCompositionSchemaTotalFieldsTemplate;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Move(... params): void;
	Сдвинуть(... params): void;
	Insert(... params): DataCompositionSchemaTotalFieldsTemplate;
	Вставить(... params): DataCompositionSchemaTotalFieldsTemplate;
	Get(... params): DataCompositionSchemaTotalFieldsTemplate;
	Получить(... params): DataCompositionSchemaTotalFieldsTemplate;
}
interface SliceUse {
}
interface QuerySchemaTempTableDescription {
	AvailableFields: QuerySchemaAvailableFields;
	ДоступныеПоля: QuerySchemaAvailableFields;
	Alias: string;
	Псевдоним: string;
	TableName: string;
	ИмяТаблицы: string;
}
interface TransferredFileDescription {
	Location;
	Хранение;
	Name;
	Имя;
}
interface SpreadsheetDocumentSelectionShowModeType {
}
interface GraphicalSchemaItemCompletion {
	Name;
	Имя;
	Font;
	Шрифт;
	TextColor;
	ЦветТекста;
	ToolTip;
	Подсказка;
	Description;
	Наименование;
	BackColor;
	ЦветФона;
	BorderColor;
	ЦветРамки;
	HorizontalAlign;
	ГоризонтальноеПоложение;
	VerticalAlign;
	ВертикальноеПоложение;
	PictureLocation;
	ПоложениеКартинки;
	PictureSize;
	РазмерКартинки;
	Picture;
	Картинка;
	Left;
	Лево;
	Top;
	Верх;
	Width;
	Ширина;
	Height;
	Высота;
	Transparent;
	ПрозрачныйФон;
	Hyperlink;
	Гиперссылка;
	Border;
	Рамка;
	Value;
	Значение;
}
interface HTMLReader {
	OpenFile(... params): void;
	ОткрытьФайл(... params): void;
	SetString(... params): void;
	УстановитьСтроку(... params): void;
	Close(): void;
	Закрыть(): void;
	OpenStream(... params): void;
	ОткрытьПоток(... params): void;
}
declare type ЧтениеHTML = HTMLReader;
interface EnumDataAnalysisResultTableFillType {
	DontFill;
	НеЗаполнять;
	KeyFields;
	КлючевыеПоля;
	UsedFields;
	ИспользуемыеПоля;
	AllFields;
	ВсеПоля;
}
declare type ПеречислениеТипЗаполненияТаблицыРезультатаАнализаДанных = EnumDataAnalysisResultTableFillType;
interface DataCompositionResourcesAutoPosition {
}
interface DataCompositionAreaTemplateChartGroupTemplate {
	Value;
	Значение;
	Appearance: DataCompositionAreaTemplateChartGroupAppearance;
	Оформление: DataCompositionAreaTemplateChartGroupAppearance;
}
interface DeliverableNotificationManager {
	ReceiveNotificationSubscriberID(... params): DeliverableNotificationSubscriberID;
	ПолучитьИдентификаторПодписчикаУведомлений(... params): DeliverableNotificationSubscriberID;
	AddLocalNotification(... params): void;
	ДобавитьЛокальноеУведомление(... params): void;
	CancelLocalNotifications(): void;
	ОтменитьЛокальныеУведомления(): void;
	AttachNotificationHandler(... params): void;
	ПодключитьОбработчикУведомлений(... params): void;
	DetachNotificationHandler(... params): void;
	ОтключитьОбработчикУведомлений(... params): void;
	GetBadge(): number;
	ПолучитьНаклейку(): number;
	SetBadge(... params): void;
	УстановитьНаклейку(... params): void;
}
declare type МенеджерДоставляемыхУведомлений = DeliverableNotificationManager;
interface TelephonyToolsCallEventVariant {
}
interface RegisterRecordsCollection {
	Count();
	Количество();
	IndexOf(... params);
	Индекс(... params);
	Find(... params);
	Найти(... params);
	Get(... params);
	Получить(... params);
	Write(): void;
	Записать(): void;
}
declare type КоллекцияДвижений = RegisterRecordsCollection;
interface QueryBuilder {
	Text: string;
	Текст: string;
	Dimensions: QueryBuilderDimensions;
	Измерения: QueryBuilderDimensions;
	Parameters: Structure;
	Параметры: Structure;
	Result: QueryResult;
	Результат: QueryResult;
	SelectedFields: QueryBuilderFields;
	ВыбранныеПоля: QueryBuilderFields;
	Filter: Filter;
	Отбор: Filter;
	AvailableFields: CustomFields;
	ДоступныеПоля: CustomFields;
	Order: Order;
	Порядок: Order;
	DataSource: DataSourceDescription;
	ИсточникДанных: DataSourceDescription;
	PresentationAdding: PresentationAdditionType;
	ДобавлениеПредставлений: PresentationAdditionType;
	GetQuery();
	ПолучитьЗапрос();
	Execute(): void;
	Выполнить(): void;
	InitDetails(... params): void;
	НастроитьРасшифровку(... params): void;
	FillSettings(): void;
	ЗаполнитьНастройки(): void;
}
declare type ПостроительЗапроса = QueryBuilder;
interface EnumPivotTableLinesShowType {
	Auto;
	Авто;
	Always;
	Всегда;
}
declare type ПеречислениеТипОтображенияЛинийСводнойТаблицы = EnumPivotTableLinesShowType;
interface DataCompositionChartLegendPlacement {
}
interface DataCompositionPeriodType {
}
interface EnumFTPSecureConnectionUsageLevel {
	Auto;
	Авто;
	DontUse;
	НеИспользовать;
	UseIfPossible;
	ИспользоватьЕслиВозможно;
	RequireForControl;
	ТребоватьДляУправления;
	Require;
	Требовать;
}
declare type ПеречислениеУровеньИспользованияЗащищенногоСоединенияFTP = EnumFTPSecureConnectionUsageLevel;
interface EnumByteOrder {
	LittleEndian;
	BigEndian;
}
declare type ПеречислениеПорядокБайтов = EnumByteOrder;
interface XSFractionDigitsFacet {
	ComponentType: XSComponentType;
	ТипКомпоненты: XSComponentType;
	Annotation;
	Аннотация;
	Container;
	Контейнер;
	Components: XSComponentFixedList;
	Компоненты: XSComponentFixedList;
	RootContainer;
	КорневойКонтейнер;
	Schema: XMLSchema;
	Схема: XMLSchema;
	DOMElement: DOMElement;
	ЭлементDOM: DOMElement;
	LexicalValue: string;
	ЛексическоеЗначение: string;
	SimpleTypeDefinition;
	ОпределениеПростогоТипа;
	Fixed: boolean;
	Фиксированный: boolean;
	Value: number;
	Значение: number;
	Contains(... params): boolean;
	Содержит(... params): boolean;
	CloneComponent(... params);
	КлонироватьКомпоненту(... params);
	UpdateDOMElement(... params): void;
	ОбновитьЭлементDOM(... params): void;
}
declare type ФасетКоличестваРазрядовДробнойЧастиXS = XSFractionDigitsFacet;
interface DataAnalysisClusterization {
}
interface ReportBuilderQueryBuilder {
	Text;
	Текст;
	RowDimensions;
	ИзмеренияСтроки;
	ColumnDimensions;
	ИзмеренияКолонки;
	Parameters;
	Параметры;
	Result;
	Результат;
	SelectedFields;
	ВыбранныеПоля;
	GetQuery();
	ПолучитьЗапрос();
}
interface EnumBubbleChartNegativeValuesShowMode {
	DontShow;
	НеОтображать;
	Abs;
	ПоМодулю;
	Transparent;
	ПрозрачныйФон;
	InvertedBackColor;
	ИнвертированныйЦветФона;
}
declare type ПеречислениеОтображениеОтрицательныхЗначенийПузырьковойДиаграммы = EnumBubbleChartNegativeValuesShowMode;
interface ChoiceParameterLink {
	Name;
	Имя;
	DataPath;
	ПутьКДанным;
	ValueChange;
	ИзменениеЗначения;
}
declare type СвязьПараметраВыбора = ChoiceParameterLink;
interface InfoBaseConnection {
	User: InfoBaseUser;
	Пользователь: InfoBaseUser;
	ApplicationName: string;
	ИмяПриложения: string;
	ComputerName: string;
	ИмяКомпьютера: string;
	SessionStarted: Date;
	НачалоСеанса: Date;
	ConnectionStarted: Date;
	НачалоСоединения: Date;
	ConnectionNumber: number;
	НомерСоединения: number;
	SessionNumber: number;
	НомерСеанса: number;
}
interface EnumGanttChartIntervalRepresentation {
	Flat;
	Плоский;
	ThreeDimensional;
	Объемный;
	Rhomb;
	Ромб;
	Gradient;
	Градиент;
}
declare type ПеречислениеОтображениеИнтервалаДиаграммыГанта = EnumGanttChartIntervalRepresentation;
interface ClientInterfaceNotificationsTable {
	Columns: ValueTableColumnCollection;
	Колонки: ValueTableColumnCollection;
	Indexes: CollectionIndexes;
	Индексы: CollectionIndexes;
	Count(): number;
	Количество(): number;
	IndexOf(... params): number;
	Индекс(... params): number;
	Add(): ValueTableRow;
	Добавить(): ValueTableRow;
	Insert(... params): ValueTableRow;
	Вставить(... params): ValueTableRow;
	Delete(... params): void;
	Удалить(... params): void;
	Clear(): void;
	Очистить(): void;
	Move(... params): void;
	Сдвинуть(... params): void;
	Find(... params): ValueTableRow;
	Найти(... params): ValueTableRow;
	FindRows(... params): ArrayV8;
	НайтиСтроки(... params): ArrayV8;
	Total(... params): number;
	Итог(... params): number;
	Sort(... params): void;
	Сортировать(... params): void;
	LoadColumn(... params): void;
	ЗагрузитьКолонку(... params): void;
	UnloadColumn(... params): ArrayV8;
	ВыгрузитьКолонку(... params): ArrayV8;
	Get(... params): ValueTableRow;
	Получить(... params): ValueTableRow;
	Copy(... params): ValueTable;
	Скопировать(... params): ValueTable;
	CopyColumns(... params): ValueTable;
	СкопироватьКолонки(... params): ValueTable;
	GroupBy(... params): void;
	Свернуть(... params): void;
	FillValues(... params): void;
	ЗаполнитьЗначения(... params): void;
	ChooseRow(... params): ValueTableRow;
	ВыбратьСтроку(... params): ValueTableRow;
}
declare function v8New(name:"EnumXBaseEncoding",... params): EnumXBaseEncoding;
declare function v8New(name:"ПеречислениеКодировкаXBase",... params): ПеречислениеКодировкаXBase;
declare function v8New(name:"EnumInternetMailTextType",... params): EnumInternetMailTextType;
declare function v8New(name:"ПеречислениеТипТекстаПочтовогоСообщения",... params): ПеречислениеТипТекстаПочтовогоСообщения;
declare function v8New(name:"EnumInternetMailTextProcessing",... params): EnumInternetMailTextProcessing;
declare function v8New(name:"ПеречислениеОбработкаТекстаИнтернетПочтовогоСообщения",... params): ПеречислениеОбработкаТекстаИнтернетПочтовогоСообщения;
declare function v8New(name:"EnumInternetMailMessageImportance",... params): EnumInternetMailMessageImportance;
declare function v8New(name:"ПеречислениеВажностьИнтернетПочтовогоСообщения",... params): ПеречислениеВажностьИнтернетПочтовогоСообщения;
declare function v8New(name:"EnumInternetMailAttachmentEncodingMode",... params): EnumInternetMailAttachmentEncodingMode;
declare function v8New(name:"ПеречислениеСпособКодированияИнтернетПочтовогоВложения",... params): ПеречислениеСпособКодированияИнтернетПочтовогоВложения;
declare function v8New(name:"EnumInternetMailMessageNonASCIISymbolsEncodingMode",... params): EnumInternetMailMessageNonASCIISymbolsEncodingMode;
declare function v8New(name:"ПеречислениеСпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения",... params): ПеречислениеСпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения;
declare function v8New(name:"EnumSMTPAuthenticationMode",... params): EnumSMTPAuthenticationMode;
declare function v8New(name:"ПеречислениеСпособSMTPАутентификации",... params): ПеречислениеСпособSMTPАутентификации;
declare function v8New(name:"EnumPOP3AuthenticationMode",... params): EnumPOP3AuthenticationMode;
declare function v8New(name:"ПеречислениеСпособPOP3Аутентификации",... params): ПеречислениеСпособPOP3Аутентификации;
declare function v8New(name:"EnumInternetMailProtocol",... params): EnumInternetMailProtocol;
declare function v8New(name:"ПеречислениеПротоколИнтернетПочты",... params): ПеречислениеПротоколИнтернетПочты;
declare function v8New(name:"EnumZIPCompressionMethod",... params): EnumZIPCompressionMethod;
declare function v8New(name:"ПеречислениеМетодСжатияZIP",... params): ПеречислениеМетодСжатияZIP;
declare function v8New(name:"EnumZIPCompressionLevel",... params): EnumZIPCompressionLevel;
declare function v8New(name:"ПеречислениеУровеньСжатияZIP",... params): ПеречислениеУровеньСжатияZIP;
declare function v8New(name:"EnumZIPEncryptionMethod",... params): EnumZIPEncryptionMethod;
declare function v8New(name:"ПеречислениеМетодШифрованияZIP",... params): ПеречислениеМетодШифрованияZIP;
declare function v8New(name:"EnumZIPStorePathMode",... params): EnumZIPStorePathMode;
declare function v8New(name:"ПеречислениеРежимСохраненияПутейZIP",... params): ПеречислениеРежимСохраненияПутейZIP;
declare function v8New(name:"EnumZIPSubDirProcessingMode",... params): EnumZIPSubDirProcessingMode;
declare function v8New(name:"ПеречислениеРежимОбработкиПодкаталоговZIP",... params): ПеречислениеРежимОбработкиПодкаталоговZIP;
declare function v8New(name:"EnumZIPRestoreFilePathsMode",... params): EnumZIPRestoreFilePathsMode;
declare function v8New(name:"ПеречислениеРежимВосстановленияПутейФайловZIP",... params): ПеречислениеРежимВосстановленияПутейФайловZIP;
declare function v8New(name:"FixedArray",... params): FixedArray;
declare function v8New(name:"ФиксированныйМассив",... params): ФиксированныйМассив;
declare function v8New(name:"EnumInternetMailMessageParseStatus",... params): EnumInternetMailMessageParseStatus;
declare function v8New(name:"ПеречислениеСтатусРазбораИнтернетПочтовогоСообщения",... params): ПеречислениеСтатусРазбораИнтернетПочтовогоСообщения;
declare function v8New(name:"ArrayV8",... params): ArrayV8;
declare function v8New(name:"Массив",... params): Массив;
declare function v8New(name:"EnumDeliverableNotificationSubscriberType",... params): EnumDeliverableNotificationSubscriberType;
declare function v8New(name:"ПеречислениеТипПодписчикаДоставляемыхУведомлений",... params): ПеречислениеТипПодписчикаДоставляемыхУведомлений;
declare function v8New(name:"EnumSoundAlert",... params): EnumSoundAlert;
declare function v8New(name:"ПеречислениеЗвуковоеОповещение",... params): ПеречислениеЗвуковоеОповещение;
declare function v8New(name:"EnumInAppPurchaseService",... params): EnumInAppPurchaseService;
declare function v8New(name:"ПеречислениеСервисВстроенныхПокупок",... params): ПеречислениеСервисВстроенныхПокупок;
declare function v8New(name:"EnumFileNamesEncodingInZipFile",... params): EnumFileNamesEncodingInZipFile;
declare function v8New(name:"ПеречислениеКодировкаИменФайловВZipФайле",... params): ПеречислениеКодировкаИменФайловВZipФайле;
declare function v8New(name:"EnumFormItemTitleLocation",... params): EnumFormItemTitleLocation;
declare function v8New(name:"ПеречислениеПоложениеЗаголовкаЭлементаФормы",... params): ПеречислениеПоложениеЗаголовкаЭлементаФормы;
declare function v8New(name:"EnumFormItemCommandBarLabelLocation",... params): EnumFormItemCommandBarLabelLocation;
declare function v8New(name:"ПеречислениеПоложениеКоманднойПанелиЭлементаФормы",... params): ПеречислениеПоложениеКоманднойПанелиЭлементаФормы;
declare function v8New(name:"EnumFormCommandBarLabelLocation",... params): EnumFormCommandBarLabelLocation;
declare function v8New(name:"ПеречислениеПоложениеКоманднойПанелиФормы",... params): ПеречислениеПоложениеКоманднойПанелиФормы;
declare function v8New(name:"EnumIncompleteChoiceMode",... params): EnumIncompleteChoiceMode;
declare function v8New(name:"ПеречислениеРежимВыбораНезаполненного",... params): ПеречислениеРежимВыбораНезаполненного;
declare function v8New(name:"EnumSelectionShowMode",... params): EnumSelectionShowMode;
declare function v8New(name:"ПеречислениеРежимОтображенияВыделения",... params): ПеречислениеРежимОтображенияВыделения;
declare function v8New(name:"EnumItemHorizontalLocation",... params): EnumItemHorizontalLocation;
declare function v8New(name:"ПеречислениеГоризонтальноеПоложениеЭлемента",... params): ПеречислениеГоризонтальноеПоложениеЭлемента;
declare function v8New(name:"EnumItemVerticalAlign",... params): EnumItemVerticalAlign;
declare function v8New(name:"ПеречислениеВертикальноеПоложениеЭлемента",... params): ПеречислениеВертикальноеПоложениеЭлемента;
declare function v8New(name:"EnumColumnsGroup",... params): EnumColumnsGroup;
declare function v8New(name:"ПеречислениеГруппировкаКолонок",... params): ПеречислениеГруппировкаКолонок;
declare function v8New(name:"EnumChildFormItemsGroup",... params): EnumChildFormItemsGroup;
declare function v8New(name:"ПеречислениеГруппировкаПодчиненныхЭлементовФормы",... params): ПеречислениеГруппировкаПодчиненныхЭлементовФормы;
declare function v8New(name:"EnumItemsAndTitlesAlignVariant",... params): EnumItemsAndTitlesAlignVariant;
declare function v8New(name:"ПеречислениеВариантВыравниванияЭлементовИЗаголовков",... params): ПеречислениеВариантВыравниванияЭлементовИЗаголовков;
declare function v8New(name:"EnumFormItemSpacing",... params): EnumFormItemSpacing;
declare function v8New(name:"ПеречислениеИнтервалМеждуЭлементамиФормы",... params): ПеречислениеИнтервалМеждуЭлементамиФормы;
declare function v8New(name:"EnumFixingInTable",... params): EnumFixingInTable;
declare function v8New(name:"ПеречислениеФиксацияВТаблице",... params): ПеречислениеФиксацияВТаблице;
declare function v8New(name:"EnumTableHeightControlVariant",... params): EnumTableHeightControlVariant;
declare function v8New(name:"ПеречислениеВариантУправленияВысотойТаблицы",... params): ПеречислениеВариантУправленияВысотойТаблицы;
declare function v8New(name:"EnumChildFormItemsWidth",... params): EnumChildFormItemsWidth;
declare function v8New(name:"ПеречислениеШиринаПодчиненныхЭлементовФормы",... params): ПеречислениеШиринаПодчиненныхЭлементовФормы;
declare function v8New(name:"EnumUsualGroupRepresentation",... params): EnumUsualGroupRepresentation;
declare function v8New(name:"ПеречислениеОтображениеОбычнойГруппы",... params): ПеречислениеОтображениеОбычнойГруппы;
declare function v8New(name:"EnumUsualGroupBehavior",... params): EnumUsualGroupBehavior;
declare function v8New(name:"ПеречислениеПоведениеОбычнойГруппы",... params): ПеречислениеПоведениеОбычнойГруппы;
declare function v8New(name:"EnumUsualGroupControlRepresentation",... params): EnumUsualGroupControlRepresentation;
declare function v8New(name:"ПеречислениеОтображениеУправленияОбычнойГруппы",... params): ПеречислениеОтображениеУправленияОбычнойГруппы;
declare function v8New(name:"EnumThroughAlign",... params): EnumThroughAlign;
declare function v8New(name:"ПеречислениеСквозноеВыравнивание",... params): ПеречислениеСквозноеВыравнивание;
declare function v8New(name:"EnumFormButtonType",... params): EnumFormButtonType;
declare function v8New(name:"ПеречислениеВидКнопкиФормы",... params): ПеречислениеВидКнопкиФормы;
declare function v8New(name:"EnumCheckBoxType",... params): EnumCheckBoxType;
declare function v8New(name:"ПеречислениеВидФлажка",... params): ПеречислениеВидФлажка;
declare function v8New(name:"EnumRadioButtonType",... params): EnumRadioButtonType;
declare function v8New(name:"ПеречислениеВидПереключателя",... params): ПеречислениеВидПереключателя;
declare function v8New(name:"EnumFormFieldType",... params): EnumFormFieldType;
declare function v8New(name:"ПеречислениеВидПоляФормы",... params): ПеречислениеВидПоляФормы;
declare function v8New(name:"EnumFormDecorationType",... params): EnumFormDecorationType;
declare function v8New(name:"ПеречислениеВидДекорацииФормы",... params): ПеречислениеВидДекорацииФормы;
declare function v8New(name:"EnumFormGroupType",... params): EnumFormGroupType;
declare function v8New(name:"ПеречислениеВидГруппыФормы",... params): ПеречислениеВидГруппыФормы;
declare function v8New(name:"EnumTableRepresentation",... params): EnumTableRepresentation;
declare function v8New(name:"ПеречислениеОтображениеТаблицы",... params): ПеречислениеОтображениеТаблицы;
declare function v8New(name:"EnumTableRowInputMode",... params): EnumTableRowInputMode;
declare function v8New(name:"ПеречислениеРежимВводаСтрокТаблицы",... params): ПеречислениеРежимВводаСтрокТаблицы;
declare function v8New(name:"EnumTableSelectionMode",... params): EnumTableSelectionMode;
declare function v8New(name:"ПеречислениеРежимВыделенияТаблицы",... params): ПеречислениеРежимВыделенияТаблицы;
declare function v8New(name:"EnumTableRowSelectionMode",... params): EnumTableRowSelectionMode;
declare function v8New(name:"ПеречислениеРежимВыделенияСтрокиТаблицы",... params): ПеречислениеРежимВыделенияСтрокиТаблицы;
declare function v8New(name:"EnumScrollBarUse",... params): EnumScrollBarUse;
declare function v8New(name:"ПеречислениеИспользованиеПолосыПрокрутки",... params): ПеречислениеИспользованиеПолосыПрокрутки;
declare function v8New(name:"EnumSearchInTableOnInput",... params): EnumSearchInTableOnInput;
declare function v8New(name:"ПеречислениеПоискВТаблицеПриВводе",... params): ПеречислениеПоискВТаблицеПриВводе;
declare function v8New(name:"EnumToolTipRepresentation",... params): EnumToolTipRepresentation;
declare function v8New(name:"ПеречислениеОтображениеПодсказки",... params): ПеречислениеОтображениеПодсказки;
declare function v8New(name:"EnumInitialListView",... params): EnumInitialListView;
declare function v8New(name:"ПеречислениеНачальноеОтображениеСписка",... params): ПеречислениеНачальноеОтображениеСписка;
declare function v8New(name:"EnumInitialTreeView",... params): EnumInitialTreeView;
declare function v8New(name:"ПеречислениеНачальноеОтображениеДерева",... params): ПеречислениеНачальноеОтображениеДерева;
declare function v8New(name:"EnumFoldersAndItems",... params): EnumFoldersAndItems;
declare function v8New(name:"ПеречислениеГруппыИЭлементы",... params): ПеречислениеГруппыИЭлементы;
declare function v8New(name:"EnumEnterKeyBehaviorType",... params): EnumEnterKeyBehaviorType;
declare function v8New(name:"ПеречислениеТипПоведенияКлавишиEnter",... params): ПеречислениеТипПоведенияКлавишиEnter;
declare function v8New(name:"EnumColumnEditMode",... params): EnumColumnEditMode;
declare function v8New(name:"ПеречислениеРежимРедактированияКолонки",... params): ПеречислениеРежимРедактированияКолонки;
declare function v8New(name:"EnumReportFormType",... params): EnumReportFormType;
declare function v8New(name:"ПеречислениеТипФормыОтчета",... params): ПеречислениеТипФормыОтчета;
declare function v8New(name:"EnumViewScalingMode",... params): EnumViewScalingMode;
declare function v8New(name:"ПеречислениеРежимМасштабированияПросмотра",... params): ПеречислениеРежимМасштабированияПросмотра;
declare function v8New(name:"EnumDateSelectionMode",... params): EnumDateSelectionMode;
declare function v8New(name:"ПеречислениеРежимВыделенияДаты",... params): ПеречислениеРежимВыделенияДаты;
declare function v8New(name:"EnumFormItemOrientation",... params): EnumFormItemOrientation;
declare function v8New(name:"ПеречислениеОриентацияЭлементаФормы",... params): ПеречислениеОриентацияЭлементаФормы;
declare function v8New(name:"EnumProgressBarSmoothingMode",... params): EnumProgressBarSmoothingMode;
declare function v8New(name:"ПеречислениеРежимСглаживанияИндикатора",... params): ПеречислениеРежимСглаживанияИндикатора;
declare function v8New(name:"EnumTrackBarMarkingAppearance",... params): EnumTrackBarMarkingAppearance;
declare function v8New(name:"ПеречислениеОтображениеРазметкиПолосыРегулирования",... params): ПеречислениеОтображениеРазметкиПолосыРегулирования;
declare function v8New(name:"EnumFormPagesRepresentation",... params): EnumFormPagesRepresentation;
declare function v8New(name:"ПеречислениеОтображениеСтраницФормы",... params): ПеречислениеОтображениеСтраницФормы;
declare function v8New(name:"EnumWarningOnEditRepresentation",... params): EnumWarningOnEditRepresentation;
declare function v8New(name:"ПеречислениеОтображениеПредупрежденияПриРедактировании",... params): ПеречислениеОтображениеПредупрежденияПриРедактировании;
declare function v8New(name:"EnumVerticalFormScroll",... params): EnumVerticalFormScroll;
declare function v8New(name:"ПеречислениеВертикальнаяПрокруткаФормы",... params): ПеречислениеВертикальнаяПрокруткаФормы;
declare function v8New(name:"EnumFormItemAdditionType",... params): EnumFormItemAdditionType;
declare function v8New(name:"ПеречислениеВидДополненияЭлементаФормы",... params): ПеречислениеВидДополненияЭлементаФормы;
declare function v8New(name:"EnumDataChangeType",... params): EnumDataChangeType;
declare function v8New(name:"ПеречислениеВидИзмененияДанных",... params): ПеречислениеВидИзмененияДанных;
declare function v8New(name:"EnumSaveFormDataInSettings",... params): EnumSaveFormDataInSettings;
declare function v8New(name:"ПеречислениеСохранениеДанныхФормыВНастройках",... params): ПеречислениеСохранениеДанныхФормыВНастройках;
declare function v8New(name:"EnumAutoSaveFormDataInSettings",... params): EnumAutoSaveFormDataInSettings;
declare function v8New(name:"ПеречислениеАвтоматическоеСохранениеДанныхФормыВНастройках",... params): ПеречислениеАвтоматическоеСохранениеДанныхФормыВНастройках;
declare function v8New(name:"EnumFormWindowOpeningMode",... params): EnumFormWindowOpeningMode;
declare function v8New(name:"ПеречислениеРежимОткрытияОкнаФормы",... params): ПеречислениеРежимОткрытияОкнаФормы;
declare function v8New(name:"EnumClientRunMode",... params): EnumClientRunMode;
declare function v8New(name:"ПеречислениеРежимЗапускаКлиентскогоПриложения",... params): ПеречислениеРежимЗапускаКлиентскогоПриложения;
declare function v8New(name:"EnumCommandGroupCategory",... params): EnumCommandGroupCategory;
declare function v8New(name:"ПеречислениеКатегорияГруппыКоманд",... params): ПеречислениеКатегорияГруппыКоманд;
declare function v8New(name:"EnumCommandParameterUseMode",... params): EnumCommandParameterUseMode;
declare function v8New(name:"ПеречислениеРежимИспользованияПараметраКоманды",... params): ПеречислениеРежимИспользованияПараметраКоманды;
declare function v8New(name:"EnumAdditionalShowMode",... params): EnumAdditionalShowMode;
declare function v8New(name:"ПеречислениеДополнительныйРежимОтображения",... params): ПеречислениеДополнительныйРежимОтображения;
declare function v8New(name:"EnumEditTextUpdate",... params): EnumEditTextUpdate;
declare function v8New(name:"ПеречислениеОбновлениеТекстаРедактирования",... params): ПеречислениеОбновлениеТекстаРедактирования;
declare function v8New(name:"EnumApplicationFormsOpenningMode",... params): EnumApplicationFormsOpenningMode;
declare function v8New(name:"ПеречислениеРежимОткрытияФормПриложения",... params): ПеречислениеРежимОткрытияФормПриложения;
declare function v8New(name:"EnumSectionsPanelRepresentation",... params): EnumSectionsPanelRepresentation;
declare function v8New(name:"ПеречислениеОтображениеПанелиРазделов",... params): ПеречислениеОтображениеПанелиРазделов;
declare function v8New(name:"EnumChoiceHistoryOnInput",... params): EnumChoiceHistoryOnInput;
declare function v8New(name:"ПеречислениеИсторияВыбораПриВводе",... params): ПеречислениеИсторияВыбораПриВводе;
declare function v8New(name:"EnumButtonGroupRepresentation",... params): EnumButtonGroupRepresentation;
declare function v8New(name:"ПеречислениеОтображениеГруппыКнопок",... params): ПеречислениеОтображениеГруппыКнопок;
declare function v8New(name:"EnumButtonShape",... params): EnumButtonShape;
declare function v8New(name:"ПеречислениеФигураКнопки",... params): ПеречислениеФигураКнопки;
declare function v8New(name:"EnumButtonShapeRepresentation",... params): EnumButtonShapeRepresentation;
declare function v8New(name:"ПеречислениеОтображениеФигурыКнопки",... params): ПеречислениеОтображениеФигурыКнопки;
declare function v8New(name:"EnumButtonRepresentation",... params): EnumButtonRepresentation;
declare function v8New(name:"ПеречислениеОтображениеКнопки",... params): ПеречислениеОтображениеКнопки;
declare function v8New(name:"EnumSearchStringModeOnInputByString",... params): EnumSearchStringModeOnInputByString;
declare function v8New(name:"ПеречислениеСпособПоискаСтрокиПриВводеПоСтроке",... params): ПеречислениеСпособПоискаСтрокиПриВводеПоСтроке;
declare function v8New(name:"EnumFullTextSearchOnInputByString",... params): EnumFullTextSearchOnInputByString;
declare function v8New(name:"ПеречислениеПолнотекстовыйПоискПриВводеПоСтроке",... params): ПеречислениеПолнотекстовыйПоискПриВводеПоСтроке;
declare function v8New(name:"EnumChoiceDataGetModeOnInputByString",... params): EnumChoiceDataGetModeOnInputByString;
declare function v8New(name:"ПеречислениеРежимПолученияДанныхВыбораПриВводеПоСтроке",... params): ПеречислениеРежимПолученияДанныхВыбораПриВводеПоСтроке;
declare function v8New(name:"EnumChoiceButtonRepresentation",... params): EnumChoiceButtonRepresentation;
declare function v8New(name:"ПеречислениеОтображениеКнопкиВыбора",... params): ПеречислениеОтображениеКнопкиВыбора;
declare function v8New(name:"EnumSearchStringLocation",... params): EnumSearchStringLocation;
declare function v8New(name:"ПеречислениеПоложениеСтрокиПоиска",... params): ПеречислениеПоложениеСтрокиПоиска;
declare function v8New(name:"EnumViewStatusLocation",... params): EnumViewStatusLocation;
declare function v8New(name:"ПеречислениеПоложениеСостоянияПросмотра",... params): ПеречислениеПоложениеСостоянияПросмотра;
declare function v8New(name:"EnumSearchControlLocation",... params): EnumSearchControlLocation;
declare function v8New(name:"ПеречислениеПоложениеУправленияПоиском",... params): ПеречислениеПоложениеУправленияПоиском;
declare function v8New(name:"EnumFormButtonPictureLocation",... params): EnumFormButtonPictureLocation;
declare function v8New(name:"ПеречислениеПоложениеКартинкиКнопкиФормы",... params): ПеречислениеПоложениеКартинкиКнопкиФормы;
declare function v8New(name:"EnumFormConversationsRepresentation",... params): EnumFormConversationsRepresentation;
declare function v8New(name:"ПеречислениеОтображениеОбсужденийФормы",... params): ПеречислениеОтображениеОбсужденийФормы;
declare function v8New(name:"EnumWindowOpenVariant",... params): EnumWindowOpenVariant;
declare function v8New(name:"ПеречислениеВариантОткрытияОкна",... params): ПеречислениеВариантОткрытияОкна;
declare function v8New(name:"ClientApplicationWindows",... params): ClientApplicationWindows;
declare function v8New(name:"ОкнаКлиентскогоПриложения",... params): ОкнаКлиентскогоПриложения;
declare function v8New(name:"ClientApplicationWindow",... params): ClientApplicationWindow;
declare function v8New(name:"ОкноКлиентскогоПриложения",... params): ОкноКлиентскогоПриложения;
declare function v8New(name:"EnumEventLogLevel",... params): EnumEventLogLevel;
declare function v8New(name:"ПеречислениеУровеньЖурналаРегистрации",... params): ПеречислениеУровеньЖурналаРегистрации;
declare function v8New(name:"EnumEventLogEntryTransactionMode",... params): EnumEventLogEntryTransactionMode;
declare function v8New(name:"ПеречислениеРежимТранзакцииЗаписиЖурналаРегистрации",... params): ПеречислениеРежимТранзакцииЗаписиЖурналаРегистрации;
declare function v8New(name:"EnumEventLogEntryTransactionStatus",... params): EnumEventLogEntryTransactionStatus;
declare function v8New(name:"ПеречислениеСтатусТранзакцииЗаписиЖурналаРегистрации",... params): ПеречислениеСтатусТранзакцииЗаписиЖурналаРегистрации;
declare function v8New(name:"EnumAutoChangeRecord",... params): EnumAutoChangeRecord;
declare function v8New(name:"ПеречислениеАвтоРегистрацияИзменений",... params): ПеречислениеАвтоРегистрацияИзменений;
declare function v8New(name:"EnumAllowedMessageNo",... params): EnumAllowedMessageNo;
declare function v8New(name:"ПеречислениеДопустимыйНомерСообщения",... params): ПеречислениеДопустимыйНомерСообщения;
declare function v8New(name:"UUID",... params): UUID;
declare function v8New(name:"УникальныйИдентификатор",... params): УникальныйИдентификатор;
declare function v8New(name:"UnsafeOperationProtectionDescription",... params): UnsafeOperationProtectionDescription;
declare function v8New(name:"ОписаниеЗащитыОтОпасныхДействий",... params): ОписаниеЗащитыОтОпасныхДействий;
declare function v8New(name:"EnumDataItemSend",... params): EnumDataItemSend;
declare function v8New(name:"ПеречислениеОтправкаЭлементаДанных",... params): ПеречислениеОтправкаЭлементаДанных;
declare function v8New(name:"EnumDataItemReceive",... params): EnumDataItemReceive;
declare function v8New(name:"ПеречислениеПолучениеЭлементаДанных",... params): ПеречислениеПолучениеЭлементаДанных;
declare function v8New(name:"EnumFullTextSearchMode",... params): EnumFullTextSearchMode;
declare function v8New(name:"ПеречислениеРежимПолнотекстовогоПоиска",... params): ПеречислениеРежимПолнотекстовогоПоиска;
declare function v8New(name:"EnumFullTextSearchRepresentationType",... params): EnumFullTextSearchRepresentationType;
declare function v8New(name:"ПеречислениеВидОтображенияПолнотекстовогоПоиска",... params): ПеречислениеВидОтображенияПолнотекстовогоПоиска;
declare function v8New(name:"EnumFullTextSearchMetadataUse",... params): EnumFullTextSearchMetadataUse;
declare function v8New(name:"ПеречислениеИспользованиеМетаданныхПолнотекстовогоПоиска",... params): ПеречислениеИспользованиеМетаданныхПолнотекстовогоПоиска;
declare function v8New(name:"EnumBackgroundJobState",... params): EnumBackgroundJobState;
declare function v8New(name:"ПеречислениеСостояниеФоновогоЗадания",... params): ПеречислениеСостояниеФоновогоЗадания;
declare function v8New(name:"JobSchedule",... params): JobSchedule;
declare function v8New(name:"РасписаниеРегламентногоЗадания",... params): РасписаниеРегламентногоЗадания;
declare function v8New(name:"Structure",... params): Structure;
declare function v8New(name:"Структура",... params): Структура;
declare function v8New(name:"EnumAutonumerationInForm",... params): EnumAutonumerationInForm;
declare function v8New(name:"ПеречислениеАвтонумерацияВФорме",... params): ПеречислениеАвтонумерацияВФорме;
declare function v8New(name:"ValueList",... params): ValueList;
declare function v8New(name:"СписокЗначений",... params): СписокЗначений;
declare function v8New(name:"TypeDescription",... params): TypeDescription;
declare function v8New(name:"ОписаниеТипов",... params): ОписаниеТипов;
declare function v8New(name:"NumberQualifiers",... params): NumberQualifiers;
declare function v8New(name:"КвалификаторыЧисла",... params): КвалификаторыЧисла;
declare function v8New(name:"StringQualifiers",... params): StringQualifiers;
declare function v8New(name:"КвалификаторыСтроки",... params): КвалификаторыСтроки;
declare function v8New(name:"DateQualifiers",... params): DateQualifiers;
declare function v8New(name:"КвалификаторыДаты",... params): КвалификаторыДаты;
declare function v8New(name:"BinaryDataQualifiers",... params): BinaryDataQualifiers;
declare function v8New(name:"КвалификаторыДвоичныхДанных",... params): КвалификаторыДвоичныхДанных;
declare function v8New(name:"FormattedString",... params): FormattedString;
declare function v8New(name:"ФорматированнаяСтрока",... params): ФорматированнаяСтрока;
declare function v8New(name:"Picture",... params): Picture;
declare function v8New(name:"Картинка",... params): Картинка;
declare function v8New(name:"SettingsDescription",... params): SettingsDescription;
declare function v8New(name:"ОписаниеНастроек",... params): ОписаниеНастроек;
declare function v8New(name:"EnumStandardCommandsGroup",... params): EnumStandardCommandsGroup;
declare function v8New(name:"ПеречислениеСтандартнаяГруппаКоманд",... params): ПеречислениеСтандартнаяГруппаКоманд;
declare function v8New(name:"EnumDataBaseConfigurationUpdateExecutionInformationItemType",... params): EnumDataBaseConfigurationUpdateExecutionInformationItemType;
declare function v8New(name:"ПеречислениеТипЭлементаИнформацииОВыполненииОбновленияКонфигурацииБазыДанных",... params): ПеречислениеТипЭлементаИнформацииОВыполненииОбновленияКонфигурацииБазыДанных;
declare function v8New(name:"EnumDataBaseConfigurationUpdateState",... params): EnumDataBaseConfigurationUpdateState;
declare function v8New(name:"ПеречислениеСостояниеОбновленияКонфигурацииБазыДанных",... params): ПеречислениеСостояниеОбновленияКонфигурацииБазыДанных;
declare function v8New(name:"BinaryData",... params): BinaryData;
declare function v8New(name:"ДвоичныеДанные",... params): ДвоичныеДанные;
declare function v8New(name:"EnumConfigurationExtensionsSource",... params): EnumConfigurationExtensionsSource;
declare function v8New(name:"ПеречислениеИсточникРасширенийКонфигурации",... params): ПеречислениеИсточникРасширенийКонфигурации;
declare function v8New(name:"EnumConfigurationExtensionApplicationIssueSeverity",... params): EnumConfigurationExtensionApplicationIssueSeverity;
declare function v8New(name:"ПеречислениеВажностьПроблемыПримененияРасширенияКонфигурации",... params): ПеречислениеВажностьПроблемыПримененияРасширенияКонфигурации;
declare function v8New(name:"ValueTable",... params): ValueTable;
declare function v8New(name:"ТаблицаЗначений",... params): ТаблицаЗначений;
declare function v8New(name:"ConnectionsLock",... params): ConnectionsLock;
declare function v8New(name:"БлокировкаУстановкиСоединений",... params): БлокировкаУстановкиСоединений;
declare function v8New(name:"SessionsLock",... params): SessionsLock;
declare function v8New(name:"БлокировкаСеансов",... params): БлокировкаСеансов;
declare function v8New(name:"GeographicalSchema",... params): GeographicalSchema;
declare function v8New(name:"ГеографическаяСхема",... params): ГеографическаяСхема;
declare function v8New(name:"Color",... params): Color;
declare function v8New(name:"Цвет",... params): Цвет;
declare function v8New(name:"Font",... params): Font;
declare function v8New(name:"Шрифт",... params): Шрифт;
declare function v8New(name:"Border",... params): Border;
declare function v8New(name:"Рамка",... params): Рамка;
declare function v8New(name:"DataCompositionAppearanceTemplate",... params): DataCompositionAppearanceTemplate;
declare function v8New(name:"МакетОформленияКомпоновкиДанных",... params): МакетОформленияКомпоновкиДанных;
declare function v8New(name:"DataCompositionParameter",... params): DataCompositionParameter;
declare function v8New(name:"ПараметрКомпоновкиДанных",... params): ПараметрКомпоновкиДанных;
declare function v8New(name:"DataCompositionSchema",... params): DataCompositionSchema;
declare function v8New(name:"СхемаКомпоновкиДанных",... params): СхемаКомпоновкиДанных;
declare function v8New(name:"DataCompositionField",... params): DataCompositionField;
declare function v8New(name:"ПолеКомпоновкиДанных",... params): ПолеКомпоновкиДанных;
declare function v8New(name:"DataCompositionTypeLink",... params): DataCompositionTypeLink;
declare function v8New(name:"СвязьПоТипуКомпоновкиДанных",... params): СвязьПоТипуКомпоновкиДанных;
declare function v8New(name:"DataCompositionSettings",... params): DataCompositionSettings;
declare function v8New(name:"НастройкиКомпоновкиДанных",... params): НастройкиКомпоновкиДанных;
declare function v8New(name:"DataCompositionFilter",... params): DataCompositionFilter;
declare function v8New(name:"ОтборКомпоновкиДанных",... params): ОтборКомпоновкиДанных;
declare function v8New(name:"SpreadsheetDocument",... params): SpreadsheetDocument;
declare function v8New(name:"ТабличныйДокумент",... params): ТабличныйДокумент;
declare function v8New(name:"Line",... params): Line;
declare function v8New(name:"Линия",... params): Линия;
declare function v8New(name:"ReportBuilder",... params): ReportBuilder;
declare function v8New(name:"ПостроительОтчета",... params): ПостроительОтчета;
declare function v8New(name:"ValueTree",... params): ValueTree;
declare function v8New(name:"ДеревоЗначений",... params): ДеревоЗначений;
declare function v8New(name:"ConditionalAppearance",... params): ConditionalAppearance;
declare function v8New(name:"УсловноеОформление",... params): УсловноеОформление;
declare function v8New(name:"AppearanceArea",... params): AppearanceArea;
declare function v8New(name:"ОбластьОформления",... params): ОбластьОформления;
declare function v8New(name:"AppearanceSetting",... params): AppearanceSetting;
declare function v8New(name:"НастройкаОформления",... params): НастройкаОформления;
declare function v8New(name:"DataSourceDescription",... params): DataSourceDescription;
declare function v8New(name:"ОписаниеИсточникаДанных",... params): ОписаниеИсточникаДанных;
declare function v8New(name:"Query",... params): Query;
declare function v8New(name:"Запрос",... params): Запрос;
declare function v8New(name:"TempTablesManager",... params): TempTablesManager;
declare function v8New(name:"МенеджерВременныхТаблиц",... params): МенеджерВременныхТаблиц;
declare function v8New(name:"TextDocument",... params): TextDocument;
declare function v8New(name:"ТекстовыйДокумент",... params): ТекстовыйДокумент;
declare function v8New(name:"ConnectionStopRequest",... params): ConnectionStopRequest;
declare function v8New(name:"НеобходимостьЗавершенияСоединения",... params): НеобходимостьЗавершенияСоединения;
declare function v8New(name:"EventLogEventUse",... params): EventLogEventUse;
declare function v8New(name:"ИспользованиеСобытияЖурналаРегистрации",... params): ИспользованиеСобытияЖурналаРегистрации;
declare function v8New(name:"EnumWorkingDateMode",... params): EnumWorkingDateMode;
declare function v8New(name:"ПеречислениеРежимРабочейДаты",... params): ПеречислениеРежимРабочейДаты;
declare function v8New(name:"EnumIntervalBoundVariant",... params): EnumIntervalBoundVariant;
declare function v8New(name:"ПеречислениеВариантГраницыИнтервала",... params): ПеречислениеВариантГраницыИнтервала;
declare function v8New(name:"EnumPeriodVariant",... params): EnumPeriodVariant;
declare function v8New(name:"ПеречислениеВариантПериода",... params): ПеречислениеВариантПериода;
declare function v8New(name:"EnumPeriodSettingsVariant",... params): EnumPeriodSettingsVariant;
declare function v8New(name:"ПеречислениеВариантНастройкиПериода",... params): ПеречислениеВариантНастройкиПериода;
declare function v8New(name:"EnumNewRowShowCheckVariant",... params): EnumNewRowShowCheckVariant;
declare function v8New(name:"ПеречислениеВариантПроверкиОтображенияНовойСтроки",... params): ПеречислениеВариантПроверкиОтображенияНовойСтроки;
declare function v8New(name:"Shortcut",... params): Shortcut;
declare function v8New(name:"СочетаниеКлавиш",... params): СочетаниеКлавиш;
declare function v8New(name:"EnumButtonPictureLocation",... params): EnumButtonPictureLocation;
declare function v8New(name:"ПеречислениеПоложениеКартинкиКнопки",... params): ПеречислениеПоложениеКартинкиКнопки;
declare function v8New(name:"EnumTitleLocation",... params): EnumTitleLocation;
declare function v8New(name:"ПеречислениеПоложениеЗаголовка",... params): ПеречислениеПоложениеЗаголовка;
declare function v8New(name:"EnumKey",... params): EnumKey;
declare function v8New(name:"ПеречислениеКлавиша",... params): ПеречислениеКлавиша;
declare function v8New(name:"EnumDialogReturnCode",... params): EnumDialogReturnCode;
declare function v8New(name:"ПеречислениеКодВозвратаДиалога",... params): ПеречислениеКодВозвратаДиалога;
declare function v8New(name:"EnumCommandBarButtonType",... params): EnumCommandBarButtonType;
declare function v8New(name:"ПеречислениеТипКнопкиКоманднойПанели",... params): ПеречислениеТипКнопкиКоманднойПанели;
declare function v8New(name:"EnumWindowStateVariant",... params): EnumWindowStateVariant;
declare function v8New(name:"ПеречислениеВариантСостоянияОкна",... params): ПеречислениеВариантСостоянияОкна;
declare function v8New(name:"EnumWindowDockVariant",... params): EnumWindowDockVariant;
declare function v8New(name:"ПеречислениеВариантПрикрепленияОкна",... params): ПеречислениеВариантПрикрепленияОкна;
declare function v8New(name:"EnumWindowSizeChange",... params): EnumWindowSizeChange;
declare function v8New(name:"ПеречислениеИзменениеРазмераОкна",... params): ПеречислениеИзменениеРазмераОкна;
declare function v8New(name:"EnumScrollingTextMode",... params): EnumScrollingTextMode;
declare function v8New(name:"ПеречислениеРежимБегущейСтроки",... params): ПеречислениеРежимБегущейСтроки;
declare function v8New(name:"EnumListEditMode",... params): EnumListEditMode;
declare function v8New(name:"ПеречислениеСпособРедактированияСписка",... params): ПеречислениеСпособРедактированияСписка;
declare function v8New(name:"EnumControlEdge",... params): EnumControlEdge;
declare function v8New(name:"ПеречислениеГраницаЭлементаУправления",... params): ПеречислениеГраницаЭлементаУправления;
declare function v8New(name:"EnumLabelPictureLocation",... params): EnumLabelPictureLocation;
declare function v8New(name:"ПеречислениеПоложениеКартинкиНадписи",... params): ПеречислениеПоложениеКартинкиНадписи;
declare function v8New(name:"EnumPanelPictureLocation",... params): EnumPanelPictureLocation;
declare function v8New(name:"ПеречислениеПоложениеКартинкиПанели",... params): ПеречислениеПоложениеКартинкиПанели;
declare function v8New(name:"EnumWindowLocationVariant",... params): EnumWindowLocationVariant;
declare function v8New(name:"ПеречислениеВариантПоложенияОкна",... params): ПеречислениеВариантПоложенияОкна;
declare function v8New(name:"EnumControlCollapseMode",... params): EnumControlCollapseMode;
declare function v8New(name:"ПеречислениеРежимСверткиЭлементаУправления",... params): ПеречислениеРежимСверткиЭлементаУправления;
declare function v8New(name:"EnumCommandBarButtonOrder",... params): EnumCommandBarButtonOrder;
declare function v8New(name:"ПеречислениеПорядокКнопокКоманднойПанели",... params): ПеречислениеПорядокКнопокКоманднойПанели;
declare function v8New(name:"EnumWindowAppearanceModeVariant",... params): EnumWindowAppearanceModeVariant;
declare function v8New(name:"ПеречислениеВариантСпособаОтображенияОкна",... params): ПеречислениеВариантСпособаОтображенияОкна;
declare function v8New(name:"EnumWindowAppearanceModeChange",... params): EnumWindowAppearanceModeChange;
declare function v8New(name:"ПеречислениеИзменениеСпособаОтображенияОкна",... params): ПеречислениеИзменениеСпособаОтображенияОкна;
declare function v8New(name:"EnumDragAllowedActions",... params): EnumDragAllowedActions;
declare function v8New(name:"ПеречислениеДопустимыеДействияПеретаскивания",... params): ПеречислениеДопустимыеДействияПеретаскивания;
declare function v8New(name:"EnumDragAction",... params): EnumDragAction;
declare function v8New(name:"ПеречислениеДействиеПеретаскивания",... params): ПеречислениеДействиеПеретаскивания;
declare function v8New(name:"EnumQuestionDialogMode",... params): EnumQuestionDialogMode;
declare function v8New(name:"ПеречислениеРежимДиалогаВопрос",... params): ПеречислениеРежимДиалогаВопрос;
declare function v8New(name:"EnumXMLNodeType",... params): EnumXMLNodeType;
declare function v8New(name:"ПеречислениеТипУзлаXML",... params): ПеречислениеТипУзлаXML;
declare function v8New(name:"EnumXMLTypeAssignment",... params): EnumXMLTypeAssignment;
declare function v8New(name:"ПеречислениеНазначениеТипаXML",... params): ПеречислениеНазначениеТипаXML;
declare function v8New(name:"EnumXMLAttributeType",... params): EnumXMLAttributeType;
declare function v8New(name:"ПеречислениеТипАтрибутаXML",... params): ПеречислениеТипАтрибутаXML;
declare function v8New(name:"EnumXMLSpace",... params): EnumXMLSpace;
declare function v8New(name:"ПеречислениеПробельныеСимволыXML",... params): ПеречислениеПробельныеСимволыXML;
declare function v8New(name:"EnumXMLValidationType",... params): EnumXMLValidationType;
declare function v8New(name:"ПеречислениеТипПроверкиXML",... params): ПеречислениеТипПроверкиXML;
declare function v8New(name:"EnumDOMNodeType",... params): EnumDOMNodeType;
declare function v8New(name:"ПеречислениеТипУзлаDOM",... params): ПеречислениеТипУзлаDOM;
declare function v8New(name:"EnumDOMDocumentPosition",... params): EnumDOMDocumentPosition;
declare function v8New(name:"ПеречислениеПозицияВДокументеDOM",... params): ПеречислениеПозицияВДокументеDOM;
declare function v8New(name:"EnumDOMBuilderAction",... params): EnumDOMBuilderAction;
declare function v8New(name:"ПеречислениеДействиеПостроителяDOM",... params): ПеречислениеДействиеПостроителяDOM;
declare function v8New(name:"EnumDOMNodeFilterParameters",... params): EnumDOMNodeFilterParameters;
declare function v8New(name:"ПеречислениеПараметрыОтбораУзловDOM",... params): ПеречислениеПараметрыОтбораУзловDOM;
declare function v8New(name:"EnumXSComponentType",... params): EnumXSComponentType;
declare function v8New(name:"ПеречислениеТипКомпонентыXS",... params): ПеречислениеТипКомпонентыXS;
declare function v8New(name:"EnumXSAttributeUseCategory",... params): EnumXSAttributeUseCategory;
declare function v8New(name:"ПеречислениеКатегорияИспользованияАтрибутаXS",... params): ПеречислениеКатегорияИспользованияАтрибутаXS;
declare function v8New(name:"EnumXSForm",... params): EnumXSForm;
declare function v8New(name:"ПеречислениеФормаПредставленияXS",... params): ПеречислениеФормаПредставленияXS;
declare function v8New(name:"EnumXSConstraint",... params): EnumXSConstraint;
declare function v8New(name:"ПеречислениеОграничениеЗначенияXS",... params): ПеречислениеОграничениеЗначенияXS;
declare function v8New(name:"EnumXSDisallowedSubstitutions",... params): EnumXSDisallowedSubstitutions;
declare function v8New(name:"ПеречислениеНедопустимыеПодстановкиXS",... params): ПеречислениеНедопустимыеПодстановкиXS;
declare function v8New(name:"EnumXSSubstitutionGroupExclusions",... params): EnumXSSubstitutionGroupExclusions;
declare function v8New(name:"ПеречислениеИсключенияГруппПодстановкиXS",... params): ПеречислениеИсключенияГруппПодстановкиXS;
declare function v8New(name:"EnumXSIdentityConstraintCategory",... params): EnumXSIdentityConstraintCategory;
declare function v8New(name:"ПеречислениеКатегорияОграниченияИдентичностиXS",... params): ПеречислениеКатегорияОграниченияИдентичностиXS;
declare function v8New(name:"EnumXSXPathVariety",... params): EnumXSXPathVariety;
declare function v8New(name:"ПеречислениеВариантXPathXS",... params): ПеречислениеВариантXPathXS;
declare function v8New(name:"EnumXSSimpleFinal",... params): EnumXSSimpleFinal;
declare function v8New(name:"ПеречислениеЗавершенностьПростогоТипаXS",... params): ПеречислениеЗавершенностьПростогоТипаXS;
declare function v8New(name:"EnumXSComplexFinal",... params): EnumXSComplexFinal;
declare function v8New(name:"ПеречислениеЗавершенностьСоставногоТипаXS",... params): ПеречислениеЗавершенностьСоставногоТипаXS;
declare function v8New(name:"EnumXSSchemaFinal",... params): EnumXSSchemaFinal;
declare function v8New(name:"ПеречислениеЗавершенностьСхемыXS",... params): ПеречислениеЗавершенностьСхемыXS;
declare function v8New(name:"EnumXSSimpleTypeVariety",... params): EnumXSSimpleTypeVariety;
declare function v8New(name:"ПеречислениеВариантПростогоТипаXS",... params): ПеречислениеВариантПростогоТипаXS;
declare function v8New(name:"EnumXSWhitespaceHandling",... params): EnumXSWhitespaceHandling;
declare function v8New(name:"ПеречислениеОбработкаПробельныхСимволовXS",... params): ПеречислениеОбработкаПробельныхСимволовXS;
declare function v8New(name:"EnumXSProcessContents",... params): EnumXSProcessContents;
declare function v8New(name:"ПеречислениеОбработкаСодержимогоXS",... params): ПеречислениеОбработкаСодержимогоXS;
declare function v8New(name:"EnumXSNamespaceConstraintCategory",... params): EnumXSNamespaceConstraintCategory;
declare function v8New(name:"ПеречислениеКатегорияОграниченияПространствИменXS",... params): ПеречислениеКатегорияОграниченияПространствИменXS;
declare function v8New(name:"EnumXSCompositor",... params): EnumXSCompositor;
declare function v8New(name:"ПеречислениеВидГруппыМоделиXS",... params): ПеречислениеВидГруппыМоделиXS;
declare function v8New(name:"EnumXSDerivationMethod",... params): EnumXSDerivationMethod;
declare function v8New(name:"ПеречислениеМетодНаследованияXS",... params): ПеречислениеМетодНаследованияXS;
declare function v8New(name:"EnumXSProhibitedSubstitutions",... params): EnumXSProhibitedSubstitutions;
declare function v8New(name:"ПеречислениеЗапрещенныеПодстановкиXS",... params): ПеречислениеЗапрещенныеПодстановкиXS;
declare function v8New(name:"EnumXSContentModel",... params): EnumXSContentModel;
declare function v8New(name:"ПеречислениеМодельСодержимогоXS",... params): ПеречислениеМодельСодержимогоXS;
declare function v8New(name:"EnumXMLCanonicalizationType",... params): EnumXMLCanonicalizationType;
declare function v8New(name:"ПеречислениеТипКаноническогоXML",... params): ПеречислениеТипКаноническогоXML;
declare function v8New(name:"EnumDOMXPathResultType",... params): EnumDOMXPathResultType;
declare function v8New(name:"ПеречислениеТипРезультатаDOMXPath",... params): ПеречислениеТипРезультатаDOMXPath;
declare function v8New(name:"XMLDataType",... params): XMLDataType;
declare function v8New(name:"ТипДанныхXML",... params): ТипДанныхXML;
declare function v8New(name:"EnumXMLForm",... params): EnumXMLForm;
declare function v8New(name:"ПеречислениеФормаXML",... params): ПеречислениеФормаXML;
declare function v8New(name:"EnumXDTOFacetType",... params): EnumXDTOFacetType;
declare function v8New(name:"ПеречислениеВидФасетаXDTO",... params): ПеречислениеВидФасетаXDTO;
declare function v8New(name:"XDTOFactory",... params): XDTOFactory;
declare function v8New(name:"ФабрикаXDTO",... params): ФабрикаXDTO;
declare function v8New(name:"XMLSchemaSet",... params): XMLSchemaSet;
declare function v8New(name:"НаборСхемXML",... params): НаборСхемXML;
declare function v8New(name:"XMLSchema",... params): XMLSchema;
declare function v8New(name:"СхемаXML",... params): СхемаXML;
declare function v8New(name:"DOMDocumentType",... params): DOMDocumentType;
declare function v8New(name:"ОпределениеТипаДокументаDOM",... params): ОпределениеТипаДокументаDOM;
declare function v8New(name:"DOMDocument",... params): DOMDocument;
declare function v8New(name:"ДокументDOM",... params): ДокументDOM;
declare function v8New(name:"DOMDocumentConfiguration",... params): DOMDocumentConfiguration;
declare function v8New(name:"КонфигурацияДокументаDOM",... params): КонфигурацияДокументаDOM;
declare function v8New(name:"DOMNodeIterator",... params): DOMNodeIterator;
declare function v8New(name:"ИтераторУзловDOM",... params): ИтераторУзловDOM;
declare function v8New(name:"DOMNodeFilter",... params): DOMNodeFilter;
declare function v8New(name:"ФильтрУзловDOM",... params): ФильтрУзловDOM;
declare function v8New(name:"DOMTreeWalker",... params): DOMTreeWalker;
declare function v8New(name:"ОбходДереваDOM",... params): ОбходДереваDOM;
declare function v8New(name:"DOMNamespaceResolver",... params): DOMNamespaceResolver;
declare function v8New(name:"РазыменовательПространствИменDOM",... params): РазыменовательПространствИменDOM;
declare function v8New(name:"Map",... params): Map;
declare function v8New(name:"Соответствие",... params): Соответствие;
declare function v8New(name:"XSSchemaFinalUnion",... params): XSSchemaFinalUnion;
declare function v8New(name:"ОбъединениеЗавершенностиСхемыXS",... params): ОбъединениеЗавершенностиСхемыXS;
declare function v8New(name:"XSProhibitedSubstitutionsUnion",... params): XSProhibitedSubstitutionsUnion;
declare function v8New(name:"ОбъединениеЗапрещенныхПодстановокXS",... params): ОбъединениеЗапрещенныхПодстановокXS;
declare function v8New(name:"XSSimpleTypeDefinition",... params): XSSimpleTypeDefinition;
declare function v8New(name:"ОпределениеПростогоТипаXS",... params): ОпределениеПростогоТипаXS;
declare function v8New(name:"XSAnnotation",... params): XSAnnotation;
declare function v8New(name:"АннотацияXS",... params): АннотацияXS;
declare function v8New(name:"XMLExpandedName",... params): XMLExpandedName;
declare function v8New(name:"РасширенноеИмяXML",... params): РасширенноеИмяXML;
declare function v8New(name:"XSSimpleFinalUnion",... params): XSSimpleFinalUnion;
declare function v8New(name:"ОбъединениеЗавершенностиПростогоТипаXS",... params): ОбъединениеЗавершенностиПростогоТипаXS;
declare function v8New(name:"XSComplexTypeDefinition",... params): XSComplexTypeDefinition;
declare function v8New(name:"ОпределениеСоставногоТипаXS",... params): ОпределениеСоставногоТипаXS;
declare function v8New(name:"XSComplexFinalUnion",... params): XSComplexFinalUnion;
declare function v8New(name:"ОбъединениеЗавершенностиСоставногоТипаXS",... params): ОбъединениеЗавершенностиСоставногоТипаXS;
declare function v8New(name:"XSWildcard",... params): XSWildcard;
declare function v8New(name:"МаскаXS",... params): МаскаXS;
declare function v8New(name:"XSElementDeclaration",... params): XSElementDeclaration;
declare function v8New(name:"ОбъявлениеЭлементаXS",... params): ОбъявлениеЭлементаXS;
declare function v8New(name:"XSDisallowedSubstitutionsUnion",... params): XSDisallowedSubstitutionsUnion;
declare function v8New(name:"ОбъединениеНедопустимыхПодстановкиXS",... params): ОбъединениеНедопустимыхПодстановкиXS;
declare function v8New(name:"XSSubstitutionGroupExclusionsUnion",... params): XSSubstitutionGroupExclusionsUnion;
declare function v8New(name:"ОбъединениеИсключенийГруппПодстановкиXS",... params): ОбъединениеИсключенийГруппПодстановкиXS;
declare function v8New(name:"XSAttributeDeclaration",... params): XSAttributeDeclaration;
declare function v8New(name:"ОбъявлениеАтрибутаXS",... params): ОбъявлениеАтрибутаXS;
declare function v8New(name:"XSAttributeGroupDefinition",... params): XSAttributeGroupDefinition;
declare function v8New(name:"ОпределениеГруппыАтрибутовXS",... params): ОпределениеГруппыАтрибутовXS;
declare function v8New(name:"XSModelGroupDefinition",... params): XSModelGroupDefinition;
declare function v8New(name:"ОпределениеГруппыМоделиXS",... params): ОпределениеГруппыМоделиXS;
declare function v8New(name:"XSModelGroup",... params): XSModelGroup;
declare function v8New(name:"ГруппаМоделиXS",... params): ГруппаМоделиXS;
declare function v8New(name:"XDTOSerializer",... params): XDTOSerializer;
declare function v8New(name:"СериализаторXDTO",... params): СериализаторXDTO;
declare function v8New(name:"EnumFileCompareMethod",... params): EnumFileCompareMethod;
declare function v8New(name:"ПеречислениеСпособСравненияФайлов",... params): ПеречислениеСпособСравненияФайлов;
declare function v8New(name:"EnumFileDialogMode",... params): EnumFileDialogMode;
declare function v8New(name:"ПеречислениеРежимДиалогаВыбораФайла",... params): ПеречислениеРежимДиалогаВыбораФайла;
declare function v8New(name:"EnumVerticalAlign",... params): EnumVerticalAlign;
declare function v8New(name:"ПеречислениеВертикальноеПоложение",... params): ПеречислениеВертикальноеПоложение;
declare function v8New(name:"EnumHorizontalAlign",... params): EnumHorizontalAlign;
declare function v8New(name:"ПеречислениеГоризонтальноеПоложение",... params): ПеречислениеГоризонтальноеПоложение;
declare function v8New(name:"EnumPageOrientation",... params): EnumPageOrientation;
declare function v8New(name:"ПеречислениеОриентацияСтраницы",... params): ПеречислениеОриентацияСтраницы;
declare function v8New(name:"EnumPictureSize",... params): EnumPictureSize;
declare function v8New(name:"ПеречислениеРазмерКартинки",... params): ПеречислениеРазмерКартинки;
declare function v8New(name:"EnumPictureFormat",... params): EnumPictureFormat;
declare function v8New(name:"ПеречислениеФорматКартинки",... params): ПеречислениеФорматКартинки;
declare function v8New(name:"EnumAllowedLength",... params): EnumAllowedLength;
declare function v8New(name:"ПеречислениеДопустимаяДлина",... params): ПеречислениеДопустимаяДлина;
declare function v8New(name:"EnumAllowedSign",... params): EnumAllowedSign;
declare function v8New(name:"ПеречислениеДопустимыйЗнак",... params): ПеречислениеДопустимыйЗнак;
declare function v8New(name:"EnumDateFractions",... params): EnumDateFractions;
declare function v8New(name:"ПеречислениеЧастиДаты",... params): ПеречислениеЧастиДаты;
declare function v8New(name:"EnumRoundMode",... params): EnumRoundMode;
declare function v8New(name:"ПеречислениеРежимОкругления",... params): ПеречислениеРежимОкругления;
declare function v8New(name:"EnumSortDirection",... params): EnumSortDirection;
declare function v8New(name:"ПеречислениеНаправлениеСортировки",... params): ПеречислениеНаправлениеСортировки;
declare function v8New(name:"EnumTextEncoding",... params): EnumTextEncoding;
declare function v8New(name:"ПеречислениеКодировкаТекста",... params): ПеречислениеКодировкаТекста;
declare function v8New(name:"EnumUseOutput",... params): EnumUseOutput;
declare function v8New(name:"ПеречислениеИспользованиеВывода",... params): ПеречислениеИспользованиеВывода;
declare function v8New(name:"EnumPrintDialogUseMode",... params): EnumPrintDialogUseMode;
declare function v8New(name:"ПеречислениеРежимИспользованияДиалогаПечати",... params): ПеречислениеРежимИспользованияДиалогаПечати;
declare function v8New(name:"EnumFontType",... params): EnumFontType;
declare function v8New(name:"ПеречислениеВидШрифта",... params): ПеречислениеВидШрифта;
declare function v8New(name:"EnumBorderType",... params): EnumBorderType;
declare function v8New(name:"ПеречислениеВидРамки",... params): ПеречислениеВидРамки;
declare function v8New(name:"EnumControlBorderType",... params): EnumControlBorderType;
declare function v8New(name:"ПеречислениеТипРамкиЭлементаУправления",... params): ПеречислениеТипРамкиЭлементаУправления;
declare function v8New(name:"EnumColorType",... params): EnumColorType;
declare function v8New(name:"ПеречислениеВидЦвета",... params): ПеречислениеВидЦвета;
declare function v8New(name:"EnumPictureType",... params): EnumPictureType;
declare function v8New(name:"ПеречислениеВидКартинки",... params): ПеречислениеВидКартинки;
declare function v8New(name:"EnumFillChecking",... params): EnumFillChecking;
declare function v8New(name:"ПеречислениеПроверкаЗаполнения",... params): ПеречислениеПроверкаЗаполнения;
declare function v8New(name:"EnumStandardBeginningDateVariant",... params): EnumStandardBeginningDateVariant;
declare function v8New(name:"ПеречислениеВариантСтандартнойДатыНачала",... params): ПеречислениеВариантСтандартнойДатыНачала;
declare function v8New(name:"EnumStandardPeriodVariant",... params): EnumStandardPeriodVariant;
declare function v8New(name:"ПеречислениеВариантСтандартногоПериода",... params): ПеречислениеВариантСтандартногоПериода;
declare function v8New(name:"EnumPlatformType",... params): EnumPlatformType;
declare function v8New(name:"ПеречислениеТипПлатформы",... params): ПеречислениеТипПлатформы;
declare function v8New(name:"EnumSizeChangeMode",... params): EnumSizeChangeMode;
declare function v8New(name:"ПеречислениеРежимИзмененияРазмера",... params): ПеречислениеРежимИзмененияРазмера;
declare function v8New(name:"EnumDuplexPrintingType",... params): EnumDuplexPrintingType;
declare function v8New(name:"ПеречислениеТипДвустороннейПечати",... params): ПеречислениеТипДвустороннейПечати;
declare function v8New(name:"EnumPagePlacementAlternation",... params): EnumPagePlacementAlternation;
declare function v8New(name:"ПеречислениеЧередованиеРасположенияСтраниц",... params): ПеречислениеЧередованиеРасположенияСтраниц;
declare function v8New(name:"EnumTextPositionRelativeToPicture",... params): EnumTextPositionRelativeToPicture;
declare function v8New(name:"ПеречислениеПоложениеТекстаОтносительноКартинки",... params): ПеречислениеПоложениеТекстаОтносительноКартинки;
declare function v8New(name:"EnumMainClientApplicationWindowMode",... params): EnumMainClientApplicationWindowMode;
declare function v8New(name:"ПеречислениеРежимОсновногоОкнаКлиентскогоПриложения",... params): ПеречислениеРежимОсновногоОкнаКлиентскогоПриложения;
declare function v8New(name:"EnumSearchDirection",... params): EnumSearchDirection;
declare function v8New(name:"ПеречислениеНаправлениеПоиска",... params): ПеречислениеНаправлениеПоиска;
declare function v8New(name:"CollaborationSystemManager",... params): CollaborationSystemManager;
declare function v8New(name:"МенеджерСистемыВзаимодействия",... params): МенеджерСистемыВзаимодействия;
declare function v8New(name:"CommandBar",... params): CommandBar;
declare function v8New(name:"КоманднаяПанель",... params): КоманднаяПанель;
declare function v8New(name:"EnumGraphicalSchemaGridDrawMode",... params): EnumGraphicalSchemaGridDrawMode;
declare function v8New(name:"ПеречислениеРежимОтрисовкиСеткиГрафическойСхемы",... params): ПеречислениеРежимОтрисовкиСеткиГрафическойСхемы;
declare function v8New(name:"EnumContactDataEmailAddressType",... params): EnumContactDataEmailAddressType;
declare function v8New(name:"ПеречислениеТипАдресаЭлектроннойПочтыДанныхКонтакта",... params): ПеречислениеТипАдресаЭлектроннойПочтыДанныхКонтакта;
declare function v8New(name:"QuerySchemaExpression",... params): QuerySchemaExpression;
declare function v8New(name:"ВыражениеСхемыЗапроса",... params): ВыражениеСхемыЗапроса;
declare function v8New(name:"XSMaxLengthFacet",... params): XSMaxLengthFacet;
declare function v8New(name:"ФасетМаксимальнойДлиныXS",... params): ФасетМаксимальнойДлиныXS;
declare function v8New(name:"EnumDataCompositionComparisonType",... params): EnumDataCompositionComparisonType;
declare function v8New(name:"ПеречислениеВидСравненияКомпоновкиДанных",... params): ПеречислениеВидСравненияКомпоновкиДанных;
declare function v8New(name:"DataCompositionTemplate",... params): DataCompositionTemplate;
declare function v8New(name:"МакетКомпоновкиДанных",... params): МакетКомпоновкиДанных;
declare function v8New(name:"PlannerItemScheduleDialog",... params): PlannerItemScheduleDialog;
declare function v8New(name:"ДиалогРасписанияЭлементаПланировщика",... params): ДиалогРасписанияЭлементаПланировщика;
declare function v8New(name:"XSLTransform",... params): XSLTransform;
declare function v8New(name:"ПреобразованиеXSL",... params): ПреобразованиеXSL;
declare function v8New(name:"EnumChartBoundaryDetectionMethod",... params): EnumChartBoundaryDetectionMethod;
declare function v8New(name:"ПеречислениеСпособОпределенияОграничивающегоЗначенияДиаграммы",... params): ПеречислениеСпособОпределенияОграничивающегоЗначенияДиаграммы;
declare function v8New(name:"DataCompositionResultValueCollectionOutputProcessor",... params): DataCompositionResultValueCollectionOutputProcessor;
declare function v8New(name:"ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений",... params): ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
declare function v8New(name:"SystemInfo",... params): SystemInfo;
declare function v8New(name:"СистемнаяИнформация",... params): СистемнаяИнформация;
declare function v8New(name:"JSONWriterSettings",... params): JSONWriterSettings;
declare function v8New(name:"ПараметрыЗаписиJSON",... params): ПараметрыЗаписиJSON;
declare function v8New(name:"EnumSpecialTextInputMode",... params): EnumSpecialTextInputMode;
declare function v8New(name:"ПеречислениеСпециальныйРежимВводаТекста",... params): ПеречислениеСпециальныйРежимВводаТекста;
declare function v8New(name:"DataCompositionDetailsData",... params): DataCompositionDetailsData;
declare function v8New(name:"ДанныеРасшифровкиКомпоновкиДанных",... params): ДанныеРасшифровкиКомпоновкиДанных;
declare function v8New(name:"TestedApplication",... params): TestedApplication;
declare function v8New(name:"ТестируемоеПриложение",... params): ТестируемоеПриложение;
declare function v8New(name:"EventLogAccessDeniedEventUseDescription",... params): EventLogAccessDeniedEventUseDescription;
declare function v8New(name:"ОписаниеИспользованияСобытияОтказВДоступеЖурналаРегистрации",... params): ОписаниеИспользованияСобытияОтказВДоступеЖурналаРегистрации;
declare function v8New(name:"ContactDataItemInstantMessaging",... params): ContactDataItemInstantMessaging;
declare function v8New(name:"ЭлементДанныхКонтактаМгновенныеСообщения",... params): ЭлементДанныхКонтактаМгновенныеСообщения;
declare function v8New(name:"PlannerBackgroundIntervalCollection",... params): PlannerBackgroundIntervalCollection;
declare function v8New(name:"КоллекцияИнтерваловФонаПланировщика",... params): КоллекцияИнтерваловФонаПланировщика;
declare function v8New(name:"PlannerBackgroundInterval",... params): PlannerBackgroundInterval;
declare function v8New(name:"ИнтервалФонаПланировщика",... params): ИнтервалФонаПланировщика;
declare function v8New(name:"FixedMap",... params): FixedMap;
declare function v8New(name:"ФиксированноеСоответствие",... params): ФиксированноеСоответствие;
declare function v8New(name:"FTPConnection",... params): FTPConnection;
declare function v8New(name:"FTPСоединение",... params): FTPСоединение;
declare function v8New(name:"InternetProxy",... params): InternetProxy;
declare function v8New(name:"ИнтернетПрокси",... params): ИнтернетПрокси;
declare function v8New(name:"OpenSSLSecureConnection",... params): OpenSSLSecureConnection;
declare function v8New(name:"ЗащищенноеСоединениеOpenSSL",... params): ЗащищенноеСоединениеOpenSSL;
declare function v8New(name:"WindowsCertificationAuthorityCertificates",... params): WindowsCertificationAuthorityCertificates;
declare function v8New(name:"СертификатыУдостоверяющихЦентровWindows",... params): СертификатыУдостоверяющихЦентровWindows;
declare function v8New(name:"FileCertificationAuthorityCertificates",... params): FileCertificationAuthorityCertificates;
declare function v8New(name:"СертификатыУдостоверяющихЦентровФайл",... params): СертификатыУдостоверяющихЦентровФайл;
declare function v8New(name:"WindowsClientCertificate",... params): WindowsClientCertificate;
declare function v8New(name:"СертификатКлиентаWindows",... params): СертификатКлиентаWindows;
declare function v8New(name:"FileClientCertificate",... params): FileClientCertificate;
declare function v8New(name:"СертификатКлиентаФайл",... params): СертификатКлиентаФайл;
declare function v8New(name:"EnumAutoSeriesSeparation",... params): EnumAutoSeriesSeparation;
declare function v8New(name:"ПеречислениеАвтоРаздвижениеСерий",... params): ПеречислениеАвтоРаздвижениеСерий;
declare function v8New(name:"DOMCanonicalization",... params): DOMCanonicalization;
declare function v8New(name:"КаноническийDOM",... params): КаноническийDOM;
declare function v8New(name:"EnumMessageStatus",... params): EnumMessageStatus;
declare function v8New(name:"ПеречислениеСтатусСообщения",... params): ПеречислениеСтатусСообщения;
declare function v8New(name:"EnumDataCompositionGroupPlacement",... params): EnumDataCompositionGroupPlacement;
declare function v8New(name:"ПеречислениеРасположениеГруппировкиКомпоновкиДанных",... params): ПеречислениеРасположениеГруппировкиКомпоновкиДанных;
declare function v8New(name:"EnumAddInType",... params): EnumAddInType;
declare function v8New(name:"ПеречислениеТипВнешнейКомпоненты",... params): ПеречислениеТипВнешнейКомпоненты;
declare function v8New(name:"EnumFileOpenMode",... params): EnumFileOpenMode;
declare function v8New(name:"ПеречислениеРежимОткрытияФайла",... params): ПеречислениеРежимОткрытияФайла;
declare function v8New(name:"DataCompositionTemplateComposer",... params): DataCompositionTemplateComposer;
declare function v8New(name:"КомпоновщикМакетаКомпоновкиДанных",... params): КомпоновщикМакетаКомпоновкиДанных;
declare function v8New(name:"PrintSettings",... params): PrintSettings;
declare function v8New(name:"НастройкиПечати",... params): НастройкиПечати;
declare function v8New(name:"DataCompositionExpression",... params): DataCompositionExpression;
declare function v8New(name:"ВыражениеКомпоновкиДанных",... params): ВыражениеКомпоновкиДанных;
declare function v8New(name:"XMLReader",... params): XMLReader;
declare function v8New(name:"ЧтениеXML",... params): ЧтениеXML;
declare function v8New(name:"XMLNamespaceContext",... params): XMLNamespaceContext;
declare function v8New(name:"КонтекстПространствИменXML",... params): КонтекстПространствИменXML;
declare function v8New(name:"XMLReaderSettings",... params): XMLReaderSettings;
declare function v8New(name:"ПараметрыЧтенияXML",... params): ПараметрыЧтенияXML;
declare function v8New(name:"EnumGeographicalSchemaLineType",... params): EnumGeographicalSchemaLineType;
declare function v8New(name:"ПеречислениеТипЛинииГеографическойСхемы",... params): ПеречислениеТипЛинииГеографическойСхемы;
declare function v8New(name:"EnumGaugeChartValuesScaleLabelsLocation",... params): EnumGaugeChartValuesScaleLabelsLocation;
declare function v8New(name:"ПеречислениеПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы",... params): ПеречислениеПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы;
declare function v8New(name:"XBase",... params): XBase;
declare function v8New(name:"XBase",... params): XBase;
declare function v8New(name:"EnumTransactionsIsolationLevel",... params): EnumTransactionsIsolationLevel;
declare function v8New(name:"ПеречислениеУровеньИзоляцииТранзакций",... params): ПеречислениеУровеньИзоляцииТранзакций;
declare function v8New(name:"EnumChartPointsConnectionType",... params): EnumChartPointsConnectionType;
declare function v8New(name:"ПеречислениеТипСоединенияТочекДиаграммы",... params): ПеречислениеТипСоединенияТочекДиаграммы;
declare function v8New(name:"EnumDataAnalysisColumnTypeSequentialPatterns",... params): EnumDataAnalysisColumnTypeSequentialPatterns;
declare function v8New(name:"ПеречислениеТипКолонкиАнализаДанныхПоискПоследовательностей",... params): ПеречислениеТипКолонкиАнализаДанныхПоискПоследовательностей;
declare function v8New(name:"InternetMailProfile",... params): InternetMailProfile;
declare function v8New(name:"ИнтернетПочтовыйПрофиль",... params): ИнтернетПочтовыйПрофиль;
declare function v8New(name:"ListBox",... params): ListBox;
declare function v8New(name:"ПолеСписка",... params): ПолеСписка;
declare function v8New(name:"EnumGeographicalSchemaProjection",... params): EnumGeographicalSchemaProjection;
declare function v8New(name:"ПеречислениеТипПроекцииГеографическойСхемы",... params): ПеречислениеТипПроекцииГеографическойСхемы;
declare function v8New(name:"EnumJSONDateFormat",... params): EnumJSONDateFormat;
declare function v8New(name:"ПеречислениеФорматДатыJSON",... params): ПеречислениеФорматДатыJSON;
declare function v8New(name:"UserWorkFavorites",... params): UserWorkFavorites;
declare function v8New(name:"ИзбранноеРаботыПользователя",... params): ИзбранноеРаботыПользователя;
declare function v8New(name:"UserWorkFavoritesItem",... params): UserWorkFavoritesItem;
declare function v8New(name:"ЭлементИзбранногоРаботыПользователя",... params): ЭлементИзбранногоРаботыПользователя;
declare function v8New(name:"EnumInternetConnectionType",... params): EnumInternetConnectionType;
declare function v8New(name:"ПеречислениеТипИнтернетСоединения",... params): ПеречислениеТипИнтернетСоединения;
declare function v8New(name:"GeographicCoordinates",... params): GeographicCoordinates;
declare function v8New(name:"ГеографическиеКоординаты",... params): ГеографическиеКоординаты;
declare function v8New(name:"EnumPositionInStream",... params): EnumPositionInStream;
declare function v8New(name:"ПеречислениеПозицияВПотоке",... params): ПеречислениеПозицияВПотоке;
declare function v8New(name:"DataCompositionAppearanceTemplateWizard",... params): DataCompositionAppearanceTemplateWizard;
declare function v8New(name:"КонструкторМакетаОформленияКомпоновкиДанных",... params): КонструкторМакетаОформленияКомпоновкиДанных;
declare function v8New(name:"EnumAdBannerRepresentation",... params): EnumAdBannerRepresentation;
declare function v8New(name:"ПеречислениеОтображениеРекламногоБаннера",... params): ПеречислениеОтображениеРекламногоБаннера;
declare function v8New(name:"PlannerCurrentRepresentationPeriodCollection",... params): PlannerCurrentRepresentationPeriodCollection;
declare function v8New(name:"КоллекцияТекущихПериодовОтображенияПланировщика",... params): КоллекцияТекущихПериодовОтображенияПланировщика;
declare function v8New(name:"PlannerRepresentationPeriod",... params): PlannerRepresentationPeriod;
declare function v8New(name:"ПериодОтображенияПланировщика",... params): ПериодОтображенияПланировщика;
declare function v8New(name:"XSWhitespaceFacet",... params): XSWhitespaceFacet;
declare function v8New(name:"ФасетПробельныхСимволовXS",... params): ФасетПробельныхСимволовXS;
declare function v8New(name:"MemoryStream",... params): MemoryStream;
declare function v8New(name:"ПотокВПамяти",... params): ПотокВПамяти;
declare function v8New(name:"EnumShowInChartLegend",... params): EnumShowInChartLegend;
declare function v8New(name:"ПеречислениеОтображениеВЛегендеДиаграммы",... params): ПеречислениеОтображениеВЛегендеДиаграммы;
declare function v8New(name:"OrderSetting",... params): OrderSetting;
declare function v8New(name:"НастройкаПорядка",... params): НастройкаПорядка;
declare function v8New(name:"MailAddresses",... params): MailAddresses;
declare function v8New(name:"ПочтовыеАдреса",... params): ПочтовыеАдреса;
declare function v8New(name:"MailAddress",... params): MailAddress;
declare function v8New(name:"ПочтовыйАдрес",... params): ПочтовыйАдрес;
declare function v8New(name:"Panel",... params): Panel;
declare function v8New(name:"Панель",... params): Панель;
declare function v8New(name:"EnumContactDataRelationshipType",... params): EnumContactDataRelationshipType;
declare function v8New(name:"ПеречислениеТипОтношенийДанныхКонтакта",... params): ПеречислениеТипОтношенийДанныхКонтакта;
declare function v8New(name:"EnumConnectorTextLocation",... params): EnumConnectorTextLocation;
declare function v8New(name:"ПеречислениеПоложениеТекстаСоединительнойЛинии",... params): ПеречислениеПоложениеТекстаСоединительнойЛинии;
declare function v8New(name:"PictureBox",... params): PictureBox;
declare function v8New(name:"ПолеКартинки",... params): ПолеКартинки;
declare function v8New(name:"EnumJSONValueType",... params): EnumJSONValueType;
declare function v8New(name:"ПеречислениеТипЗначенияJSON",... params): ПеречислениеТипЗначенияJSON;
declare function v8New(name:"NotifyDescription",... params): NotifyDescription;
declare function v8New(name:"ОписаниеОповещения",... params): ОписаниеОповещения;
declare function v8New(name:"GraphicalSchema",... params): GraphicalSchema;
declare function v8New(name:"ГрафическаяСхема",... params): ГрафическаяСхема;
declare function v8New(name:"XMLWriterSettings",... params): XMLWriterSettings;
declare function v8New(name:"ПараметрыЗаписиXML",... params): ПараметрыЗаписиXML;
declare function v8New(name:"EnumChartTrendlineFactor",... params): EnumChartTrendlineFactor;
declare function v8New(name:"ПеречислениеФакторЛинииТрендаДиаграммы",... params): ПеречислениеФакторЛинииТрендаДиаграммы;
declare function v8New(name:"EnumVideoQuality ",... params): EnumVideoQuality ;
declare function v8New(name:"ПеречислениеКачествоВидеозаписи",... params): ПеречислениеКачествоВидеозаписи;
declare function v8New(name:"EnumGeographicalSchemaShowMode",... params): EnumGeographicalSchemaShowMode;
declare function v8New(name:"ПеречислениеРежимОтображенияГеографическойСхемы",... params): ПеречислениеРежимОтображенияГеографическойСхемы;
declare function v8New(name:"XSRedefine",... params): XSRedefine;
declare function v8New(name:"ПереопределениеXS",... params): ПереопределениеXS;
declare function v8New(name:"EnumRadarChartScaleType",... params): EnumRadarChartScaleType;
declare function v8New(name:"ПеречислениеТипШкалыРадарнойДиаграммы",... params): ПеречислениеТипШкалыРадарнойДиаграммы;
declare function v8New(name:"CalendarData",... params): CalendarData;
declare function v8New(name:"ДанныеКалендаря",... params): ДанныеКалендаря;
declare function v8New(name:"EnumFormattedDocumentFileType",... params): EnumFormattedDocumentFileType;
declare function v8New(name:"ПеречислениеТипФайлаФорматированногоДокумента",... params): ПеречислениеТипФайлаФорматированногоДокумента;
declare function v8New(name:"StandardPeriod",... params): StandardPeriod;
declare function v8New(name:"СтандартныйПериод",... params): СтандартныйПериод;
declare function v8New(name:"DOMNodeReader",... params): DOMNodeReader;
declare function v8New(name:"ЧтениеУзловDOM",... params): ЧтениеУзловDOM;
declare function v8New(name:"DeviceCameraResolution",... params): DeviceCameraResolution;
declare function v8New(name:"РазрешениеКамерыУстройства",... params): РазрешениеКамерыУстройства;
declare function v8New(name:"EnumJSONCharactersEscapeMode",... params): EnumJSONCharactersEscapeMode;
declare function v8New(name:"ПеречислениеЭкранированиеСимволовJSON",... params): ПеречислениеЭкранированиеСимволовJSON;
declare function v8New(name:"EnumChartBubbleSizeValueSource",... params): EnumChartBubbleSizeValueSource;
declare function v8New(name:"ПеречислениеИсточникЗначенияРазмераПузырькаДиаграммы",... params): ПеречислениеИсточникЗначенияРазмераПузырькаДиаграммы;
declare function v8New(name:"EnumSpreadsheetDocumentFileType",... params): EnumSpreadsheetDocumentFileType;
declare function v8New(name:"ПеречислениеТипФайлаТабличногоДокумента",... params): ПеречислениеТипФайлаТабличногоДокумента;
declare function v8New(name:"ExternalDataSourceConnectionParameters",... params): ExternalDataSourceConnectionParameters;
declare function v8New(name:"ПараметрыСоединенияВнешнегоИсточникаДанных",... params): ПараметрыСоединенияВнешнегоИсточникаДанных;
declare function v8New(name:"EnumAccountType",... params): EnumAccountType;
declare function v8New(name:"ПеречислениеВидСчета",... params): ПеречислениеВидСчета;
declare function v8New(name:"EnumJSONLineBreak",... params): EnumJSONLineBreak;
declare function v8New(name:"ПеречислениеПереносСтрокJSON",... params): ПеречислениеПереносСтрокJSON;
declare function v8New(name:"EnumMobileDeviceLibraryDirType",... params): EnumMobileDeviceLibraryDirType;
declare function v8New(name:"ПеречислениеТипКаталогаБиблиотекиМобильногоУстройства",... params): ПеречислениеТипКаталогаБиблиотекиМобильногоУстройства;
declare function v8New(name:"EnumPrintAccuracy",... params): EnumPrintAccuracy;
declare function v8New(name:"ПеречислениеТочностьПечати",... params): ПеречислениеТочностьПечати;
declare function v8New(name:"CollaborationSystemConversationsFilter",... params): CollaborationSystemConversationsFilter;
declare function v8New(name:"ОтборОбсужденийСистемыВзаимодействия",... params): ОтборОбсужденийСистемыВзаимодействия;
declare function v8New(name:"CollaborationSystemConversationContext",... params): CollaborationSystemConversationContext;
declare function v8New(name:"КонтекстОбсужденияСистемыВзаимодействия",... params): КонтекстОбсужденияСистемыВзаимодействия;
declare function v8New(name:"AddInSettings",... params): AddInSettings;
declare function v8New(name:"НастройкиВнешнейКомпоненты",... params): НастройкиВнешнейКомпоненты;
declare function v8New(name:"Mail",... params): Mail;
declare function v8New(name:"Почта",... params): Почта;
declare function v8New(name:"DOMBuilder",... params): DOMBuilder;
declare function v8New(name:"ПостроительDOM",... params): ПостроительDOM;
declare function v8New(name:"DOMBuilderConfiguration",... params): DOMBuilderConfiguration;
declare function v8New(name:"КонфигурацияПостроителяDOM",... params): КонфигурацияПостроителяDOM;
declare function v8New(name:"HTMLDocument",... params): HTMLDocument;
declare function v8New(name:"ДокументHTML",... params): ДокументHTML;
declare function v8New(name:"EnumStockChartUsedPointValue",... params): EnumStockChartUsedPointValue;
declare function v8New(name:"ПеречислениеИспользуемоеЗначениеТочкиБиржевойДиаграммы",... params): ПеречислениеИспользуемоеЗначениеТочкиБиржевойДиаграммы;
declare function v8New(name:"EnumChartAnimation",... params): EnumChartAnimation;
declare function v8New(name:"ПеречислениеАнимацияДиаграммы",... params): ПеречислениеАнимацияДиаграммы;
declare function v8New(name:"XSPatternFacet",... params): XSPatternFacet;
declare function v8New(name:"ФасетОбразцаXS",... params): ФасетОбразцаXS;
declare function v8New(name:"DataAnalysisField",... params): DataAnalysisField;
declare function v8New(name:"ПолеАнализаДанных",... params): ПолеАнализаДанных;
declare function v8New(name:"EnumSpreadsheetDocumentSelectionShowModeType",... params): EnumSpreadsheetDocumentSelectionShowModeType;
declare function v8New(name:"ПеречислениеТипОтображенияВыделенияТабличногоДокумента",... params): ПеречислениеТипОтображенияВыделенияТабличногоДокумента;
declare function v8New(name:"DOMWriterConfiguration",... params): DOMWriterConfiguration;
declare function v8New(name:"КонфигурацияЗаписиDOM",... params): КонфигурацияЗаписиDOM;
declare function v8New(name:"FixedStructure",... params): FixedStructure;
declare function v8New(name:"ФиксированнаяСтруктура",... params): ФиксированнаяСтруктура;
declare function v8New(name:"EnumDataCompositionGroupUseVariant",... params): EnumDataCompositionGroupUseVariant;
declare function v8New(name:"ПеречислениеВариантИспользованияГруппировкиКомпоновкиДанных",... params): ПеречислениеВариантИспользованияГруппировкиКомпоновкиДанных;
declare function v8New(name:"EnumGeographicalSchemaLayerSeriesImportModeType",... params): EnumGeographicalSchemaLayerSeriesImportModeType;
declare function v8New(name:"ПеречислениеТипИмпортаСерийСлояГеографическойСхемы",... params): ПеречислениеТипИмпортаСерийСлояГеографическойСхемы;
declare function v8New(name:"EnumSpreadsheetDocumentShiftType",... params): EnumSpreadsheetDocumentShiftType;
declare function v8New(name:"ПеречислениеТипСмещенияТабличногоДокумента",... params): ПеречислениеТипСмещенияТабличногоДокумента;
declare function v8New(name:"EnumJSONDateWritingVariant",... params): EnumJSONDateWritingVariant;
declare function v8New(name:"ПеречислениеВариантЗаписиДатыJSON",... params): ПеречислениеВариантЗаписиДатыJSON;
declare function v8New(name:"XMLWriter",... params): XMLWriter;
declare function v8New(name:"ЗаписьXML",... params): ЗаписьXML;
declare function v8New(name:"EnumDataCompositionTextOutputType",... params): EnumDataCompositionTextOutputType;
declare function v8New(name:"ПеречислениеТипВыводаТекстаКомпоновкиДанных",... params): ПеречислениеТипВыводаТекстаКомпоновкиДанных;
declare function v8New(name:"InternetMail",... params): InternetMail;
declare function v8New(name:"ИнтернетПочта",... params): ИнтернетПочта;
declare function v8New(name:"EnumQuerySchemaTotalCalculationFieldType",... params): EnumQuerySchemaTotalCalculationFieldType;
declare function v8New(name:"ПеречислениеТипКонтрольнойТочкиСхемыЗапроса",... params): ПеречислениеТипКонтрольнойТочкиСхемыЗапроса;
declare function v8New(name:"EnumChartColorPalette",... params): EnumChartColorPalette;
declare function v8New(name:"ПеречислениеПалитраЦветовДиаграммы",... params): ПеречислениеПалитраЦветовДиаграммы;
declare function v8New(name:"EnumParagraphType",... params): EnumParagraphType;
declare function v8New(name:"ПеречислениеТипПараграфа",... params): ПеречислениеТипПараграфа;
declare function v8New(name:"EnumDendrogramScaleKeeping",... params): EnumDendrogramScaleKeeping;
declare function v8New(name:"ПеречислениеПоддержкаМасштабаДендрограммы",... params): ПеречислениеПоддержкаМасштабаДендрограммы;
declare function v8New(name:"EnumChartTrendlineApproximationType",... params): EnumChartTrendlineApproximationType;
declare function v8New(name:"ПеречислениеТипАппроксимацииЛинииТрендаДиаграммы",... params): ПеречислениеТипАппроксимацииЛинииТрендаДиаграммы;
declare function v8New(name:"EnumDataCompositionDetailsProcessingAction",... params): EnumDataCompositionDetailsProcessingAction;
declare function v8New(name:"ПеречислениеДействиеОбработкиРасшифровкиКомпоновкиДанных",... params): ПеречислениеДействиеОбработкиРасшифровкиКомпоновкиДанных;
declare function v8New(name:"DOMWriter",... params): DOMWriter;
declare function v8New(name:"ЗаписьDOM",... params): ЗаписьDOM;
declare function v8New(name:"EnumQuerySchemaPeriodAdditionType",... params): EnumQuerySchemaPeriodAdditionType;
declare function v8New(name:"ПеречислениеТипДополненияПериодамиСхемыЗапроса",... params): ПеречислениеТипДополненияПериодамиСхемыЗапроса;
declare function v8New(name:"FastInfosetReader",... params): FastInfosetReader;
declare function v8New(name:"ЧтениеFastInfoset",... params): ЧтениеFastInfoset;
declare function v8New(name:"EnumPaintingReferencePointPosition",... params): EnumPaintingReferencePointPosition;
declare function v8New(name:"ПеречислениеПоложениеОпорнойТочкиОтрисовки",... params): ПеречислениеПоложениеОпорнойТочкиОтрисовки;
declare function v8New(name:"StandardPeriodEditDialog",... params): StandardPeriodEditDialog;
declare function v8New(name:"ДиалогРедактированияСтандартногоПериода",... params): ДиалогРедактированияСтандартногоПериода;
declare function v8New(name:"EnumAutoShowOpenButtonMode",... params): EnumAutoShowOpenButtonMode;
declare function v8New(name:"ПеречислениеРежимАвтоОтображенияКнопкиОткрытия",... params): ПеречислениеРежимАвтоОтображенияКнопкиОткрытия;
declare function v8New(name:"EnumSpreadsheetDocumentAreaFillType",... params): EnumSpreadsheetDocumentAreaFillType;
declare function v8New(name:"ПеречислениеТипЗаполненияОбластиТабличногоДокумента",... params): ПеречислениеТипЗаполненияОбластиТабличногоДокумента;
declare function v8New(name:"EnumUpdateOnDataChange",... params): EnumUpdateOnDataChange;
declare function v8New(name:"ПеречислениеОбновлениеПриИзмененииДанных",... params): ПеречислениеОбновлениеПриИзмененииДанных;
declare function v8New(name:"InternetMailMessage",... params): InternetMailMessage;
declare function v8New(name:"ИнтернетПочтовоеСообщение",... params): ИнтернетПочтовоеСообщение;
declare function v8New(name:"EnumQueryRecordType",... params): EnumQueryRecordType;
declare function v8New(name:"ПеречислениеТипЗаписиЗапроса",... params): ПеречислениеТипЗаписиЗапроса;
declare function v8New(name:"DataAnalysis",... params): DataAnalysis;
declare function v8New(name:"АнализДанных",... params): АнализДанных;
declare function v8New(name:"PointInTimeWithPeriodAdjustment",... params): PointInTimeWithPeriodAdjustment;
declare function v8New(name:"МоментВремениСУточнениемПериода",... params): МоментВремениСУточнениемПериода;
declare function v8New(name:"DataCompositionAreaTemplateValueCollectionHeader",... params): DataCompositionAreaTemplateValueCollectionHeader;
declare function v8New(name:"МакетЗаголовкаКоллекцииЗначенийОбластиКомпоновкиДанных",... params): МакетЗаголовкаКоллекцииЗначенийОбластиКомпоновкиДанных;
declare function v8New(name:"DataCompositionAreaTemplateValueCollectionHeaderCell",... params): DataCompositionAreaTemplateValueCollectionHeaderCell;
declare function v8New(name:"ЯчейкаМакетаЗаголовкаКоллекцииЗначенийОбластиКомпоновкиДанных",... params): ЯчейкаМакетаЗаголовкаКоллекцииЗначенийОбластиКомпоновкиДанных;
declare function v8New(name:"JSONWriter",... params): JSONWriter;
declare function v8New(name:"ЗаписьJSON",... params): ЗаписьJSON;
declare function v8New(name:"DynamicalListGroupRow",... params): DynamicalListGroupRow;
declare function v8New(name:"СтрокаГруппировкиДинамическогоСписка",... params): СтрокаГруппировкиДинамическогоСписка;
declare function v8New(name:"DataCompositionAreaTemplateValueCollectionCell",... params): DataCompositionAreaTemplateValueCollectionCell;
declare function v8New(name:"ЯчейкаМакетаКоллекцииЗначенийОбластиКомпоновкиДанных",... params): ЯчейкаМакетаКоллекцииЗначенийОбластиКомпоновкиДанных;
declare function v8New(name:"EnumFileAccess",... params): EnumFileAccess;
declare function v8New(name:"ПеречислениеДоступКФайлу",... params): ПеречислениеДоступКФайлу;
declare function v8New(name:"EnumRequiredMobileApplicationPermissions",... params): EnumRequiredMobileApplicationPermissions;
declare function v8New(name:"ПеречислениеТребуемыеРазрешенияМобильногоПриложения",... params): ПеречислениеТребуемыеРазрешенияМобильногоПриложения;
declare function v8New(name:"TextWriter",... params): TextWriter;
declare function v8New(name:"ЗаписьТекста",... params): ЗаписьТекста;
declare function v8New(name:"EnumOnScreenKeyboardReturnKeyText",... params): EnumOnScreenKeyboardReturnKeyText;
declare function v8New(name:"ПеречислениеТекстКнопкиВводаЭкраннойКлавиатуры",... params): ПеречислениеТекстКнопкиВводаЭкраннойКлавиатуры;
declare function v8New(name:"EnumDataAnalysisColumnTypeSummaryStatistics",... params): EnumDataAnalysisColumnTypeSummaryStatistics;
declare function v8New(name:"ПеречислениеТипКолонкиАнализаДанныхОбщаяСтатистика",... params): ПеречислениеТипКолонкиАнализаДанныхОбщаяСтатистика;
declare function v8New(name:"EnumSpreadsheetDocumentValuesReadingMode",... params): EnumSpreadsheetDocumentValuesReadingMode;
declare function v8New(name:"ПеречислениеСпособЧтенияЗначенийТабличногоДокумента",... params): ПеречислениеСпособЧтенияЗначенийТабличногоДокумента;
declare function v8New(name:"EnumClientApplicationInterfaceVariant",... params): EnumClientApplicationInterfaceVariant;
declare function v8New(name:"ПеречислениеВариантИнтерфейсаКлиентскогоПриложения",... params): ПеречислениеВариантИнтерфейсаКлиентскогоПриложения;
declare function v8New(name:"EnumPivotChartScaleKeeping",... params): EnumPivotChartScaleKeeping;
declare function v8New(name:"ПеречислениеПоддержкаМасштабаСводнойДиаграммы",... params): ПеречислениеПоддержкаМасштабаСводнойДиаграммы;
declare function v8New(name:"HTTPRequest",... params): HTTPRequest;
declare function v8New(name:"HTTPЗапрос",... params): HTTPЗапрос;
declare function v8New(name:"PeriodSettings",... params): PeriodSettings;
declare function v8New(name:"НастройкаПериода",... params): НастройкаПериода;
declare function v8New(name:"MailMessage",... params): MailMessage;
declare function v8New(name:"ПочтовоеСообщение",... params): ПочтовоеСообщение;
declare function v8New(name:"MailAttachments",... params): MailAttachments;
declare function v8New(name:"ПочтовыеВложения",... params): ПочтовыеВложения;
declare function v8New(name:"MailAttachment",... params): MailAttachment;
declare function v8New(name:"ПочтовоеВложение",... params): ПочтовоеВложение;
declare function v8New(name:"XSMinLengthFacet",... params): XSMinLengthFacet;
declare function v8New(name:"ФасетМинимальнойДлиныXS",... params): ФасетМинимальнойДлиныXS;
declare function v8New(name:"EnumCalendarEventRecurrence",... params): EnumCalendarEventRecurrence;
declare function v8New(name:"ПеречислениеПовторениеСобытияКалендаря",... params): ПеречислениеПовторениеСобытияКалендаря;
declare function v8New(name:"EnumPivotTableColumnTotalPosition",... params): EnumPivotTableColumnTotalPosition;
declare function v8New(name:"ПеречислениеПоложениеИтоговКолонокСводнойТаблицы",... params): ПеречислениеПоложениеИтоговКолонокСводнойТаблицы;
declare function v8New(name:"EnumArrowStyle",... params): EnumArrowStyle;
declare function v8New(name:"ПеречислениеСтильСтрелки",... params): ПеречислениеСтильСтрелки;
declare function v8New(name:"DataCompositionUserSettings",... params): DataCompositionUserSettings;
declare function v8New(name:"ПользовательскиеНастройкиКомпоновкиДанных",... params): ПользовательскиеНастройкиКомпоновкиДанных;
declare function v8New(name:"EnumOnUnavailabilityDataCompositionSettingsAction",... params): EnumOnUnavailabilityDataCompositionSettingsAction;
declare function v8New(name:"ПеречислениеДействиеПриНедоступностиНастроекКомпоновкиДанных",... params): ПеречислениеДействиеПриНедоступностиНастроекКомпоновкиДанных;
declare function v8New(name:"CollaborationSystemMessagesFilter",... params): CollaborationSystemMessagesFilter;
declare function v8New(name:"ОтборСообщенийСистемыВзаимодействия",... params): ОтборСообщенийСистемыВзаимодействия;
declare function v8New(name:"CallLogRecord",... params): CallLogRecord;
declare function v8New(name:"ЗаписьЖурналаЗвонков",... params): ЗаписьЖурналаЗвонков;
declare function v8New(name:"ChoiceParameter",... params): ChoiceParameter;
declare function v8New(name:"ПараметрВыбора",... params): ПараметрВыбора;
declare function v8New(name:"EnumQueryBuilderDimensionType",... params): EnumQueryBuilderDimensionType;
declare function v8New(name:"ПеречислениеТипИзмеренияПостроителяЗапроса",... params): ПеречислениеТипИзмеренияПостроителяЗапроса;
declare function v8New(name:"EnumAssociationRulesDataSourceType",... params): EnumAssociationRulesDataSourceType;
declare function v8New(name:"ПеречислениеТипИсточникаДанныхПоискаАссоциаций",... params): ПеречислениеТипИсточникаДанныхПоискаАссоциаций;
declare function v8New(name:"AccountContactData",... params): AccountContactData;
declare function v8New(name:"ДанныеКонтактаУчетнойЗаписи",... params): ДанныеКонтактаУчетнойЗаписи;
declare function v8New(name:"ContactData",... params): ContactData;
declare function v8New(name:"ДанныеКонтакта",... params): ДанныеКонтакта;
declare function v8New(name:"HTTPConnection",... params): HTTPConnection;
declare function v8New(name:"HTTPСоединение",... params): HTTPСоединение;
declare function v8New(name:"EnumCryptoCertificateStorePlacement",... params): EnumCryptoCertificateStorePlacement;
declare function v8New(name:"ПеречислениеРасположениеХранилищаСертификатовКриптографии",... params): ПеречислениеРасположениеХранилищаСертификатовКриптографии;
declare function v8New(name:"EnumGanttChartValueTextRepresentation",... params): EnumGanttChartValueTextRepresentation;
declare function v8New(name:"ПеречислениеОтображениеТекстаЗначенияДиаграммыГанта",... params): ПеречислениеОтображениеТекстаЗначенияДиаграммыГанта;
declare function v8New(name:"DataLock",... params): DataLock;
declare function v8New(name:"БлокировкаДанных",... params): БлокировкаДанных;
declare function v8New(name:"EnumDataAnalysisNumericValueUseType",... params): EnumDataAnalysisNumericValueUseType;
declare function v8New(name:"ПеречислениеТипИспользованияЧисловыхЗначенийАнализаДанных",... params): ПеречислениеТипИспользованияЧисловыхЗначенийАнализаДанных;
declare function v8New(name:"FormatStringWizard",... params): FormatStringWizard;
declare function v8New(name:"КонструкторФорматнойСтроки",... params): КонструкторФорматнойСтроки;
declare function v8New(name:"EnumUseMenuMode",... params): EnumUseMenuMode;
declare function v8New(name:"ПеречислениеИспользованиеРежимаМеню",... params): ПеречислениеИспользованиеРежимаМеню;
declare function v8New(name:"EnumDataCompositionAccountingBalanceType",... params): EnumDataCompositionAccountingBalanceType;
declare function v8New(name:"ПеречислениеТипБухгалтерскогоОстаткаКомпоновкиДанных",... params): ПеречислениеТипБухгалтерскогоОстаткаКомпоновкиДанных;
declare function v8New(name:"Boundary",... params): Boundary;
declare function v8New(name:"Граница",... params): Граница;
declare function v8New(name:"EnumConnectorLineType",... params): EnumConnectorLineType;
declare function v8New(name:"ПеречислениеТипСоединительнойЛинии",... params): ПеречислениеТипСоединительнойЛинии;
declare function v8New(name:"Geofence",... params): Geofence;
declare function v8New(name:"Геозона",... params): Геозона;
declare function v8New(name:"EnumDataCompositionResultNestedItemsLayout",... params): EnumDataCompositionResultNestedItemsLayout;
declare function v8New(name:"ПеречислениеРасположениеВложенныхЭлементовРезультатаКомпоновкиДанных",... params): ПеречислениеРасположениеВложенныхЭлементовРезультатаКомпоновкиДанных;
declare function v8New(name:"EnumFoldersAndItemsUse",... params): EnumFoldersAndItemsUse;
declare function v8New(name:"ПеречислениеИспользованиеГруппИЭлементов",... params): ПеречислениеИспользованиеГруппИЭлементов;
declare function v8New(name:"EnumCommandBarButtonRepresentation",... params): EnumCommandBarButtonRepresentation;
declare function v8New(name:"ПеречислениеОтображениеКнопкиКоманднойПанели",... params): ПеречислениеОтображениеКнопкиКоманднойПанели;
declare function v8New(name:"EnumAutoTimeMode",... params): EnumAutoTimeMode;
declare function v8New(name:"ПеречислениеРежимАвтоВремя",... params): ПеречислениеРежимАвтоВремя;
declare function v8New(name:"EnumDataAnalysisDistanceMetricType",... params): EnumDataAnalysisDistanceMetricType;
declare function v8New(name:"ПеречислениеТипМерыРасстоянияАнализаДанных",... params): ПеречислениеТипМерыРасстоянияАнализаДанных;
declare function v8New(name:"EnumTableBoxRowSelectionMode",... params): EnumTableBoxRowSelectionMode;
declare function v8New(name:"ПеречислениеРежимВыделенияСтрокиТабличногоПоля",... params): ПеречислениеРежимВыделенияСтрокиТабличногоПоля;
declare function v8New(name:"EnumSpreadsheetDocumentGroupHeaderPlacement",... params): EnumSpreadsheetDocumentGroupHeaderPlacement;
declare function v8New(name:"ПеречислениеРасположениеЗаголовкаГруппировкиТабличногоДокумента",... params): ПеречислениеРасположениеЗаголовкаГруппировкиТабличногоДокумента;
declare function v8New(name:"MobileDeviceApplicationRunAdditionalDataItem",... params): MobileDeviceApplicationRunAdditionalDataItem;
declare function v8New(name:"ЭлементДополнительныхДанныхЗапускаПриложенияМобильногоУстройства",... params): ЭлементДополнительныхДанныхЗапускаПриложенияМобильногоУстройства;
declare function v8New(name:"EnumTableBoxSelectionMode",... params): EnumTableBoxSelectionMode;
declare function v8New(name:"ПеречислениеРежимВыделенияТабличногоПоля",... params): ПеречислениеРежимВыделенияТабличногоПоля;
declare function v8New(name:"EnumTableBoxRowInputMode",... params): EnumTableBoxRowInputMode;
declare function v8New(name:"ПеречислениеРежимВводаСтрокТабличногоПоля",... params): ПеречислениеРежимВводаСтрокТабличногоПоля;
declare function v8New(name:"EnumShowTabs",... params): EnumShowTabs;
declare function v8New(name:"ПеречислениеОтображениеЗакладок",... params): ПеречислениеОтображениеЗакладок;
declare function v8New(name:"EnumGanttChartVerticalStretch",... params): EnumGanttChartVerticalStretch;
declare function v8New(name:"ПеречислениеРастягиваниеПоВертикалиДиаграммыГанта",... params): ПеречислениеРастягиваниеПоВертикалиДиаграммыГанта;
declare function v8New(name:"AggregatesInformation",... params): AggregatesInformation;
declare function v8New(name:"ИнформацияОбАгрегатах",... params): ИнформацияОбАгрегатах;
declare function v8New(name:"EnumDataCompositionSettingsViewMode",... params): EnumDataCompositionSettingsViewMode;
declare function v8New(name:"ПеречислениеРежимОтображенияНастроекКомпоновкиДанных",... params): ПеречислениеРежимОтображенияНастроекКомпоновкиДанных;
declare function v8New(name:"DataCompositionAreaTemplateValueCollection",... params): DataCompositionAreaTemplateValueCollection;
declare function v8New(name:"МакетКоллекцииЗначенийОбластиКомпоновкиДанных",... params): МакетКоллекцииЗначенийОбластиКомпоновкиДанных;
declare function v8New(name:"EnumDataLockControlMode",... params): EnumDataLockControlMode;
declare function v8New(name:"ПеречислениеРежимУправленияБлокировкойДанных",... params): ПеречислениеРежимУправленияБлокировкойДанных;
declare function v8New(name:"FormattedDocument",... params): FormattedDocument;
declare function v8New(name:"ФорматированныйДокумент",... params): ФорматированныйДокумент;
declare function v8New(name:"HTMLWriter",... params): HTMLWriter;
declare function v8New(name:"ЗаписьHTML",... params): ЗаписьHTML;
declare function v8New(name:"ClientApplicationInterfaceSettings",... params): ClientApplicationInterfaceSettings;
declare function v8New(name:"НастройкиИнтерфейсаКлиентскогоПриложения",... params): НастройкиИнтерфейсаКлиентскогоПриложения;
declare function v8New(name:"ClientApplicationInterfaceContentSettings",... params): ClientApplicationInterfaceContentSettings;
declare function v8New(name:"НастройкиСоставаИнтерфейсаКлиентскогоПриложения",... params): НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
declare function v8New(name:"ClientApplicationInterfaceContentSettingsGroup",... params): ClientApplicationInterfaceContentSettingsGroup;
declare function v8New(name:"ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения",... params): ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
declare function v8New(name:"ClientApplicationInterfaceContentSettingsItem",... params): ClientApplicationInterfaceContentSettingsItem;
declare function v8New(name:"ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения",... params): ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
declare function v8New(name:"EnumDocumentPostingMode",... params): EnumDocumentPostingMode;
declare function v8New(name:"ПеречислениеРежимПроведенияДокумента",... params): ПеречислениеРежимПроведенияДокумента;
declare function v8New(name:"EnumTelephonyToolsCallEventVariant",... params): EnumTelephonyToolsCallEventVariant;
declare function v8New(name:"ПеречислениеВариантСобытияЗвонкаСредствТелефонии",... params): ПеречислениеВариантСобытияЗвонкаСредствТелефонии;
declare function v8New(name:"EnumQuerySchemaJoinType",... params): EnumQuerySchemaJoinType;
declare function v8New(name:"ПеречислениеТипСоединенияСхемыЗапроса",... params): ПеречислениеТипСоединенияСхемыЗапроса;
declare function v8New(name:"EnumRefreshRequestMethod",... params): EnumRefreshRequestMethod;
declare function v8New(name:"ПеречислениеСпособЗапросаОбновления",... params): ПеречислениеСпособЗапросаОбновления;
declare function v8New(name:"ClientSettings",... params): ClientSettings;
declare function v8New(name:"НастройкиКлиентскогоПриложения",... params): НастройкиКлиентскогоПриложения;
declare function v8New(name:"EnumDataCompositionResultBeginItemType",... params): EnumDataCompositionResultBeginItemType;
declare function v8New(name:"ПеречислениеТипНачалаЭлементаРезультатаКомпоновкиДанных",... params): ПеречислениеТипНачалаЭлементаРезультатаКомпоновкиДанных;
declare function v8New(name:"QueryWizard",... params): QueryWizard;
declare function v8New(name:"КонструкторЗапроса",... params): КонструкторЗапроса;
declare function v8New(name:"CryptoCertificate",... params): CryptoCertificate;
declare function v8New(name:"СертификатКриптографии",... params): СертификатКриптографии;
declare function v8New(name:"EnumChartSemitransparencyMode",... params): EnumChartSemitransparencyMode;
declare function v8New(name:"ПеречислениеРежимПолупрозрачностиДиаграммы",... params): ПеречислениеРежимПолупрозрачностиДиаграммы;
declare function v8New(name:"EnumDataCompositionResourcesPlacementInChart",... params): EnumDataCompositionResourcesPlacementInChart;
declare function v8New(name:"ПеречислениеРасположениеРесурсовВДиаграммеКомпоновкиДанных",... params): ПеречислениеРасположениеРесурсовВДиаграммеКомпоновкиДанных;
declare function v8New(name:"EnumBoundaryType",... params): EnumBoundaryType;
declare function v8New(name:"ПеречислениеВидГраницы",... params): ПеречислениеВидГраницы;
declare function v8New(name:"ProgressBar",... params): ProgressBar;
declare function v8New(name:"Индикатор",... params): Индикатор;
declare function v8New(name:"InternetConnectionInformation",... params): InternetConnectionInformation;
declare function v8New(name:"ИнформацияОбИнтернетСоединении",... params): ИнформацияОбИнтернетСоединении;
declare function v8New(name:"EnumChartLabelLocation",... params): EnumChartLabelLocation;
declare function v8New(name:"ПеречислениеПоложениеПодписейКДиаграмме",... params): ПеречислениеПоложениеПодписейКДиаграмме;
declare function v8New(name:"PlannerReplacementItemCollection",... params): PlannerReplacementItemCollection;
declare function v8New(name:"КоллекцияЗамещающихЭлементовПланировщика",... params): КоллекцияЗамещающихЭлементовПланировщика;
declare function v8New(name:"PlannerItem",... params): PlannerItem;
declare function v8New(name:"ЭлементПланировщика",... params): ЭлементПланировщика;
declare function v8New(name:"PlannerItemSchedule",... params): PlannerItemSchedule;
declare function v8New(name:"РасписаниеЭлементаПланировщика",... params): РасписаниеЭлементаПланировщика;
declare function v8New(name:"Planner",... params): Planner;
declare function v8New(name:"Планировщик",... params): Планировщик;
declare function v8New(name:"PlannerItemCollection",... params): PlannerItemCollection;
declare function v8New(name:"КоллекцияЭлементовПланировщика",... params): КоллекцияЭлементовПланировщика;
declare function v8New(name:"PlannerDimensionCollection",... params): PlannerDimensionCollection;
declare function v8New(name:"КоллекцияИзмеренийПланировщика",... params): КоллекцияИзмеренийПланировщика;
declare function v8New(name:"PlannerDimension",... params): PlannerDimension;
declare function v8New(name:"ИзмерениеПланировщика",... params): ИзмерениеПланировщика;
declare function v8New(name:"PlannerDimensionItemCollection",... params): PlannerDimensionItemCollection;
declare function v8New(name:"КоллекцияЭлементовИзмеренияПланировщика",... params): КоллекцияЭлементовИзмеренияПланировщика;
declare function v8New(name:"PlannerDimensionItem",... params): PlannerDimensionItem;
declare function v8New(name:"ЭлементИзмеренияПланировщика",... params): ЭлементИзмеренияПланировщика;
declare function v8New(name:"EnumTimeScaleUnitType",... params): EnumTimeScaleUnitType;
declare function v8New(name:"ПеречислениеТипЕдиницыШкалыВремени",... params): ПеречислениеТипЕдиницыШкалыВремени;
declare function v8New(name:"EnumPlannerItemsTimeRepresentation",... params): EnumPlannerItemsTimeRepresentation;
declare function v8New(name:"ПеречислениеОтображениеВремениЭлементовПланировщика",... params): ПеречислениеОтображениеВремениЭлементовПланировщика;
declare function v8New(name:"MobileDeviceApplicationRunAdditionalData",... params): MobileDeviceApplicationRunAdditionalData;
declare function v8New(name:"ДополнительныеДанныеЗапускаПриложенияМобильногоУстройства",... params): ДополнительныеДанныеЗапускаПриложенияМобильногоУстройства;
declare function v8New(name:"XSXPathDefinition",... params): XSXPathDefinition;
declare function v8New(name:"ОпределенияXPathXS",... params): ОпределенияXPathXS;
declare function v8New(name:"XSMaxExclusiveFacet",... params): XSMaxExclusiveFacet;
declare function v8New(name:"ФасетМаксимальногоИсключающегоЗначенияXS",... params): ФасетМаксимальногоИсключающегоЗначенияXS;
declare function v8New(name:"InternetConnection",... params): InternetConnection;
declare function v8New(name:"ИнтернетСоединение",... params): ИнтернетСоединение;
declare function v8New(name:"EnumChartOrientation",... params): EnumChartOrientation;
declare function v8New(name:"ПеречислениеОриентацияДиаграммы",... params): ПеречислениеОриентацияДиаграммы;
declare function v8New(name:"EnumDocumentWriteMode",... params): EnumDocumentWriteMode;
declare function v8New(name:"ПеречислениеРежимЗаписиДокумента",... params): ПеречислениеРежимЗаписиДокумента;
declare function v8New(name:"EnumSpreadsheetDocumentCellLineType",... params): EnumSpreadsheetDocumentCellLineType;
declare function v8New(name:"ПеречислениеТипЛинииЯчейкиТабличногоДокумента",... params): ПеречислениеТипЛинииЯчейкиТабличногоДокумента;
declare function v8New(name:"EnumQuerySchemaAvailableTableParameterType",... params): EnumQuerySchemaAvailableTableParameterType;
declare function v8New(name:"ПеречислениеТипПараметраДоступнойТаблицыСхемыЗапроса",... params): ПеречислениеТипПараметраДоступнойТаблицыСхемыЗапроса;
declare function v8New(name:"EnumGeographicalSchemaLegendItemShowScaleType",... params): EnumGeographicalSchemaLegendItemShowScaleType;
declare function v8New(name:"ПеречислениеТипОтображенияШкалыЭлементаЛегендыГеографическойСхемы",... params): ПеречислениеТипОтображенияШкалыЭлементаЛегендыГеографическойСхемы;
declare function v8New(name:"EnumStandardAppearance",... params): EnumStandardAppearance;
declare function v8New(name:"ПеречислениеСтандартноеОформление",... params): ПеречислениеСтандартноеОформление;
declare function v8New(name:"EnumDataCompositionSettingsItemViewMode",... params): EnumDataCompositionSettingsItemViewMode;
declare function v8New(name:"ПеречислениеРежимОтображенияЭлементаНастройкиКомпоновкиДанных",... params): ПеречислениеРежимОтображенияЭлементаНастройкиКомпоновкиДанных;
declare function v8New(name:"RandomNumberGenerator",... params): RandomNumberGenerator;
declare function v8New(name:"ГенераторСлучайныхЧисел",... params): ГенераторСлучайныхЧисел;
declare function v8New(name:"EnumColumnLocation",... params): EnumColumnLocation;
declare function v8New(name:"ПеречислениеПоложениеКолонки",... params): ПеречислениеПоложениеКолонки;
declare function v8New(name:"ObjectDeletion",... params): ObjectDeletion;
declare function v8New(name:"УдалениеОбъекта",... params): УдалениеОбъекта;
declare function v8New(name:"MobileDeviceApplicationRun",... params): MobileDeviceApplicationRun;
declare function v8New(name:"ЗапускПриложенияМобильногоУстройства",... params): ЗапускПриложенияМобильногоУстройства;
declare function v8New(name:"CalendarBox",... params): CalendarBox;
declare function v8New(name:"ПолеКалендаря",... params): ПолеКалендаря;
declare function v8New(name:"EnumFormattedDocumentItemType",... params): EnumFormattedDocumentItemType;
declare function v8New(name:"ПеречислениеТипЭлементаФорматированногоДокумента",... params): ПеречислениеТипЭлементаФорматированногоДокумента;
declare function v8New(name:"EnumSpreadsheetDocumentTextPlacementType",... params): EnumSpreadsheetDocumentTextPlacementType;
declare function v8New(name:"ПеречислениеТипРазмещенияТекстаТабличногоДокумента",... params): ПеречислениеТипРазмещенияТекстаТабличногоДокумента;
declare function v8New(name:"CryptoManager",... params): CryptoManager;
declare function v8New(name:"МенеджерКриптографии",... params): МенеджерКриптографии;
declare function v8New(name:"AddressData",... params): AddressData;
declare function v8New(name:"ДанныеАдреса",... params): ДанныеАдреса;
declare function v8New(name:"ZipFileWriter",... params): ZipFileWriter;
declare function v8New(name:"ЗаписьZipФайла",... params): ЗаписьZipФайла;
declare function v8New(name:"EnumDataCompositionPeriodType",... params): EnumDataCompositionPeriodType;
declare function v8New(name:"ПеречислениеТипПериодаКомпоновкиДанных",... params): ПеречислениеТипПериодаКомпоновкиДанных;
declare function v8New(name:"FontChooseDialog",... params): FontChooseDialog;
declare function v8New(name:"ДиалогВыбораШрифта",... params): ДиалогВыбораШрифта;
declare function v8New(name:"EnumQueryResultIteration",... params): EnumQueryResultIteration;
declare function v8New(name:"ПеречислениеОбходРезультатаЗапроса",... params): ПеречислениеОбходРезультатаЗапроса;
declare function v8New(name:"WSProxy",... params): WSProxy;
declare function v8New(name:"WSПрокси",... params): WSПрокси;
declare function v8New(name:"EnumColumnSizeChange",... params): EnumColumnSizeChange;
declare function v8New(name:"ПеречислениеИзменениеРазмераКолонки",... params): ПеречислениеИзменениеРазмераКолонки;
declare function v8New(name:"TableBox",... params): TableBox;
declare function v8New(name:"ТабличноеПоле",... params): ТабличноеПоле;
declare function v8New(name:"EnumSpreadsheetDocumentCellAreaType",... params): EnumSpreadsheetDocumentCellAreaType;
declare function v8New(name:"ПеречислениеТипОбластиЯчеекТабличногоДокумента",... params): ПеречислениеТипОбластиЯчеекТабличногоДокумента;
declare function v8New(name:"XSImport",... params): XSImport;
declare function v8New(name:"ИмпортXS",... params): ИмпортXS;
declare function v8New(name:"CalendarsManager",... params): CalendarsManager;
declare function v8New(name:"МенеджерКалендарей",... params): МенеджерКалендарей;
declare function v8New(name:"AccountCalendarData",... params): AccountCalendarData;
declare function v8New(name:"ДанныеКалендаряУчетнойЗаписи",... params): ДанныеКалендаряУчетнойЗаписи;
declare function v8New(name:"AccountCalendarEventData",... params): AccountCalendarEventData;
declare function v8New(name:"ДанныеСобытияКалендаряУчетнойЗаписи",... params): ДанныеСобытияКалендаряУчетнойЗаписи;
declare function v8New(name:"CalendarEventData",... params): CalendarEventData;
declare function v8New(name:"ДанныеСобытияКалендаря",... params): ДанныеСобытияКалендаря;
declare function v8New(name:"EnumGeographicalSchemaMarkerType",... params): EnumGeographicalSchemaMarkerType;
declare function v8New(name:"ПеречислениеТипМаркераГеографическойСхемы",... params): ПеречислениеТипМаркераГеографическойСхемы;
declare function v8New(name:"EnumPivotChartLabelsOrientation",... params): EnumPivotChartLabelsOrientation;
declare function v8New(name:"ПеречислениеОриентацияМетокСводнойДиаграммы",... params): ПеречислениеОриентацияМетокСводнойДиаграммы;
declare function v8New(name:"EnumDataCompositionFixation",... params): EnumDataCompositionFixation;
declare function v8New(name:"ПеречислениеФиксацияКомпоновкиДанных",... params): ПеречислениеФиксацияКомпоновкиДанных;
declare function v8New(name:"ActiveX",... params): ActiveX;
declare function v8New(name:"ActiveX",... params): ActiveX;
declare function v8New(name:"EnumDataCompositionParameterUse",... params): EnumDataCompositionParameterUse;
declare function v8New(name:"ПеречислениеИспользованиеПараметраКомпоновкиДанных",... params): ПеречислениеИспользованиеПараметраКомпоновкиДанных;
declare function v8New(name:"EnumCryptoCertificateCheckMode",... params): EnumCryptoCertificateCheckMode;
declare function v8New(name:"ПеречислениеРежимПроверкиСертификатаКриптографии",... params): ПеречислениеРежимПроверкиСертификатаКриптографии;
declare function v8New(name:"EnumFormPagesState",... params): EnumFormPagesState;
declare function v8New(name:"ПеречислениеСостояниеСтраницФормы",... params): ПеречислениеСостояниеСтраницФормы;
declare function v8New(name:"JSONReader",... params): JSONReader;
declare function v8New(name:"ЧтениеJSON",... params): ЧтениеJSON;
declare function v8New(name:"EnumGraphicalSchemaItemPictureLocation",... params): EnumGraphicalSchemaItemPictureLocation;
declare function v8New(name:"ПеречислениеПоложениеКартинкиЭлементаГрафическойСхемы",... params): ПеречислениеПоложениеКартинкиЭлементаГрафическойСхемы;
declare function v8New(name:"EnumTotalPlacementType",... params): EnumTotalPlacementType;
declare function v8New(name:"ПеречислениеТипРазмещенияИтогов",... params): ПеречислениеТипРазмещенияИтогов;
declare function v8New(name:"EnumSliceUse",... params): EnumSliceUse;
declare function v8New(name:"ПеречислениеИспользованиеСреза",... params): ПеречислениеИспользованиеСреза;
declare function v8New(name:"StandardBeginningDate",... params): StandardBeginningDate;
declare function v8New(name:"СтандартнаяДатаНачала",... params): СтандартнаяДатаНачала;
declare function v8New(name:"EnumLinkedValueChangeMode",... params): EnumLinkedValueChangeMode;
declare function v8New(name:"ПеречислениеРежимИзмененияСвязанногоЗначения",... params): ПеречислениеРежимИзмененияСвязанногоЗначения;
declare function v8New(name:"ContactDataItem",... params): ContactDataItem;
declare function v8New(name:"ЭлементДанныхКонтакта",... params): ЭлементДанныхКонтакта;
declare function v8New(name:"EnumDataCompositionResourcesPlacement",... params): EnumDataCompositionResourcesPlacement;
declare function v8New(name:"ПеречислениеРасположениеРесурсовКомпоновкиДанных",... params): ПеречислениеРасположениеРесурсовКомпоновкиДанных;
declare function v8New(name:"EnumAccumulationRegisterAggregatePeriodicity",... params): EnumAccumulationRegisterAggregatePeriodicity;
declare function v8New(name:"ПеречислениеПериодичностьАгрегатаРегистраНакопления",... params): ПеречислениеПериодичностьАгрегатаРегистраНакопления;
declare function v8New(name:"EnumFitPageMode",... params): EnumFitPageMode;
declare function v8New(name:"ПеречислениеРежимРазмещенияНаСтранице",... params): ПеречислениеРежимРазмещенияНаСтранице;
declare function v8New(name:"XSDocumentation",... params): XSDocumentation;
declare function v8New(name:"ДокументацияXS",... params): ДокументацияXS;
declare function v8New(name:"EnumCommandBarButtonAlignment",... params): EnumCommandBarButtonAlignment;
declare function v8New(name:"ПеречислениеВыравниваниеКнопокКоманднойПанели",... params): ПеречислениеВыравниваниеКнопокКоманднойПанели;
declare function v8New(name:"ColorChooseDialog",... params): ColorChooseDialog;
declare function v8New(name:"ДиалогВыбораЦвета",... params): ДиалогВыбораЦвета;
declare function v8New(name:"TypeLink",... params): TypeLink;
declare function v8New(name:"СвязьПоТипу",... params): СвязьПоТипу;
declare function v8New(name:"PointInTime",... params): PointInTime;
declare function v8New(name:"МоментВремени",... params): МоментВремени;
declare function v8New(name:"EnumDataCompositionAttributesPlacement",... params): EnumDataCompositionAttributesPlacement;
declare function v8New(name:"ПеречислениеРасположениеРеквизитовКомпоновкиДанных",... params): ПеречислениеРасположениеРеквизитовКомпоновкиДанных;
declare function v8New(name:"XSMinExclusiveFacet",... params): XSMinExclusiveFacet;
declare function v8New(name:"ФасетМинимальногоИсключающегоЗначенияXS",... params): ФасетМинимальногоИсключающегоЗначенияXS;
declare function v8New(name:"XSAttributeUse",... params): XSAttributeUse;
declare function v8New(name:"ИспользованиеАтрибутаXS",... params): ИспользованиеАтрибутаXS;
declare function v8New(name:"FileStream",... params): FileStream;
declare function v8New(name:"ФайловыйПоток",... params): ФайловыйПоток;
declare function v8New(name:"EnumPredictionModelColumnType",... params): EnumPredictionModelColumnType;
declare function v8New(name:"ПеречислениеТипКолонкиМоделиПрогноза",... params): ПеречислениеТипКолонкиМоделиПрогноза;
declare function v8New(name:"EnumClientApplicationBaseFontVariant",... params): EnumClientApplicationBaseFontVariant;
declare function v8New(name:"ПеречислениеВариантОсновногоШрифтаКлиентскогоПриложения",... params): ПеречислениеВариантОсновногоШрифтаКлиентскогоПриложения;
declare function v8New(name:"EnumClientApplicationFormScaleVariant",... params): EnumClientApplicationFormScaleVariant;
declare function v8New(name:"ПеречислениеВариантМасштабаФормКлиентскогоПриложения",... params): ПеречислениеВариантМасштабаФормКлиентскогоПриложения;
declare function v8New(name:"EnumAppearanceAreaType",... params): EnumAppearanceAreaType;
declare function v8New(name:"ПеречислениеТипОбластиОформления",... params): ПеречислениеТипОбластиОформления;
declare function v8New(name:"TrackBar",... params): TrackBar;
declare function v8New(name:"ПолосаРегулирования",... params): ПолосаРегулирования;
declare function v8New(name:"EnumDataCompositionResourcesAutoPosition",... params): EnumDataCompositionResourcesAutoPosition;
declare function v8New(name:"ПеречислениеАвтоПозицияРесурсовКомпоновкиДанных",... params): ПеречислениеАвтоПозицияРесурсовКомпоновкиДанных;
declare function v8New(name:"EnumSpellCheckingOnTextInput",... params): EnumSpellCheckingOnTextInput;
declare function v8New(name:"ПеречислениеПроверкаПравописанияПриВводеТекста",... params): ПеречислениеПроверкаПравописанияПриВводеТекста;
declare function v8New(name:"EnumDataCompositionFilterItemsGroupType",... params): EnumDataCompositionFilterItemsGroupType;
declare function v8New(name:"ПеречислениеТипГруппыЭлементовОтбораКомпоновкиДанных",... params): ПеречислениеТипГруппыЭлементовОтбораКомпоновкиДанных;
declare function v8New(name:"DataCompositionSchemaWizard",... params): DataCompositionSchemaWizard;
declare function v8New(name:"КонструкторСхемыКомпоновкиДанных",... params): КонструкторСхемыКомпоновкиДанных;
declare function v8New(name:"TextReader",... params): TextReader;
declare function v8New(name:"ЧтениеТекста",... params): ЧтениеТекста;
declare function v8New(name:"ClientInterfaceFavoritesTable",... params): ClientInterfaceFavoritesTable;
declare function v8New(name:"ClientInterfaceFavoritesTable",... params): ClientInterfaceFavoritesTable;
declare function v8New(name:"EnumCalculationRegisterPeriodType",... params): EnumCalculationRegisterPeriodType;
declare function v8New(name:"ПеречислениеВидПериодаРегистраРасчета",... params): ПеречислениеВидПериодаРегистраРасчета;
declare function v8New(name:"EnumCryptoCertificateStoreType",... params): EnumCryptoCertificateStoreType;
declare function v8New(name:"ПеречислениеТипХранилищаСертификатовКриптографии",... params): ПеречислениеТипХранилищаСертификатовКриптографии;
declare function v8New(name:"EnumDataLockMode",... params): EnumDataLockMode;
declare function v8New(name:"ПеречислениеРежимБлокировкиДанных",... params): ПеречислениеРежимБлокировкиДанных;
declare function v8New(name:"EnumDataCompositionAreaTemplateType",... params): EnumDataCompositionAreaTemplateType;
declare function v8New(name:"ПеречислениеТипМакетаОбластиКомпоновкиДанных",... params): ПеречислениеТипМакетаОбластиКомпоновкиДанных;
declare function v8New(name:"EnumDataCompositionChartLegendPlacement",... params): EnumDataCompositionChartLegendPlacement;
declare function v8New(name:"ПеречислениеРасположениеЛегендыДиаграммыКомпоновкиДанных",... params): ПеречислениеРасположениеЛегендыДиаграммыКомпоновкиДанных;
declare function v8New(name:"ConversionToCanonicalXML",... params): ConversionToCanonicalXML;
declare function v8New(name:"ПреобразованиеККаноническомуXML",... params): ПреобразованиеККаноническомуXML;
declare function v8New(name:"EnumGraphicalSchemeElementSideType",... params): EnumGraphicalSchemeElementSideType;
declare function v8New(name:"ПеречислениеТипСтороныЭлементаГрафическойСхемы",... params): ПеречислениеТипСтороныЭлементаГрафическойСхемы;
declare function v8New(name:"EnumDataAnalysisStandardizationType",... params): EnumDataAnalysisStandardizationType;
declare function v8New(name:"ПеречислениеТипСтандартизацииАнализаДанных",... params): ПеречислениеТипСтандартизацииАнализаДанных;
declare function v8New(name:"EnumPostingModeUse",... params): EnumPostingModeUse;
declare function v8New(name:"ПеречислениеИспользованиеРежимаПроведения",... params): ПеречислениеИспользованиеРежимаПроведения;
declare function v8New(name:"EnumGeographicalSchemaLayerSeriesShowMode",... params): EnumGeographicalSchemaLayerSeriesShowMode;
declare function v8New(name:"ПеречислениеТипОтображенияСерииСлояГеографическойСхемы",... params): ПеречислениеТипОтображенияСерииСлояГеографическойСхемы;
declare function v8New(name:"EnumShowChartScaleTitle",... params): EnumShowChartScaleTitle;
declare function v8New(name:"ПеречислениеОтображениеЗаголовкаШкалыДиаграммы",... params): ПеречислениеОтображениеЗаголовкаШкалыДиаграммы;
declare function v8New(name:"DataCompositionDetailsProcessDescription",... params): DataCompositionDetailsProcessDescription;
declare function v8New(name:"ОписаниеОбработкиРасшифровкиКомпоновкиДанных",... params): ОписаниеОбработкиРасшифровкиКомпоновкиДанных;
declare function v8New(name:"EnumTaskListMode",... params): EnumTaskListMode;
declare function v8New(name:"ПеречислениеРежимСпискаЗадач",... params): ПеречислениеРежимСпискаЗадач;
declare function v8New(name:"RadioButton",... params): RadioButton;
declare function v8New(name:"Переключатель",... params): Переключатель;
declare function v8New(name:"HTTPServiceResponse",... params): HTTPServiceResponse;
declare function v8New(name:"HTTPСервисОтвет",... params): HTTPСервисОтвет;
declare function v8New(name:"EventLogAccessEventUseDescription",... params): EventLogAccessEventUseDescription;
declare function v8New(name:"ОписаниеИспользованияСобытияДоступЖурналаРегистрации",... params): ОписаниеИспользованияСобытияДоступЖурналаРегистрации;
declare function v8New(name:"EnumDataCompositionDataSetsLinkType",... params): EnumDataCompositionDataSetsLinkType;
declare function v8New(name:"ПеречислениеТипСвязиНаборовДанныхКомпоновкиДанных",... params): ПеречислениеТипСвязиНаборовДанныхКомпоновкиДанных;
declare function v8New(name:"CheckBox",... params): CheckBox;
declare function v8New(name:"Флажок",... params): Флажок;
declare function v8New(name:"EnumGanttChartScaleKeeping",... params): EnumGanttChartScaleKeeping;
declare function v8New(name:"ПеречислениеПоддержкаМасштабаДиаграммыГанта",... params): ПеречислениеПоддержкаМасштабаДиаграммыГанта;
declare function v8New(name:"XSIdentityConstraintDefinition",... params): XSIdentityConstraintDefinition;
declare function v8New(name:"ОпределениеОграниченияИдентичностиXS",... params): ОпределениеОграниченияИдентичностиXS;
declare function v8New(name:"SettingsChoice",... params): SettingsChoice;
declare function v8New(name:"ВыборНастроек",... params): ВыборНастроек;
declare function v8New(name:"DeliverableNotification",... params): DeliverableNotification;
declare function v8New(name:"ДоставляемоеУведомление",... params): ДоставляемоеУведомление;
declare function v8New(name:"EnumStringEncodingMethod",... params): EnumStringEncodingMethod;
declare function v8New(name:"ПеречислениеСпособКодированияСтроки",... params): ПеречислениеСпособКодированияСтроки;
declare function v8New(name:"EnumDataCompositionFieldPlacement",... params): EnumDataCompositionFieldPlacement;
declare function v8New(name:"ПеречислениеРасположениеПоляКомпоновкиДанных",... params): ПеречислениеРасположениеПоляКомпоновкиДанных;
declare function v8New(name:"XSTotalDigitsFacet",... params): XSTotalDigitsFacet;
declare function v8New(name:"ФасетОбщегоКоличестваРазрядовXS",... params): ФасетОбщегоКоличестваРазрядовXS;
declare function v8New(name:"Chart",... params): Chart;
declare function v8New(name:"Диаграмма",... params): Диаграмма;
declare function v8New(name:"Label",... params): Label;
declare function v8New(name:"Надпись",... params): Надпись;
declare function v8New(name:"ScheduledJobDialog",... params): ScheduledJobDialog;
declare function v8New(name:"ДиалогРасписанияРегламентногоЗадания",... params): ДиалогРасписанияРегламентногоЗадания;
declare function v8New(name:"EnumDataAnalysisFieldType",... params): EnumDataAnalysisFieldType;
declare function v8New(name:"ПеречислениеТипПоляАнализаДанных",... params): ПеречислениеТипПоляАнализаДанных;
declare function v8New(name:"Button",... params): Button;
declare function v8New(name:"Кнопка",... params): Кнопка;
declare function v8New(name:"Splitter",... params): Splitter;
declare function v8New(name:"Разделитель",... params): Разделитель;
declare function v8New(name:"QuerySchema",... params): QuerySchema;
declare function v8New(name:"СхемаЗапроса",... params): СхемаЗапроса;
declare function v8New(name:"CollaborationSystemInfoBaseRegistrationParameters",... params): CollaborationSystemInfoBaseRegistrationParameters;
declare function v8New(name:"ПараметрыРегистрацииИнформационнойБазыСистемыВзаимодействия",... params): ПараметрыРегистрацииИнформационнойБазыСистемыВзаимодействия;
declare function v8New(name:"CommandInterfaceCommand",... params): CommandInterfaceCommand;
declare function v8New(name:"КомандаКомандногоИнтерфейса",... params): КомандаКомандногоИнтерфейса;
declare function v8New(name:"EnumAccumulationRegisterAggregateUse",... params): EnumAccumulationRegisterAggregateUse;
declare function v8New(name:"ПеречислениеИспользованиеАгрегатаРегистраНакопления",... params): ПеречислениеИспользованиеАгрегатаРегистраНакопления;
declare function v8New(name:"EnumDendrogramOrientation",... params): EnumDendrogramOrientation;
declare function v8New(name:"ПеречислениеОриентацияДендрограммы",... params): ПеречислениеОриентацияДендрограммы;
declare function v8New(name:"FastInfosetWriter",... params): FastInfosetWriter;
declare function v8New(name:"ЗаписьFastInfoset",... params): ЗаписьFastInfoset;
declare function v8New(name:"ComboBox",... params): ComboBox;
declare function v8New(name:"ПолеВыбора",... params): ПолеВыбора;
declare function v8New(name:"EnumCryptoCertificateIncludeMode",... params): EnumCryptoCertificateIncludeMode;
declare function v8New(name:"ПеречислениеРежимВключенияСертификатовКриптографии",... params): ПеречислениеРежимВключенияСертификатовКриптографии;
declare function v8New(name:"DataCompositionDetailsProcess",... params): DataCompositionDetailsProcess;
declare function v8New(name:"ОбработкаРасшифровкиКомпоновкиДанных",... params): ОбработкаРасшифровкиКомпоновкиДанных;
declare function v8New(name:"EnumClientConnectionSpeed",... params): EnumClientConnectionSpeed;
declare function v8New(name:"ПеречислениеСкоростьКлиентскогоСоединения",... params): ПеречислениеСкоростьКлиентскогоСоединения;
declare function v8New(name:"EnumAutoShowStateMode",... params): EnumAutoShowStateMode;
declare function v8New(name:"ПеречислениеРежимАвтоОтображенияСостояния",... params): ПеречислениеРежимАвтоОтображенияСостояния;
declare function v8New(name:"EnumDataAnalysisColumnTypeClusterization",... params): EnumDataAnalysisColumnTypeClusterization;
declare function v8New(name:"ПеречислениеТипКолонкиАнализаДанныхКластеризация",... params): ПеречислениеТипКолонкиАнализаДанныхКластеризация;
declare function v8New(name:"DataCompositionAreaTemplate",... params): DataCompositionAreaTemplate;
declare function v8New(name:"МакетОбластиКомпоновкиДанных",... params): МакетОбластиКомпоновкиДанных;
declare function v8New(name:"EnumChartScaleTitleTextSource",... params): EnumChartScaleTitleTextSource;
declare function v8New(name:"ПеречислениеСпособЗаполненияТекстаЗаголовкаШкалыДиаграммы",... params): ПеречислениеСпособЗаполненияТекстаЗаголовкаШкалыДиаграммы;
declare function v8New(name:"CryptoKeysContainer",... params): CryptoKeysContainer;
declare function v8New(name:"КонтейнерКлючейКриптографии",... params): КонтейнерКлючейКриптографии;
declare function v8New(name:"EnumContactDataPhoneNumberType",... params): EnumContactDataPhoneNumberType;
declare function v8New(name:"ПеречислениеТипНомераТелефонаДанныхКонтакта",... params): ПеречислениеТипНомераТелефонаДанныхКонтакта;
declare function v8New(name:"EnumChartMarkerType",... params): EnumChartMarkerType;
declare function v8New(name:"ПеречислениеТипМаркераДиаграммы",... params): ПеречислениеТипМаркераДиаграммы;
declare function v8New(name:"XSAppInfo",... params): XSAppInfo;
declare function v8New(name:"ИнформацияДляПриложенияXS",... params): ИнформацияДляПриложенияXS;
declare function v8New(name:"EnumGraphicalSchemaShapes",... params): EnumGraphicalSchemaShapes;
declare function v8New(name:"ПеречислениеФигурыГрафическойСхемы",... params): ПеречислениеФигурыГрафическойСхемы;
declare function v8New(name:"Range",... params): Range;
declare function v8New(name:"Диапазон",... params): Диапазон;
declare function v8New(name:"DataCompositionProcessor",... params): DataCompositionProcessor;
declare function v8New(name:"ПроцессорКомпоновкиДанных",... params): ПроцессорКомпоновкиДанных;
declare function v8New(name:"DataCompositionResultItem",... params): DataCompositionResultItem;
declare function v8New(name:"ЭлементРезультатаКомпоновкиДанных",... params): ЭлементРезультатаКомпоновкиДанных;
declare function v8New(name:"EnumAnalysisDataType",... params): EnumAnalysisDataType;
declare function v8New(name:"ПеречислениеВидДанныхАнализа",... params): ПеречислениеВидДанныхАнализа;
declare function v8New(name:"EnumSeriesValuesDrawingMode",... params): EnumSeriesValuesDrawingMode;
declare function v8New(name:"ПеречислениеРежимОтображенияЗначенийСерии",... params): ПеречислениеРежимОтображенияЗначенийСерии;
declare function v8New(name:"EnumTimeScalePosition",... params): EnumTimeScalePosition;
declare function v8New(name:"ПеречислениеПоложениеШкалыВремени",... params): ПеречислениеПоложениеШкалыВремени;
declare function v8New(name:"EnumResultCompositionMode",... params): EnumResultCompositionMode;
declare function v8New(name:"ПеречислениеРежимКомпоновкиРезультата",... params): ПеречислениеРежимКомпоновкиРезультата;
declare function v8New(name:"EnumTelephonyToolsCallType",... params): EnumTelephonyToolsCallType;
declare function v8New(name:"ПеречислениеТипЗвонкаСредствТелефонии",... params): ПеречислениеТипЗвонкаСредствТелефонии;
declare function v8New(name:"EnumUserNotificationStatus",... params): EnumUserNotificationStatus;
declare function v8New(name:"ПеречислениеСтатусОповещенияПользователя",... params): ПеречислениеСтатусОповещенияПользователя;
declare function v8New(name:"BinaryDataBuffer",... params): BinaryDataBuffer;
declare function v8New(name:"БуферДвоичныхДанных",... params): БуферДвоичныхДанных;
declare function v8New(name:"EnumAccountingRecordType",... params): EnumAccountingRecordType;
declare function v8New(name:"ПеречислениеВидДвиженияБухгалтерии",... params): ПеречислениеВидДвиженияБухгалтерии;
declare function v8New(name:"InAppPurchase",... params): InAppPurchase;
declare function v8New(name:"ВстроеннаяПокупка",... params): ВстроеннаяПокупка;
declare function v8New(name:"EnumGaugeChartValueRepresentation",... params): EnumGaugeChartValueRepresentation;
declare function v8New(name:"ПеречислениеОтображениеЗначенияИзмерительнойДиаграммы",... params): ПеречислениеОтображениеЗначенияИзмерительнойДиаграммы;
declare function v8New(name:"EnumChartType",... params): EnumChartType;
declare function v8New(name:"ПеречислениеТипДиаграммы",... params): ПеречислениеТипДиаграммы;
declare function v8New(name:"HelpSettings",... params): HelpSettings;
declare function v8New(name:"НастройкиСправки",... params): НастройкиСправки;
declare function v8New(name:"XSInclude",... params): XSInclude;
declare function v8New(name:"ВключениеXS",... params): ВключениеXS;
declare function v8New(name:"EnumByteOrderMarkUsage",... params): EnumByteOrderMarkUsage;
declare function v8New(name:"ПеречислениеИспользованиеByteOrderMark",... params): ПеречислениеИспользованиеByteOrderMark;
declare function v8New(name:"EnumBusinessProcessRoutePointType",... params): EnumBusinessProcessRoutePointType;
declare function v8New(name:"ПеречислениеВидТочкиМаршрутаБизнесПроцесса",... params): ПеречислениеВидТочкиМаршрутаБизнесПроцесса;
declare function v8New(name:"WSDefinitions",... params): WSDefinitions;
declare function v8New(name:"WSОпределения",... params): WSОпределения;
declare function v8New(name:"MMSAttachment",... params): MMSAttachment;
declare function v8New(name:"MMSВложение",... params): MMSВложение;
declare function v8New(name:"EnumAccumulationRecordType",... params): EnumAccumulationRecordType;
declare function v8New(name:"ПеречислениеВидДвиженияНакопления",... params): ПеречислениеВидДвиженияНакопления;
declare function v8New(name:"DataCompositionSettingsWizard",... params): DataCompositionSettingsWizard;
declare function v8New(name:"КонструкторНастроекКомпоновкиДанных",... params): КонструкторНастроекКомпоновкиДанных;
declare function v8New(name:"EnumAutoCorrectionOnTextInput",... params): EnumAutoCorrectionOnTextInput;
declare function v8New(name:"ПеречислениеАвтоИсправлениеПриВводеТекста",... params): ПеречислениеАвтоИсправлениеПриВводеТекста;
declare function v8New(name:"UserMessage",... params): UserMessage;
declare function v8New(name:"СообщениеПользователю",... params): СообщениеПользователю;
declare function v8New(name:"DataHashing",... params): DataHashing;
declare function v8New(name:"ХешированиеДанных",... params): ХешированиеДанных;
declare function v8New(name:"EnumPivotTableRowTotalPosition",... params): EnumPivotTableRowTotalPosition;
declare function v8New(name:"ПеречислениеПоложениеИтоговСтрокСводнойТаблицы",... params): ПеречислениеПоложениеИтоговСтрокСводнойТаблицы;
declare function v8New(name:"XMLCanonicalizingWriter",... params): XMLCanonicalizingWriter;
declare function v8New(name:"КаноническаяЗаписьXML",... params): КаноническаяЗаписьXML;
declare function v8New(name:"EnumOrientation",... params): EnumOrientation;
declare function v8New(name:"ПеречислениеОриентация",... params): ПеречислениеОриентация;
declare function v8New(name:"SMSMessage",... params): SMSMessage;
declare function v8New(name:"SMSСообщение",... params): SMSСообщение;
declare function v8New(name:"OSCertificationAuthorityCertificates",... params): OSCertificationAuthorityCertificates;
declare function v8New(name:"СертификатыУдостоверяющихЦентровОС",... params): СертификатыУдостоверяющихЦентровОС;
declare function v8New(name:"EnumDimensionAttributePlacementType",... params): EnumDimensionAttributePlacementType;
declare function v8New(name:"ПеречислениеТипРазмещенияРеквизитовИзмерений",... params): ПеречислениеТипРазмещенияРеквизитовИзмерений;
declare function v8New(name:"EnumPivotChartValuesShowMode",... params): EnumPivotChartValuesShowMode;
declare function v8New(name:"ПеречислениеОтображениеЗначенийСводнойДиаграммы",... params): ПеречислениеОтображениеЗначенийСводнойДиаграммы;
declare function v8New(name:"EnumDataCompositionFilterApplicationType",... params): EnumDataCompositionFilterApplicationType;
declare function v8New(name:"ПеречислениеТипПримененияОтбораКомпоновкиДанных",... params): ПеречислениеТипПримененияОтбораКомпоновкиДанных;
declare function v8New(name:"EnumSpreadsheetDocumentDrawingType",... params): EnumSpreadsheetDocumentDrawingType;
declare function v8New(name:"ПеречислениеТипРисункаТабличногоДокумента",... params): ПеречислениеТипРисункаТабличногоДокумента;
declare function v8New(name:"WindowSettings",... params): WindowSettings;
declare function v8New(name:"НастройкиОкна",... params): НастройкиОкна;
declare function v8New(name:"XSNotationDeclaration",... params): XSNotationDeclaration;
declare function v8New(name:"ОбъявлениеНотацииXS",... params): ОбъявлениеНотацииXS;
declare function v8New(name:"EnumAssociationRulesPruneType",... params): EnumAssociationRulesPruneType;
declare function v8New(name:"ПеречислениеТипОтсеченияПравилАссоциации",... params): ПеречислениеТипОтсеченияПравилАссоциации;
declare function v8New(name:"DataReader",... params): DataReader;
declare function v8New(name:"ЧтениеДанных",... params): ЧтениеДанных;
declare function v8New(name:"EnumReportBuilderDimensionType",... params): EnumReportBuilderDimensionType;
declare function v8New(name:"ПеречислениеТипИзмеренияПостроителяОтчета",... params): ПеречислениеТипИзмеренияПостроителяОтчета;
declare function v8New(name:"XSParticle",... params): XSParticle;
declare function v8New(name:"ФрагментXS",... params): ФрагментXS;
declare function v8New(name:"EnumGeographicalSchemaPointObjectDrawingType",... params): EnumGeographicalSchemaPointObjectDrawingType;
declare function v8New(name:"ПеречислениеТипОтображенияТочечногоОбъектаГеографическойСхемы",... params): ПеречислениеТипОтображенияТочечногоОбъектаГеографическойСхемы;
declare function v8New(name:"EnumDataCompositionGroupType",... params): EnumDataCompositionGroupType;
declare function v8New(name:"ПеречислениеТипГруппировкиКомпоновкиДанных",... params): ПеречислениеТипГруппировкиКомпоновкиДанных;
declare function v8New(name:"EnumDataCompositionLengthUnit",... params): EnumDataCompositionLengthUnit;
declare function v8New(name:"ПеречислениеЕдиницаДлиныКомпоновкиДанных",... params): ПеречислениеЕдиницаДлиныКомпоновкиДанных;
declare function v8New(name:"EnumXDTOVariety",... params): EnumXDTOVariety;
declare function v8New(name:"ПеречислениеВариантXDTO",... params): ПеречислениеВариантXDTO;
declare function v8New(name:"EnumDataCompositionGroupTemplateType",... params): EnumDataCompositionGroupTemplateType;
declare function v8New(name:"ПеречислениеТипМакетаГруппировкиКомпоновкиДанных",... params): ПеречислениеТипМакетаГруппировкиКомпоновкиДанных;
declare function v8New(name:"EnumHashFunction",... params): EnumHashFunction;
declare function v8New(name:"ПеречислениеХешФункция",... params): ПеречислениеХешФункция;
declare function v8New(name:"EnumDataCompositionConditionalAppearanceUse",... params): EnumDataCompositionConditionalAppearanceUse;
declare function v8New(name:"ПеречислениеИспользованиеУсловногоОформленияКомпоновкиДанных",... params): ПеречислениеИспользованиеУсловногоОформленияКомпоновкиДанных;
declare function v8New(name:"EnumDataAnalysisSequentialPatternsOrderType",... params): EnumDataAnalysisSequentialPatternsOrderType;
declare function v8New(name:"ПеречислениеТипУпорядочиванияШаблоновПоследовательностейАнализаДанных",... params): ПеречислениеТипУпорядочиванияШаблоновПоследовательностейАнализаДанных;
declare function v8New(name:"EnumDataCompositionSettingsRefreshMethod",... params): EnumDataCompositionSettingsRefreshMethod;
declare function v8New(name:"ПеречислениеСпособВосстановленияНастроекКомпоновкиДанных",... params): ПеречислениеСпособВосстановленияНастроекКомпоновкиДанных;
declare function v8New(name:"XMLSchemaBuilder",... params): XMLSchemaBuilder;
declare function v8New(name:"ПостроительСхемXML",... params): ПостроительСхемXML;
declare function v8New(name:"ComparisonSettings",... params): ComparisonSettings;
declare function v8New(name:"НастройкиСравнения",... params): НастройкиСравнения;
declare function v8New(name:"EnumGeographicalSchemaDataSourceOrganizationType",... params): EnumGeographicalSchemaDataSourceOrganizationType;
declare function v8New(name:"ПеречислениеТипОрганизацииИсточникаДанныхГеографическойСхемы",... params): ПеречислениеТипОрганизацииИсточникаДанныхГеографическойСхемы;
declare function v8New(name:"CollaborationSystemNotification",... params): CollaborationSystemNotification;
declare function v8New(name:"ОповещениеСистемыВзаимодействия",... params): ОповещениеСистемыВзаимодействия;
declare function v8New(name:"CompareValues",... params): CompareValues;
declare function v8New(name:"СравнениеЗначений",... params): СравнениеЗначений;
declare function v8New(name:"EnumLocationRelativeToGeofence",... params): EnumLocationRelativeToGeofence;
declare function v8New(name:"ПеречислениеПоложениеОтносительноГеозоны",... params): ПеречислениеПоложениеОтносительноГеозоны;
declare function v8New(name:"DataCompositionSettingsComposer",... params): DataCompositionSettingsComposer;
declare function v8New(name:"КомпоновщикНастроекКомпоновкиДанных",... params): КомпоновщикНастроекКомпоновкиДанных;
declare function v8New(name:"EnumDataCompositionTotalPlacement",... params): EnumDataCompositionTotalPlacement;
declare function v8New(name:"ПеречислениеРасположениеИтоговКомпоновкиДанных",... params): ПеречислениеРасположениеИтоговКомпоновкиДанных;
declare function v8New(name:"FileCompare",... params): FileCompare;
declare function v8New(name:"СравнениеФайлов",... params): СравнениеФайлов;
declare function v8New(name:"EnumBarChartPointsOrder",... params): EnumBarChartPointsOrder;
declare function v8New(name:"ПеречислениеПорядокОтображенияТочекГоризонтальнойГистограммы",... params): ПеречислениеПорядокОтображенияТочекГоризонтальнойГистограммы;
declare function v8New(name:"EnumClusterizationMethod",... params): EnumClusterizationMethod;
declare function v8New(name:"ПеречислениеМетодКластеризации",... params): ПеречислениеМетодКластеризации;
declare function v8New(name:"XSMinInclusiveFacet",... params): XSMinInclusiveFacet;
declare function v8New(name:"ФасетМинимальногоВключающегоЗначенияXS",... params): ФасетМинимальногоВключающегоЗначенияXS;
declare function v8New(name:"TextBox",... params): TextBox;
declare function v8New(name:"ПолеВвода",... params): ПолеВвода;
declare function v8New(name:"EnumPredefinedDataUpdate",... params): EnumPredefinedDataUpdate;
declare function v8New(name:"ПеречислениеОбновлениеПредопределенныхДанных",... params): ПеречислениеОбновлениеПредопределенныхДанных;
declare function v8New(name:"EnumExternalDataSourceState",... params): EnumExternalDataSourceState;
declare function v8New(name:"ПеречислениеСостояниеВнешнегоИсточникаДанных",... params): ПеречислениеСостояниеВнешнегоИсточникаДанных;
declare function v8New(name:"EnumContactDataAddressType",... params): EnumContactDataAddressType;
declare function v8New(name:"ПеречислениеТипАдресаДанныхКонтакта",... params): ПеречислениеТипАдресаДанныхКонтакта;
declare function v8New(name:"EnumReportBuilderDetailsFillType",... params): EnumReportBuilderDetailsFillType;
declare function v8New(name:"ПеречислениеВидЗаполненияРасшифровкиПостроителяОтчета",... params): ПеречислениеВидЗаполненияРасшифровкиПостроителяОтчета;
declare function v8New(name:"EnumDataAnalysisColumnTypeDecisionTree",... params): EnumDataAnalysisColumnTypeDecisionTree;
declare function v8New(name:"ПеречислениеТипКолонкиАнализаДанныхДеревоРешений",... params): ПеречислениеТипКолонкиАнализаДанныхДеревоРешений;
declare function v8New(name:"JSONSerializerSettings",... params): JSONSerializerSettings;
declare function v8New(name:"НастройкиСериализацииJSON",... params): НастройкиСериализацииJSON;
declare function v8New(name:"DataCompositionDetailsFieldValues",... params): DataCompositionDetailsFieldValues;
declare function v8New(name:"ЗначенияПолейРасшифровкиКомпоновкиДанных",... params): ЗначенияПолейРасшифровкиКомпоновкиДанных;
declare function v8New(name:"GraphicalSchemaField",... params): GraphicalSchemaField;
declare function v8New(name:"ПолеГрафическойСхемы",... params): ПолеГрафическойСхемы;
declare function v8New(name:"EnumShowInChart",... params): EnumShowInChart;
declare function v8New(name:"ПеречислениеОтображениеВДиаграмме",... params): ПеречислениеОтображениеВДиаграмме;
declare function v8New(name:"FormAttribute",... params): FormAttribute;
declare function v8New(name:"РеквизитФормы",... params): РеквизитФормы;
declare function v8New(name:"EnumQuerySchemaOrderDirection",... params): EnumQuerySchemaOrderDirection;
declare function v8New(name:"ПеречислениеНаправлениеПорядкаСхемыЗапроса",... params): ПеречислениеНаправлениеПорядкаСхемыЗапроса;
declare function v8New(name:"COMSafeArray",... params): COMSafeArray;
declare function v8New(name:"COMSafeArray",... params): COMSafeArray;
declare function v8New(name:"ValueStorage",... params): ValueStorage;
declare function v8New(name:"ХранилищеЗначения",... params): ХранилищеЗначения;
declare function v8New(name:"DataWriter",... params): DataWriter;
declare function v8New(name:"ЗаписьДанных",... params): ЗаписьДанных;
declare function v8New(name:"EnumMaxSeries",... params): EnumMaxSeries;
declare function v8New(name:"ПеречислениеМаксимумСерий",... params): ПеречислениеМаксимумСерий;
declare function v8New(name:"PictureProcessor",... params): PictureProcessor;
declare function v8New(name:"ОбработкаКартинок",... params): ОбработкаКартинок;
declare function v8New(name:"EnumSpreadsheetDocumentDrawingLineType",... params): EnumSpreadsheetDocumentDrawingLineType;
declare function v8New(name:"ПеречислениеТипЛинииРисункаТабличногоДокумента",... params): ПеречислениеТипЛинииРисункаТабличногоДокумента;
declare function v8New(name:"EnumDataCompositionSettingsItemState",... params): EnumDataCompositionSettingsItemState;
declare function v8New(name:"ПеречислениеСостояниеЭлементаНастройкиКомпоновкиДанных",... params): ПеречислениеСостояниеЭлементаНастройкиКомпоновкиДанных;
declare function v8New(name:"EnumHTMLDocumentFieldMode",... params): EnumHTMLDocumentFieldMode;
declare function v8New(name:"ПеречислениеРежимПоляHTMLДокумента",... params): ПеречислениеРежимПоляHTMLДокумента;
declare function v8New(name:"CommandInterfaceSettings",... params): CommandInterfaceSettings;
declare function v8New(name:"НастройкиКомандногоИнтерфейса",... params): НастройкиКомандногоИнтерфейса;
declare function v8New(name:"EnumDataCompositionBalanceType",... params): EnumDataCompositionBalanceType;
declare function v8New(name:"ПеречислениеТипОстаткаКомпоновкиДанных",... params): ПеречислениеТипОстаткаКомпоновкиДанных;
declare function v8New(name:"EnumDataCompositionResultItemType",... params): EnumDataCompositionResultItemType;
declare function v8New(name:"ПеречислениеТипЭлементаРезультатаКомпоновкиДанных",... params): ПеречислениеТипЭлементаРезультатаКомпоновкиДанных;
declare function v8New(name:"EnumWSParameterDirection",... params): EnumWSParameterDirection;
declare function v8New(name:"ПеречислениеWSНаправлениеПараметра",... params): ПеречислениеWSНаправлениеПараметра;
declare function v8New(name:"EnumChartLabelType",... params): EnumChartLabelType;
declare function v8New(name:"ПеречислениеВидПодписейКДиаграмме",... params): ПеречислениеВидПодписейКДиаграмме;
declare function v8New(name:"HomePageSettings",... params): HomePageSettings;
declare function v8New(name:"НастройкиНачальнойСтраницы",... params): НастройкиНачальнойСтраницы;
declare function v8New(name:"HomePageForms",... params): HomePageForms;
declare function v8New(name:"СоставФормНачальнойСтраницы",... params): СоставФормНачальнойСтраницы;
declare function v8New(name:"EnumChartLabelsOrientation",... params): EnumChartLabelsOrientation;
declare function v8New(name:"ПеречислениеОриентацияМетокДиаграммы",... params): ПеречислениеОриентацияМетокДиаграммы;
declare function v8New(name:"EnumPivotChartType",... params): EnumPivotChartType;
declare function v8New(name:"ПеречислениеТипСводнойДиаграммы",... params): ПеречислениеТипСводнойДиаграммы;
declare function v8New(name:"TransferableFileDescription",... params): TransferableFileDescription;
declare function v8New(name:"ОписаниеПередаваемогоФайла",... params): ОписаниеПередаваемогоФайла;
declare function v8New(name:"DataCompositionFieldDetailsItem",... params): DataCompositionFieldDetailsItem;
declare function v8New(name:"ЭлементРасшифровкиКомпоновкиДанныхПоля",... params): ЭлементРасшифровкиКомпоновкиДанныхПоля;
declare function v8New(name:"EnumChartSplineMode",... params): EnumChartSplineMode;
declare function v8New(name:"ПеречислениеРежимСглаживанияДиаграммы",... params): ПеречислениеРежимСглаживанияДиаграммы;
declare function v8New(name:"ContactManager",... params): ContactManager;
declare function v8New(name:"МенеджерКонтактов",... params): МенеджерКонтактов;
declare function v8New(name:"EnumChartScaleTitlePlacement",... params): EnumChartScaleTitlePlacement;
declare function v8New(name:"ПеречислениеРасположениеЗаголовкаШкалыДиаграммы",... params): ПеречислениеРасположениеЗаголовкаШкалыДиаграммы;
declare function v8New(name:"EnumItemHeightControlVariant",... params): EnumItemHeightControlVariant;
declare function v8New(name:"ПеречислениеВариантУправленияВысотойЭлемента",... params): ПеречислениеВариантУправленияВысотойЭлемента;
declare function v8New(name:"GanttChart",... params): GanttChart;
declare function v8New(name:"ДиаграммаГанта",... params): ДиаграммаГанта;
declare function v8New(name:"EnumCommonAttributeUse",... params): EnumCommonAttributeUse;
declare function v8New(name:"ПеречислениеИспользованиеОбщегоРеквизита",... params): ПеречислениеИспользованиеОбщегоРеквизита;
declare function v8New(name:"DataCompositionAvailableSettingsSource",... params): DataCompositionAvailableSettingsSource;
declare function v8New(name:"ИсточникДоступныхНастроекКомпоновкиДанных",... params): ИсточникДоступныхНастроекКомпоновкиДанных;
declare function v8New(name:"EnumChartLineType",... params): EnumChartLineType;
declare function v8New(name:"ПеречислениеТипЛинииДиаграммы",... params): ПеречислениеТипЛинииДиаграммы;
declare function v8New(name:"ChartsViewSettings",... params): ChartsViewSettings;
declare function v8New(name:"НастройкаОтображенияДиаграмм",... params): НастройкаОтображенияДиаграмм;
declare function v8New(name:"DOMNodeWriter",... params): DOMNodeWriter;
declare function v8New(name:"ЗаписьУзловDOM",... params): ЗаписьУзловDOM;
declare function v8New(name:"EnumChartValuesBySeriesConnectionType",... params): EnumChartValuesBySeriesConnectionType;
declare function v8New(name:"ПеречислениеТипСоединенияЗначенийПоСериямДиаграммы",... params): ПеречислениеТипСоединенияЗначенийПоСериямДиаграммы;
declare function v8New(name:"InAppPurchasesManager",... params): InAppPurchasesManager;
declare function v8New(name:"МенеджерВстроенныхПокупок",... params): МенеджерВстроенныхПокупок;
declare function v8New(name:"EnumChartBubbleSizing",... params): EnumChartBubbleSizing;
declare function v8New(name:"ПеречислениеВлияниеРазмераНаПузырекДиаграммы",... params): ПеречислениеВлияниеРазмераНаПузырекДиаграммы;
declare function v8New(name:"PivotChart",... params): PivotChart;
declare function v8New(name:"СводнаяДиаграмма",... params): СводнаяДиаграмма;
declare function v8New(name:"EnumNumericValueType",... params): EnumNumericValueType;
declare function v8New(name:"ПеречислениеВидЧисловогоЗначения",... params): ПеречислениеВидЧисловогоЗначения;
declare function v8New(name:"RepresentableDocumentBatch",... params): RepresentableDocumentBatch;
declare function v8New(name:"ПакетОтображаемыхДокументов",... params): ПакетОтображаемыхДокументов;
declare function v8New(name:"EnumGanttChartLinkType",... params): EnumGanttChartLinkType;
declare function v8New(name:"ПеречислениеТипСвязиДиаграммыГанта",... params): ПеречислениеТипСвязиДиаграммыГанта;
declare function v8New(name:"DataCompositionAppearanceTemplateArea",... params): DataCompositionAppearanceTemplateArea;
declare function v8New(name:"ОбластьМакетаОформленияКомпоновкиДанных",... params): ОбластьМакетаОформленияКомпоновкиДанных;
declare function v8New(name:"EnumSpreadsheetDocumentPointerType",... params): EnumSpreadsheetDocumentPointerType;
declare function v8New(name:"ПеречислениеТипКурсоровТабличногоДокумента",... params): ПеречислениеТипКурсоровТабличногоДокумента;
declare function v8New(name:"Dendrogram",... params): Dendrogram;
declare function v8New(name:"Дендрограмма",... params): Дендрограмма;
declare function v8New(name:"ClientInterfaceHistoryTable",... params): ClientInterfaceHistoryTable;
declare function v8New(name:"ClientInterfaceHistoryTable",... params): ClientInterfaceHistoryTable;
declare function v8New(name:"TextExtraction",... params): TextExtraction;
declare function v8New(name:"ИзвлечениеТекста",... params): ИзвлечениеТекста;
declare function v8New(name:"EnumPresentationAdditionType",... params): EnumPresentationAdditionType;
declare function v8New(name:"ПеречислениеТипДобавленияПредставлений",... params): ПеречислениеТипДобавленияПредставлений;
declare function v8New(name:"EnumRowGotoDirection",... params): EnumRowGotoDirection;
declare function v8New(name:"ПеречислениеНаправлениеПереходаКСтроке",... params): ПеречислениеНаправлениеПереходаКСтроке;
declare function v8New(name:"EnumWindowsCertificateSelectMode",... params): EnumWindowsCertificateSelectMode;
declare function v8New(name:"ПеречислениеСпособВыбораСертификатаWindows",... params): ПеречислениеСпособВыбораСертификатаWindows;
declare function v8New(name:"EnumSpreadsheetDocumentDetailUse",... params): EnumSpreadsheetDocumentDetailUse;
declare function v8New(name:"ПеречислениеИспользованиеРасшифровкиТабличногоДокумента",... params): ПеречислениеИспользованиеРасшифровкиТабличногоДокумента;
declare function v8New(name:"EnumDataCompositionTextPlacementType",... params): EnumDataCompositionTextPlacementType;
declare function v8New(name:"ПеречислениеТипРазмещенияТекстаКомпоновкиДанных",... params): ПеречислениеТипРазмещенияТекстаКомпоновкиДанных;
declare function v8New(name:"EnumQuerySchemaUnionType",... params): EnumQuerySchemaUnionType;
declare function v8New(name:"ПеречислениеТипОбъединенияСхемыЗапроса",... params): ПеречислениеТипОбъединенияСхемыЗапроса;
declare function v8New(name:"EnumContactDataInstantMessagingAddressType",... params): EnumContactDataInstantMessagingAddressType;
declare function v8New(name:"ПеречислениеТипАдресаМгновенныхСообщенийДанныхКонтакта",... params): ПеречислениеТипАдресаМгновенныхСообщенийДанныхКонтакта;
declare function v8New(name:"EnumDataAnalysisTimeIntervalUnitType",... params): EnumDataAnalysisTimeIntervalUnitType;
declare function v8New(name:"ПеречислениеТипЕдиницыИнтервалаВремениАнализаДанных",... params): ПеречислениеТипЕдиницыИнтервалаВремениАнализаДанных;
declare function v8New(name:"XSEnumerationFacet",... params): XSEnumerationFacet;
declare function v8New(name:"ФасетПеречисленияXS",... params): ФасетПеречисленияXS;
declare function v8New(name:"EnumSpreadsheetDocumentPatternType",... params): EnumSpreadsheetDocumentPatternType;
declare function v8New(name:"ПеречислениеТипУзораТабличногоДокумента",... params): ПеречислениеТипУзораТабличногоДокумента;
declare function v8New(name:"GroupBox",... params): GroupBox;
declare function v8New(name:"РамкаГруппы",... params): РамкаГруппы;
declare function v8New(name:"EnumChartPointsAxisValuesSource",... params): EnumChartPointsAxisValuesSource;
declare function v8New(name:"ПеречислениеИсточникЗначенийОсиТочекДиаграммы",... params): ПеречислениеИсточникЗначенийОсиТочекДиаграммы;
declare function v8New(name:"EnumDeviceCameraType",... params): EnumDeviceCameraType;
declare function v8New(name:"ПеречислениеТипКамерыУстройства",... params): ПеречислениеТипКамерыУстройства;
declare function v8New(name:"EnumApplicationUsePurpose",... params): EnumApplicationUsePurpose;
declare function v8New(name:"ПеречислениеНазначениеИспользованияПриложения",... params): ПеречислениеНазначениеИспользованияПриложения;
declare function v8New(name:"EnumAutoShowClearButtonMode",... params): EnumAutoShowClearButtonMode;
declare function v8New(name:"ПеречислениеРежимАвтоОтображенияКнопкиОчистки",... params): ПеречислениеРежимАвтоОтображенияКнопкиОчистки;
declare function v8New(name:"LinuxCertificationAuthorityCertificates",... params): LinuxCertificationAuthorityCertificates;
declare function v8New(name:"СертификатыУдостоверяющихЦентровLinux",... params): СертификатыУдостоверяющихЦентровLinux;
declare function v8New(name:"DataAnalysisReportBuilder",... params): DataAnalysisReportBuilder;
declare function v8New(name:"ПостроительОтчетаАнализаДанных",... params): ПостроительОтчетаАнализаДанных;
declare function v8New(name:"EnumDataAnalysisColumnTypeAssociationRules",... params): EnumDataAnalysisColumnTypeAssociationRules;
declare function v8New(name:"ПеречислениеТипКолонкиАнализаДанныхПоискАссоциаций",... params): ПеречислениеТипКолонкиАнализаДанныхПоискАссоциаций;
declare function v8New(name:"FormSettings",... params): FormSettings;
declare function v8New(name:"НастройкиФормы",... params): НастройкиФормы;
declare function v8New(name:"AggregateInformation",... params): AggregateInformation;
declare function v8New(name:"ИнформацияОбАгрегате",... params): ИнформацияОбАгрегате;
declare function v8New(name:"EnumChartSeriesOrderInLegend",... params): EnumChartSeriesOrderInLegend;
declare function v8New(name:"ПеречислениеПорядокСерийВЛегендеДиаграммы",... params): ПеречислениеПорядокСерийВЛегендеДиаграммы;
declare function v8New(name:"EnumBarcodeType",... params): EnumBarcodeType;
declare function v8New(name:"ПеречислениеТипШтрихКода",... params): ПеречислениеТипШтрихКода;
declare function v8New(name:"EnumChartSpaceMode",... params): EnumChartSpaceMode;
declare function v8New(name:"ПеречислениеРежимПробеловДиаграммы",... params): ПеречислениеРежимПробеловДиаграммы;
declare function v8New(name:"XSLengthFacet",... params): XSLengthFacet;
declare function v8New(name:"ФасетДлиныXS",... params): ФасетДлиныXS;
declare function v8New(name:"AdRepresentationManager",... params): AdRepresentationManager;
declare function v8New(name:"МенеджерОтображенияРекламы",... params): МенеджерОтображенияРекламы;
declare function v8New(name:"EnumDataCompositionPeriodAdditionType",... params): EnumDataCompositionPeriodAdditionType;
declare function v8New(name:"ПеречислениеТипДополненияПериодаКомпоновкиДанных",... params): ПеречислениеТипДополненияПериодаКомпоновкиДанных;
declare function v8New(name:"FileDialog",... params): FileDialog;
declare function v8New(name:"ДиалогВыбораФайла",... params): ДиалогВыбораФайла;
declare function v8New(name:"EnumDataAnalysisAssociationRulesOrderType",... params): EnumDataAnalysisAssociationRulesOrderType;
declare function v8New(name:"ПеречислениеТипУпорядочиванияПравилАссоциацииАнализаДанных",... params): ПеречислениеТипУпорядочиванияПравилАссоциацииАнализаДанных;
declare function v8New(name:"XSMaxInclusiveFacet",... params): XSMaxInclusiveFacet;
declare function v8New(name:"ФасетМаксимальногоВключающегоЗначенияXS",... params): ФасетМаксимальногоВключающегоЗначенияXS;
declare function v8New(name:"EnumDimensionPlacementType",... params): EnumDimensionPlacementType;
declare function v8New(name:"ПеречислениеТипРазмещенияИзмерений",... params): ПеречислениеТипРазмещенияИзмерений;
declare function v8New(name:"EnumDataCompositionSortDirection",... params): EnumDataCompositionSortDirection;
declare function v8New(name:"ПеречислениеНаправлениеСортировкиКомпоновкиДанных",... params): ПеречислениеНаправлениеСортировкиКомпоновкиДанных;
declare function v8New(name:"EnumDataCompositionGroupFieldsPlacement",... params): EnumDataCompositionGroupFieldsPlacement;
declare function v8New(name:"ПеречислениеРасположениеПолейГруппировкиКомпоновкиДанных",... params): ПеречислениеРасположениеПолейГруппировкиКомпоновкиДанных;
declare function v8New(name:"DataCompositionResultSpreadsheetDocumentOutputProcessor",... params): DataCompositionResultSpreadsheetDocumentOutputProcessor;
declare function v8New(name:"ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент",... params): ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
declare function v8New(name:"EnumDataCompositionFieldsTitleType",... params): EnumDataCompositionFieldsTitleType;
declare function v8New(name:"ПеречислениеТипЗаголовкаПолейКомпоновкиДанных",... params): ПеречислениеТипЗаголовкаПолейКомпоновкиДанных;
declare function v8New(name:"EnumSpreadsheetDocumentStepDirectionType",... params): EnumSpreadsheetDocumentStepDirectionType;
declare function v8New(name:"ПеречислениеТипНаправленияПереходаТабличногоДокумента",... params): ПеречислениеТипНаправленияПереходаТабличногоДокумента;
declare function v8New(name:"EnumAutoCapitalizationOnTextInput",... params): EnumAutoCapitalizationOnTextInput;
declare function v8New(name:"ПеречислениеАвтоИзменениеРегистраПриВводеТекста",... params): ПеречислениеАвтоИзменениеРегистраПриВводеТекста;
declare function v8New(name:"EnumRoamingUsage",... params): EnumRoamingUsage;
declare function v8New(name:"ПеречислениеИспользованиеРоуминга",... params): ПеречислениеИспользованиеРоуминга;
declare function v8New(name:"EnumTimeScaleDayFormat",... params): EnumTimeScaleDayFormat;
declare function v8New(name:"ПеречислениеФорматДняШкалыВремени",... params): ПеречислениеФорматДняШкалыВремени;
declare function v8New(name:"DataCompositionPivotTableDataSource",... params): DataCompositionPivotTableDataSource;
declare function v8New(name:"ИсточникДанныхСводнойТаблицыКомпоновкиДанных",... params): ИсточникДанныхСводнойТаблицыКомпоновкиДанных;
declare function v8New(name:"EnumDecisionTreeSimplificationType",... params): EnumDecisionTreeSimplificationType;
declare function v8New(name:"ПеречислениеТипУпрощенияДереваРешений",... params): ПеречислениеТипУпрощенияДереваРешений;
declare function v8New(name:"File",... params): File;
declare function v8New(name:"Файл",... params): Файл;
declare function v8New(name:"EnumDataAnalysisColumnType",... params): EnumDataAnalysisColumnType;
declare function v8New(name:"ПеречислениеТипКолонкиАнализаДанных",... params): ПеречислениеТипКолонкиАнализаДанных;
declare function v8New(name:"ZipFileReader",... params): ZipFileReader;
declare function v8New(name:"ЧтениеZipФайла",... params): ЧтениеZipФайла;
declare function v8New(name:"EnumGeographicalSchemaObjectFindType",... params): EnumGeographicalSchemaObjectFindType;
declare function v8New(name:"ПеречислениеТипПоискаОбъектовГеографическойСхемы",... params): ПеречислениеТипПоискаОбъектовГеографическойСхемы;
declare function v8New(name:"EnumComparisonType",... params): EnumComparisonType;
declare function v8New(name:"ПеречислениеВидСравнения",... params): ПеречислениеВидСравнения;
declare function v8New(name:"EnumContactDataURLType",... params): EnumContactDataURLType;
declare function v8New(name:"ПеречислениеТипВебАдресаДанныхКонтакта",... params): ПеречислениеТипВебАдресаДанныхКонтакта;
declare function v8New(name:"HTMLReader",... params): HTMLReader;
declare function v8New(name:"ЧтениеHTML",... params): ЧтениеHTML;
declare function v8New(name:"EnumDataAnalysisResultTableFillType",... params): EnumDataAnalysisResultTableFillType;
declare function v8New(name:"ПеречислениеТипЗаполненияТаблицыРезультатаАнализаДанных",... params): ПеречислениеТипЗаполненияТаблицыРезультатаАнализаДанных;
declare function v8New(name:"DeliverableNotificationManager",... params): DeliverableNotificationManager;
declare function v8New(name:"МенеджерДоставляемыхУведомлений",... params): МенеджерДоставляемыхУведомлений;
declare function v8New(name:"RegisterRecordsCollection",... params): RegisterRecordsCollection;
declare function v8New(name:"КоллекцияДвижений",... params): КоллекцияДвижений;
declare function v8New(name:"QueryBuilder",... params): QueryBuilder;
declare function v8New(name:"ПостроительЗапроса",... params): ПостроительЗапроса;
declare function v8New(name:"EnumPivotTableLinesShowType",... params): EnumPivotTableLinesShowType;
declare function v8New(name:"ПеречислениеТипОтображенияЛинийСводнойТаблицы",... params): ПеречислениеТипОтображенияЛинийСводнойТаблицы;
declare function v8New(name:"EnumFTPSecureConnectionUsageLevel",... params): EnumFTPSecureConnectionUsageLevel;
declare function v8New(name:"ПеречислениеУровеньИспользованияЗащищенногоСоединенияFTP",... params): ПеречислениеУровеньИспользованияЗащищенногоСоединенияFTP;
declare function v8New(name:"EnumByteOrder",... params): EnumByteOrder;
declare function v8New(name:"ПеречислениеПорядокБайтов",... params): ПеречислениеПорядокБайтов;
declare function v8New(name:"XSFractionDigitsFacet",... params): XSFractionDigitsFacet;
declare function v8New(name:"ФасетКоличестваРазрядовДробнойЧастиXS",... params): ФасетКоличестваРазрядовДробнойЧастиXS;
declare function v8New(name:"EnumBubbleChartNegativeValuesShowMode",... params): EnumBubbleChartNegativeValuesShowMode;
declare function v8New(name:"ПеречислениеОтображениеОтрицательныхЗначенийПузырьковойДиаграммы",... params): ПеречислениеОтображениеОтрицательныхЗначенийПузырьковойДиаграммы;
declare function v8New(name:"ChoiceParameterLink",... params): ChoiceParameterLink;
declare function v8New(name:"СвязьПараметраВыбора",... params): СвязьПараметраВыбора;
declare function v8New(name:"EnumGanttChartIntervalRepresentation",... params): EnumGanttChartIntervalRepresentation;
declare function v8New(name:"ПеречислениеОтображениеИнтервалаДиаграммыГанта",... params): ПеречислениеОтображениеИнтервалаДиаграммыГанта;
declare function v8New(name:"ClientInterfaceNotificationsTable",... params): ClientInterfaceNotificationsTable;
declare function v8New(name:"ClientInterfaceNotificationsTable",... params): ClientInterfaceNotificationsTable;

}
